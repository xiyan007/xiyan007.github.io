<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS 形状绘制</title>
      <link href="/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/"/>
      <url>/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="三角形绘制原理"><a href="#三角形绘制原理" class="headerlink" title="三角形绘制原理"></a>三角形绘制原理</h2><p>绘制原理：设置元素宽高均为 0，通过设置边框 border 来绘制三角形。</p><p><strong>step1: css border 绘制宽为 100px 的正方形，每个边框设置不同颜色</strong></p><style>.triangle1 {  margin-bottom: 16px;  width: 0;  height: 0;  /* 设置单个边框大小为50px */  border: 50px solid;  /* 按照 上右下左 顺序设置边框颜色 */  border-color: red orange yellow green;}</style><div class="triangle1"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 设置单个边框大小为50px */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="comment">/* 按照 上右下左 顺序设置边框颜色 */</span></span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step2: 保留一个边框颜色，其他三个边框设置透明</strong></p><p>这样可以绘制一个箭头向下的三角形，但是元素实际占用尺寸比显示的要多。</p><style>.triangle2 {  margin-bottom: 16px;  width: 0;  height: 0;  border: 50px solid;  border-color: red transparent transparent transparent;  background-color: #f5f5f5;}</style><div class="triangle2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step3: 分别设置边框大小，使绘制的图形占用尺寸最小</strong></p><p>分别设置左、上、右边框大小为 50px, 再设置左右边框颜色透明。</p><style>.triangle3-1 {  display: inline-block;  margin-bottom: 16px;  margin-right: 16px;  background-color: #f5f5f5;  width: 0;  height: 0;  border-style: solid;  border-top-width: 50px;   border-right-width: 50px;  border-left-width: 50px;  border-color: red orange yellow green;}.triangle3-2 {  border-color: red transparent transparent transparent;}.triangle3-3 {  border-left-width: 30px;  border-right-width: 30px;  border-color: red transparent transparent transparent;}</style><div class="triangle3-1"></div><div class="triangle3-1 triangle3-2"></div><div class="triangle3-1 triangle3-3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle3-1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3-2</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3-3</span> &#123;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- **step4: 绘制箭头指向不同方向的三角形**<style>.triangle4 {  display: inline-block;  margin-bottom: 16px;  margin-right: 16px;  background-color: #f5f5f5;  width: 0;  height: 0;  border-style: solid;}.triangle-top {  border-width: 50px 30px 0 30px;  border-color: red transparent transparent transparent;}.triangle-right {  border-width: 30px 0 30px 50px;  border-color: transparent transparent transparent red;}.triangle-bottom {  border-width: 0 30px   border-color: transparent transparent transparent red;}</style><div class="triangle4 triangle-top"></div><div class="triangle4 triangle-right"></div><div class="triangle4 triangle-bottom"></div><div class="triangle4 triangle-left"></div>```css``` -->]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 操作符和表达式</title>
      <link href="/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="数值分割符-1-0000-0000"><a href="#数值分割符-1-0000-0000" class="headerlink" title="数值分割符 (1_0000_0000)"></a>数值分割符 (1_0000_0000)</h2><p>ES2021 引入数值分隔符<code>_</code>, 在数值之间提供分隔，使一个长数值读起来更容易。十进制，十进制小数部分，二进制，十六进制都可以使用分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000</span>) <span class="comment">// 1万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0_0000</span>) <span class="comment">// 10万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000_0000</span>) <span class="comment">// 1亿</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_1_1</span>) <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11_1</span>) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_1_1</span>) <span class="comment">// 0.111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_11</span>) <span class="comment">// 0.111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0x1_1</span>) <span class="comment">// 0x11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b1_1</span>) <span class="comment">// 0b11</span></span><br></pre></td></tr></table></figure><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a> 对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p><p>example1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = (a, b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">c = (c++, c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="可选链接操作符"><a href="#可选链接操作符" class="headerlink" title="可选链接操作符 (?.)"></a>可选链接操作符 (?.)</h2><p>可选链操作符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为 <code>null</code> 或者 <code>undefined</code> 的情况下不会引起错误，该表达式短路返回值是 <code>undefined。</code></p><h2 id="逻辑无效赋值"><a href="#逻辑无效赋值" class="headerlink" title="逻辑无效赋值 (??=)"></a>逻辑无效赋值 (??=)</h2><pre><code>expr1 ?? expr2</code></pre><p>当 expr1 值为 null 或 undefined 时，返回 expr2 的值，否则返回 expr1 的值。</p><p>  <code>x ??= y</code> 等价于 <code>x ?? (x=y)</code></p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">obj.<span class="property">a</span> ??= <span class="number">2</span></span><br><span class="line">obj.<span class="property">b</span> ??= <span class="number">6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="静态和私有方法-属性"><a href="#静态和私有方法-属性" class="headerlink" title="静态和私有方法/属性"></a>静态和私有方法/属性</h2><p>在一个类里面可以给属性前面添加 <code>#</code> 符号来标记为私有，<code>getter/setter</code> 也可以标记为私有，私有的方法和属性只有在类的内部可以访问。</p><p>添加前缀 <code>static</code> 可以设置静态的方法和属性，它们只能通过类本身来访问。</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> &#123;</span><br><span class="line">  #age = <span class="number">18</span> <span class="comment">// 私有属性，只能在类的内部访问，不能通过类的实例访问</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">&#x27;male&#x27;</span> <span class="comment">// 静态属性，只能通过类本身访问，不能通过类的实例访问</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.#age = age</span><br><span class="line">    <span class="title class_">Man</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>) <span class="comment">// [class Man] &#123; age: 25 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance) <span class="comment">// Man &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">sex</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>执行过程：</p><ul><li>表达式从左向右执行，先给 <code>a</code> 赋值 <code>b</code></li><li>JS 引擎会在作用于链寻找 <code>b</code>，<code>b = c</code> 是一个赋值表达式</li><li>继续在作用域链里寻找 <code>c</code>，<code>c = 1</code>即 <code>c</code> 被赋值为1</li><li>最后 <code>b</code> 和 <code>a</code> 依次被赋值为 1</li></ul><h2 id="连续箭头函数"><a href="#连续箭头函数" class="headerlink" title="连续箭头函数"></a>连续箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数 <code>add</code> 柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add_curry</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">c</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b + c</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add_curry</code> 函数返回值为函数，所以它是一个高阶函数。</p><p>ES6 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add_curry_es6</span> = a =&gt; <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">c</span> =&gt;</span> (a + b + c)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry_es6</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>在数学和计算机科学中，高阶函数指的是一个函数至少满足下列一个条件：</p><ul><li>接收一个或多个函数作为参数</li><li>返回一个函数作为它的结果</li></ul><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化是一种函数的转换，是把接受多个参数的函数转换成接收一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>柯里化又称部分求值。一个currying函数首先会接收一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另一个函数，刚才传入的参数在函数形式的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所以参数都会被一次性用于求值。</p><p>柯里化要求函数具有固定数量的参数。<br>根据定义，柯里化应该将 sum(a, b, c) 转换为 sum(a)(b)(c)。</p><h3 id="柯里化函数的用途"><a href="#柯里化函数的用途" class="headerlink" title="柯里化函数的用途"></a>柯里化函数的用途</h3><ul><li>可以惰性求值</li><li>可以提取传递部分参数</li></ul><p>n 个连续箭头组成的函数实际上就是柯里化了 n - 1次。</p><p>具体调用过程如下：</p><p>前 n - 1 次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值。所以连续箭头函数就是多次柯里化函数的 es6 写法。</p><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844903857777016845">https://juejin.cn/post/6844903857777016845</a></li><li><a href="https://zh.javascript.info/currying-partials">https://zh.javascript.info/currying-partials</a></li><li><a href="https://juejin.cn/post/6969016993215152136">https://juejin.cn/post/6969016993215152136</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令和操作</title>
      <link href="/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Config-Account"><a href="#Config-Account" class="headerlink" title="Config Account"></a>Config Account</h2><h3 id="查询账号、邮箱"><a href="#查询账号、邮箱" class="headerlink" title="查询账号、邮箱"></a>查询账号、邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line"></span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h3 id="设置账号、邮箱"><a href="#设置账号、邮箱" class="headerlink" title="设置账号、邮箱"></a>设置账号、邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;email address&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Generate-SSH-key"><a href="#Generate-SSH-key" class="headerlink" title="Generate SSH key"></a>Generate SSH key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ED25519</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;email address&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048-bit RSA</span></span><br><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">&quot;email address&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h2><h3 id="查询分支"><a href="#查询分支" class="headerlink" title="查询分支"></a>查询分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询本地所有分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有分支（本地+remote）</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="创建分支、切换分支"><a href="#创建分支、切换分支" class="headerlink" title="创建分支、切换分支"></a>创建分支、切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置新建分支代码源为远程分支 branchName</span></span><br><span class="line">git checkout -b branchName  origin/branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换本地已有分支</span></span><br><span class="line">git checkout branchName</span><br></pre></td></tr></table></figure><h3 id="push-本地分支到-remote"><a href="#push-本地分支到-remote" class="headerlink" title="push 本地分支到 remote"></a>push 本地分支到 remote</h3><p>远程服务器不存在该分支时，可通过下列操作 push 本地分支到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localBranchName</span><br><span class="line">git push origin localBranchName:remoteBranchName</span><br><span class="line">git push --set-upstream origin remoteBranchName</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将其他分支代码合并到当前分支</span></span><br><span class="line">git merge otherBranchName</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地某个分支</span></span><br><span class="line">git branch -d branchName</span><br></pre></td></tr></table></figure><h2 id="Git-Remote"><a href="#Git-Remote" class="headerlink" title="Git Remote"></a>Git Remote</h2><h3 id="查询远程仓库地址"><a href="#查询远程仓库地址" class="headerlink" title="查询远程仓库地址"></a>查询远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="仓库迁移"><a href="#仓库迁移" class="headerlink" title="仓库迁移"></a>仓库迁移</h3><p>可以保存之前的提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除当前仓库关联的远程地址</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联新的 git 地址到本地仓库</span></span><br><span class="line">git remote add origin newAddress</span><br></pre></td></tr></table></figure><h2 id="撤销提交操作"><a href="#撤销提交操作" class="headerlink" title="撤销提交操作"></a>撤销提交操作</h2><h3 id="撤销-git-add-操作"><a href="#撤销-git-add-操作" class="headerlink" title="撤销 git add 操作"></a>撤销 git add 操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销指定文件</span></span><br><span class="line">git reset HEAD xxx/xxx.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销所有文件</span></span><br><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><h3 id="撤销-git-commit-操作"><a href="#撤销-git-commit-操作" class="headerlink" title="撤销 git commit 操作"></a>撤销 git commit 操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前 commit 注释</span></span><br><span class="line">git commit --amend <span class="comment"># 进入vim编辑器，可以修改注释</span></span><br></pre></td></tr></table></figure><h2 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h2><p>回退到之前的某个 commit 代码状态。</p><blockquote><p>主分支的代码是受保护的，在本地代码回退后，再推送到主分支时会失败。开发时最好使用其他分支。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史，确认回退版本，拿到 commit_id</span></span><br><span class="line">git <span class="built_in">log</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行版本回退</span></span><br><span class="line">git reset --hard commit_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
