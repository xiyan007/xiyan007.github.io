<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>主题切换方案</title>
      <link href="/blog/2023/05/18/%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2%E5%88%87%E6%8D%A2%E6%96%B9%E6%A1%88/"/>
      <url>/blog/2023/05/18/%E4%B8%BB%E9%A2%98%E9%A2%9C%E8%89%B2%E5%88%87%E6%8D%A2%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h2 id="跟随系统预设属性切换"><a href="#跟随系统预设属性切换" class="headerlink" title="跟随系统预设属性切换"></a>跟随系统预设属性切换</h2><p><strong>prefers-color-scheme</strong></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a> 是 CSS 的媒体特性，被用来检测用户是否请求浅色或深色颜色主题。</p><iframe src="/blog/code/html/system_color_scheme.html" height="100"></iframe><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> {</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 系统主题色配置为深色后，下面样式生效 */</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">prefers-color-scheme</span>: dark) {</span><br><span class="line">  <span class="selector-class">.box</span> {</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#dcb</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="主题颜色切换实现方式"><a href="#主题颜色切换实现方式" class="headerlink" title="主题颜色切换实现方式"></a>主题颜色切换实现方式</h2><h3 id="使用-link-标签引入样式"><a href="#使用-link-标签引入样式" class="headerlink" title="使用 link 标签引入样式"></a>使用 link 标签引入样式</h3><p>准备几套样式文件，在切换主题时，动态创建 link 标签，插入到 head 标签中，或者动态更新 link 标签的 href 属性值。</p><p>优点：可以按需加载主题样式<br>缺点：</p><ul><li>样式文件过大，网络不佳的情况下请求有加载延迟，导致主题样式切换不流畅</li><li>主题样式写死，不便于修改特定主题样式或新增主题样式</li></ul><h3 id="动态切换类名"><a href="#动态切换类名" class="headerlink" title="动态切换类名"></a>动态切换类名</h3><p>根据需要，在切换主题时动态设置根元素类名。</p><p>优点：不用重新加载主题样式问题，切换主题比较流畅<br>缺点：</p><ul><li>首屏加载时需要额外的时间来加载样式资源</li><li>主题样式写死，不便于修改特定主题样式或新增主题样式</li></ul><h3 id="css变量-类名"><a href="#css变量-类名" class="headerlink" title="css变量 + 类名"></a>css变量 + 类名</h3><!-- 根元素 html 指定属性 [color-scheme](https://developer.mozilla.org/en-US/docs/Web/CSS/color-scheme) 的值，来表明渲染哪种主题比较舒适。 --><iframe src="/blog/code/html/color_scheme.html" height="100"></iframe><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 定义根作用域下的变量 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:root</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-background</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 更改dark类名下变量的取值 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dark</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-background</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="comment">/* 更改pink类名下变量的取值 */</span></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.pink</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--theme-background</span>: pink;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transition</span>: all <span class="number">0.2s</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 使用变量 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--theme-color);</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: <span class="built_in">var</span>(--theme-background);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>颜色配置<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"dark-btn"</span>&gt;</span>dark<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"pink-btn"</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.dark-btn'</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> btn2 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'.pink-btn'</span>);</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> html = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'html'</span>);</span></span><br><span class="line"><span class="language-javascript">      btn1.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        html.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">'pink'</span>);</span></span><br><span class="line"><span class="language-javascript">        html.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">'dark'</span>);</span></span><br><span class="line"><span class="language-javascript">      };</span></span><br><span class="line"><span class="language-javascript">      btn2.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        html.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">'dark'</span>);</span></span><br><span class="line"><span class="language-javascript">        html.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">'pink'</span>);</span></span><br><span class="line"><span class="language-javascript">      };</span></span><br><span class="line"><span class="language-javascript">    });</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在根作用域 <code>:root</code> 下定义好 css 变量，切换主题时更新根元素 html 的类名，在不同主题下取对应的 css 变量值。</p><p>优点：</p><ul><li>主题样式公共部分可以复用</li><li>切换主题流畅</li><li>新增、修改主题比较灵活方便</li></ul><p>缺点：首屏需要加载主题样式资源</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a></li><li><a href="https://juejin.cn/post/7134594122391748615#heading-8">https://juejin.cn/post/7134594122391748615#heading-8</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 实用函数</title>
      <link href="/blog/2023/04/27/JS-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/blog/2023/04/27/JS-%E5%AE%9E%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="节流函数"><a href="#节流函数" class="headerlink" title="节流函数"></a>节流函数</h2><p>设置函数被调用的最小时间间隔，避免频繁调用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数节流：限制函数调用频率</span></span><br><span class="line"><span class="comment"> * throttle 函数的原理是，将即将被执行的函数用 setTimeout 延迟一段时间执行</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} fn 延迟执行的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} interval 延迟执行的时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, interval = <span class="number">500</span></span>) {</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> firstTime = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用闭包，延迟变量寿命</span></span><br><span class="line">  <span class="comment">// 返回的函数不能使用箭头函数，箭头函数没有自己的arguments，获取的arguements来自父作用域</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">    <span class="keyword">if</span> (firstTime) {</span><br><span class="line">      <span class="title function_">fn</span>(args);</span><br><span class="line">      firstTime = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (timer) <span class="keyword">return</span>;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">      timer = <span class="literal">null</span>;</span><br><span class="line">      <span class="title function_">fn</span>(args);</span><br><span class="line">    }, interval);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params">args</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), ...args); <span class="comment">// 两秒打印一次时间 x y</span></span><br><span class="line">}, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="title function_">log</span>(<span class="string">'x'</span>, <span class="string">'y'</span>), <span class="number">500</span>); <span class="comment">// 间隔 500 毫秒执行 log 函数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Canvas convert to image file</title>
      <link href="/blog/2023/04/26/Canvas-convert-to-image-file/"/>
      <url>/blog/2023/04/26/Canvas-convert-to-image-file/</url>
      
        <content type="html"><![CDATA[<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p><a href="/blog/code/html/canvas_to_image_file.html" target="_blank">demo</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">crossOrigin</span> = <span class="string">'Anonymous'</span>;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">'/blog/resources/img/cat/2.jpeg'</span>;</span><br><span class="line">img.<span class="property">onload</span> = <span class="function">() =&gt;</span> {</span><br><span class="line">  ctx.<span class="title function_">drawImage</span>(img, <span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>);</span><br><span class="line">  canvas.<span class="title function_">toBlob</span>(<span class="function">(<span class="params">blob</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">const</span> file = <span class="keyword">new</span> <span class="title class_">File</span>([blob], <span class="string">`imageFileName.jpeg`</span>, {</span><br><span class="line">      <span class="attr">type</span>: <span class="string">'image/jpeg'</span>,</span><br><span class="line">    });</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'file'</span>, file);</span><br><span class="line">  }, <span class="string">'image/jpeg'</span>);</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 自定义属性</title>
      <link href="/blog/2023/04/24/CSS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/"/>
      <url>/blog/2023/04/24/CSS-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="声明自定义属性"><a href="#声明自定义属性" class="headerlink" title="声明自定义属性"></a>声明自定义属性</h2><ul><li>自定义属性名以两个减号（- -）开始，属性值可以是任何有效的 css 值。</li><li>自定义属性名称大小写敏感。</li><li>自定义属性是定义在规则集内的。</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">--primary-color</span>: blue;</span><br></pre></td></tr></tbody></table></figure><h2 id="自定义属性作用域和访问方法"><a href="#自定义属性作用域和访问方法" class="headerlink" title="自定义属性作用域和访问方法"></a>自定义属性作用域和访问方法</h2><ul><li><code>:root</code> 根伪类下定义的属性在 html 文档的任何位置都可以访问到。</li><li>在规则集下定义的属性，只能在相同规则集下可见。</li><li>通过 <code>var()</code> 函数访问属性。</li></ul><iframe src="/blog/code/html/css_var.html" height="80"></iframe><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-pseudo">:root</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attr">--primary-color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attr">--danger-color</span>: <span class="built_in">rgb</span>(<span class="number">218</span>, <span class="number">5</span>, <span class="number">5</span>);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attr">--link-color</span>: <span class="built_in">rgb</span>(<span class="number">5</span>, <span class="number">158</span>, <span class="number">247</span>);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span><span class="selector-pseudo">:first</span>-child {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--primary-color);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) {</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 无效设置，--link-color 变量只对 a 元素可见 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--link-color);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--danger-color);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-tag">a</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: <span class="built_in">var</span>(--link-color);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>bbb<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>ccc<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="自定义属性备用值"><a href="#自定义属性备用值" class="headerlink" title="自定义属性备用值"></a>自定义属性备用值</h2><p><code>var()</code> 函数可以设置备用值，当给定的值未定义时，会使用备用值。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) {</span><br><span class="line">  <span class="comment">/* 无效设置，--link-color 变量只对 a 元素可见 */</span></span><br><span class="line">  <span class="comment">/* 无法获取 --link-color 值是，会使用备用值 pink 作为 属性值 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--link-color, pink);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="JS-中操作自定义属性"><a href="#JS-中操作自定义属性" class="headerlink" title="JS 中操作自定义属性"></a>JS 中操作自定义属性</h2><ul><li><code>CSSStyleDeclaration.getPropertyValue()</code> 接口返回一个 DOMString ，其中包含请求的 CSS 属性的值。</li><li><code>CSSStyleDeclaration.setProperty()</code> 方法接口为一个声明了 CSS 样式的对象设置一个新的值。</li><li><code>getComputedStyle()</code> 方法可以返回一个对象，包含一个元素所有的 CSS 属性。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'a'</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">style</span>.<span class="title function_">getPropertyValue</span>(<span class="string">'--link-color'</span>)); <span class="comment">// 打印空白</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">style</span>.<span class="title function_">getPropertyValue</span>(<span class="string">'color'</span>)); <span class="comment">// 打印空白</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(a).<span class="title function_">getPropertyValue</span>(<span class="string">'--link-color'</span>)); <span class="comment">// rgb(218, 5, 5)</span></span><br><span class="line"></span><br><span class="line">  a.<span class="property">style</span>.<span class="title function_">setProperty</span>(<span class="string">'--link-color'</span>, <span class="string">'orange'</span>); <span class="comment">// color 变更为 orange</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>使用 <code>getPropertyValue</code> 方法，初始获取属性为空，可以使用 <code>getComputedStyle</code> 方法拿到元素所有css属性再查询指定属性值。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Using_CSS_custom_properties#%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E6%80%A7">使用 CSS 自定义属性（变量）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/--*">自定义属性（–*）：CSS 变量</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CSSStyleDeclaration/getPropertyValue">CSSStyleDeclaration.getPropertyValue() </a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle#browser_compatibility">Window: getComputedStyle() method</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PropTypes oneOf vs oneOfType</title>
      <link href="/blog/2023/04/23/PropTypes-oneOf-vs-oneOfType/"/>
      <url>/blog/2023/04/23/PropTypes-oneOf-vs-oneOfType/</url>
      
        <content type="html"><![CDATA[<h2 id="PropTypes-是什么"><a href="#PropTypes-是什么" class="headerlink" title="PropTypes 是什么"></a>PropTypes 是什么</h2><p><a href="https://www.npmjs.com/package/prop-types">npm prop-types</a></p><p>prop-types 是用于程序运行时检查 react 组件接收的参数是否和组件内声明的参数类型一致。</p><h2 id="PropTypes-在组件中的使用"><a href="#PropTypes-在组件中的使用" class="headerlink" title="PropTypes 在组件中的使用"></a>PropTypes 在组件中的使用</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">'prop-types'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">MyComponent</span> = props =&gt; {</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置接收的参数类型</span></span><br><span class="line"><span class="title class_">MyComponent</span>.<span class="property">proptypes</span> = {</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOf</span>([<span class="string">'red'</span>, <span class="string">'blue'</span>]),</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">ProppTypes</span>.<span class="property">string</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="title class_">ProppTypes</span>.<span class="property">number</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置参数默认值</span></span><br><span class="line"><span class="title class_">MyComponent</span>.<span class="property">defaultProps</span> = {</span><br><span class="line">  <span class="attr">type</span>: <span class="string">'red'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Mary'</span>,</span><br><span class="line">  <span class="attr">count</span>: <span class="number">10</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="oneOf-vs-oneOfType"><a href="#oneOf-vs-oneOfType" class="headerlink" title="oneOf vs oneOfType"></a>oneOf vs oneOfType</h2><p>oneOf 用来设置一组确定的枚举值，指定的参数需从枚举中取值。</p><p>oneOfType 可以设置多种类型，适用于校验拥有多种类型的参数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">MyComponent</span>.<span class="property">proptypes</span> = {</span><br><span class="line">  <span class="attr">type</span>: <span class="title class_">PropTypes</span>.<span class="title function_">oneOf</span>([<span class="string">'red'</span>, <span class="string">'blue'</span>]),</span><br><span class="line">  <span class="attr">name</span>: <span class="title class_">ProppTypes</span>.<span class="title function_">oneOfTypes</span>([</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="title class_">PropTypes</span>.<span class="property">number</span></span><br><span class="line">  ])</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> React </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS 文本样式</title>
      <link href="/blog/2023/03/21/CSS-%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/"/>
      <url>/blog/2023/03/21/CSS-%E6%96%87%E6%9C%AC%E6%A0%B7%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="text-decoration"><a href="#text-decoration" class="headerlink" title="text-decoration"></a>text-decoration</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration">text-decoration</a> 是 CSS 的一个简写属性，可以设置文本下划线样式。</p><ul><li><code>text-decoration-line</code></li><li><code>text-decoration-color</code></li><li><code>text-decoration-style</code></li><li><code>text-decoration-thickness</code></li></ul><h3 id="text-decoration-line"><a href="#text-decoration-line" class="headerlink" title="text-decoration-line"></a>text-decoration-line</h3><p>设置文本元素装饰，可同时设置多种装饰。</p><blockquote><p>text-decoration-line: underline | overline | line-through | none;</p></blockquote><style>  .mark > div{    font-size: 18px;    display: inline-block;  }</style><div class="mark">  <div style="text-decoration-line:underline">测试文本</div>  <div style="text-decoration-line:overline">测试文本</div>  <div style="text-decoration-line:line-through">测试文本</div>  <div style="text-decoration-line:underline overline line-through">测试文本</div></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:overline"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:line-through"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline overline line-through"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="text-decoration-color"><a href="#text-decoration-color" class="headerlink" title="text-decoration-color"></a>text-decoration-color</h3><p>给 <code>text-decoration-line</code> 属性设置的文本装饰配置颜色。</p><div class="mark">  <div style="text-decoration-line:underline; text-decoration-color: red">测试文本</div>  <div style="text-decoration-line:overline; text-decoration-color: blue">测试文本</div>  <div style="text-decoration-line:underline overline line-through; text-decoration-color: orange">测试文本</div></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-color: red"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:overline; text-decoration-color: blue"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline overline line-through; text-decoration-color: orange"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 如果元素设置了多种文本装饰，如何分别配置颜色</p><h3 id="text-decoration-style"><a href="#text-decoration-style" class="headerlink" title="text-decoration-style"></a>text-decoration-style</h3><p>给 <code>text-decoration-line</code> 属性设置的文本装饰配置类型。</p><blockquote><p>text-decoration-style: solid | double | dotted | dashed | wavy;</p></blockquote><div class="mark">  <div style="text-decoration-line:underline; text-decoration-style: solid">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-style: wavy">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-style: double">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-style: dotted">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-style: dashed">测试文本</div></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-style: solid"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-style: wavy"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-style: double"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-style: dotted"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-style: dashed"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="text-decoration-thickness"><a href="#text-decoration-thickness" class="headerlink" title="text-decoration-thickness"></a>text-decoration-thickness</h3><p>给 <code>text-decoration-line</code> 属性设置的文本装饰配置线条粗细。</p><div class="mark">  <div style="text-decoration-line:underline; text-decoration-thickness: 1px">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-thickness: 3px">测试文本</div>  <div style="text-decoration-line:underline; text-decoration-thickness: 5px">测试文本</div></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mark"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-thickness: 1px"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-thickness: 3px"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-decoration-line:underline; text-decoration-thickness: 5px"</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="text-stroke"><a href="#text-stroke" class="headerlink" title="text-stroke"></a>text-stroke</h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/text-decoration">text-stroke</a> 是 CSS 的一个简写属性，可以设置文本字符描边粗细和颜色。<br>该属性浏览器兼容性较差，IE不支持，FireFox 和 Edge 需要使用 <code>-webkiet-text-stroke</code>，移动端兼容性较差，大部分不支持。</p><ul><li><code>text-stroke-width</code></li><li><code>text-stroke-color</code></li></ul><style>.stroke > div {  display: inline-block;  font-size: 18px;  font-weight: bolder;}.stroke > div:last-child {  text-stroke: 1px red;  -webkit-text-stroke: 1px red;}</style><div class="stroke">  <div>测试文本</div>  <div>测试文本</div></div><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.stroke</span> &gt; <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: bolder;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.stroke</span> &gt; <span class="selector-tag">div</span><span class="selector-pseudo">:last-child</span> {</span></span><br><span class="line"><span class="language-css">  text-stroke: <span class="number">1px</span> red;</span></span><br><span class="line"><span class="language-css">  -webkit-text-stroke: <span class="number">1px</span> red;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"stroke"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>测试文本<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文本颜色渐变"><a href="#文本颜色渐变" class="headerlink" title="文本颜色渐变"></a>文本颜色渐变</h2><h3 id="background-clip"><a href="#background-clip" class="headerlink" title="background-clip"></a>background-clip</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip">background-clip</a><br>background-clip CSS属性设置元素的背景是否延伸到其边框框、填充框或内容框之下。</p><p>ios 兼容性差。</p><style>.gradient-bg {  width: 200px;  font-size: 28px;  font-weight: bolder;  background-image: linear-gradient(to bottom, #ec428c, #32d1d3);  /* 背景裁剪为文字前景色 */  background-clip: text;  -webkit-background-clip: text;   color: red;  /* 设置文字颜色，优先级高于 color 属性 */  -webkit-text-fill-color: transparent; }.gradient-bg:last-child {  background-image: url(/blog/resources/img/cat/0.jpeg);  background-size: cover;  background-position: center;}</style><div>  <div class="gradient-bg">测试文本</div>  <div class="gradient-bg">测试文本</div></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.gradient-bg</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bolder;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#ec428c</span>, <span class="number">#32d1d3</span>);</span><br><span class="line">  <span class="comment">/* 背景裁剪为文字前景色 */</span></span><br><span class="line">  <span class="attribute">background-clip</span>: text;</span><br><span class="line">  -webkit-<span class="attribute">background-clip</span>: text; </span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">  <span class="comment">/* 设置文字颜色，优先级高于 color 属性 */</span></span><br><span class="line">  -webkit-text-fill-<span class="attribute">color</span>: transparent; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.gradient-bg</span><span class="selector-pseudo">:last-child</span> {</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/blog/resources/img/avatar.jpg</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">  <span class="attribute">background-position</span>: center;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现 Promises/A+ 规范</title>
      <link href="/blog/2022/10/19/%E5%AE%9E%E7%8E%B0-Promises-A-%E8%A7%84%E8%8C%83/"/>
      <url>/blog/2022/10/19/%E5%AE%9E%E7%8E%B0-Promises-A-%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h2 id="Promises-A-概述"><a href="#Promises-A-概述" class="headerlink" title="Promises/A+ 概述"></a>Promises/A+ 概述</h2><blockquote><p><strong>An open standard for sound, interoperable JavaScript promises—by implementers, for implementers.</strong></p><p>A promise represents the eventual result of an asynchronous operation. The primary way of interacting with a promise is through its then method, which registers callbacks to receive either a promise’s eventual value or the reason why the promise cannot be fulfilled.</p></blockquote><p><a href="https://promisesaplus.com/">Promises/A+</a> 是一个开放的标准，由实现者创建的可共同操作的承诺，用于实现者。</p><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><ul><li><code>promise</code> 是一个具有 <code>then</code> 方法的对象或函数，其行为符合 <code>Promises/A+</code> 规范。</li><li><code>thenable</code> 是一个对象或函数，用来定义 <code>then</code> 方法。</li><li><code>value</code> 是一个任意合法的 JavaScript 值，包括 <code>undefined</code>、<code>thenable</code> 和 <code>promise</code>。</li><li><code>exception</code> 是一个在使用 <code>throw</code> 声明时抛出的值。</li><li><code>reason</code> 是一个表明 <code>promise</code> 为什么被 <code>rejected</code> 的值。</li></ul><h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><h4 id="Promise-States"><a href="#Promise-States" class="headerlink" title="Promise States"></a>Promise States</h4><p>promise 有三种状态：pending, fulfilled, rejected。promise 必须处于上述三种状态中的一种。</p><ul><li>pending 状态时，promise 可以转变成 fulfilled 或 rejected 状态。</li><li>fulfilled 状态时，promise 不能转变成其他状态，必须要有一个 <code>value</code>，并且这个 <code>value</code> 不能被改变。</li><li>rejected 状态时，promise 不能状态成其他状态，必须要有一个 <code>reason</code>，并且这个 <code>reason</code> 不能被改变。</li></ul><p><code>value</code> 和 <code>reason</code> 不能被改变，意味着 immutable identify（不可变身份，即 <code>===</code>），但这不是暗指 deep immutability。</p><h4 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h4><ul><li>一个 promise 必须提供一个 then 方法来访问当前或最终的 <code>value</code> 或 <code>reason</code>。</li><li><code>then</code> 方法接收两个可选参数 <code>onFulfilled</code> 和 <code>onRejected</code>。若这两个参数非函数类型，怎会被忽略。</li><li><code>onFulfilled</code> 为函数时，会在 promise 转变为 fulfilled 状态后被调用，并且 promise 的 value 作为函数调用的第一个参数。</li><li><code>onRejected</code> 为函数时，会在 promise 转变为 rejected 状态后被调用，并且 promise 的 reason 作为函数调用的第一个参数。</li><li><code>onFulfilled</code> 和 <code>onRejected</code> 只能作为函数调用，并且只能在 promise 状态转变后被调用一次，不能被多次调用。</li><li>在同一 promise 上，then 方法可以多次调用<ul><li>当 promise 为 fulfilled 状态，各自的 <code>onFulfilled</code> 必须按照 then 的发起顺序来执行。</li><li>当 promise 为 rejected 状态，各自的 <code>onRejected</code> 必须按照 then 的发起顺序来执行。</li></ul></li><li><code>then</code> 方法必须返回一个 promise<figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise2 = promise1.<span class="title function_">then</span>(onFulfilled, onRejected);</span><br></pre></td></tr></tbody></table></figure><ul><li>若 onFulfilled 或 onRejected 返回了一个值 x, 则运行 promise 解析程序 <code>[[Resolve]](promise2, x)</code></li><li>若 onFulfilled 或 onRejected 抛出了一个异常 e, 则 promise2 的状态一定是 rejected, 并且使用 e 作为 reason。</li><li>若 onFulfilled 不是一个函数，并且 promise1 状态为 fulfilled，则 promise2 的状态一定是 fulfilled，并且 <code>value</code> 值和 promise1 相同。</li><li>若 onRejected 不是一个函数，并且 promise1 状态为 rejected，则 promise2 的状态一定是 rejected，并且 <code>reason</code> 的值和 promise1 相同。</li></ul></li></ul><!-- ### Promise 解析程序 --><h2 id="实现-Promises-A-规范"><a href="#实现-Promises-A-规范" class="headerlink" title="实现 Promises/A+ 规范"></a>实现 Promises/A+ 规范</h2><h3 id="实现基础功能"><a href="#实现基础功能" class="headerlink" title="实现基础功能"></a>实现基础功能</h3><p>实现 promise 状态，初始回调，以及 then 方法调用。</p><ul><li>定义三个常量表示 promise 三种状态</li><li>定义一个类，名为 CustomPromise</li><li>在 CustomPromise 的构造函数中初始化变量<ul><li>定义变量 <code>value</code> 和 <code>reason</code> 初始值为 undefined</li><li>定义变量 <code>state</code> 用来保存 promise 的状态，初始为 pending</li></ul></li><li>构造函数接收一个 callback 参数<ul><li>callback 为函数类型，接收两个可选参数 resolve 和 reject</li><li>需要捕获 callback 运行异常情况，当捕获到异常时，<code>state</code> 状态转变为 rejected。</li><li>resolve 和 reject 为函数类型</li><li>resolve 函数接收一个参数值，当 state 转变为 fulfilled 状态后，参数值会被赋值给 <code>value</code></li><li>reject 函数接收一个参数值，当 state 转变为 rejected 状态后，参数值会被赋值给 <code>reason</code></li></ul></li><li>在 CustomPromise 中定义 <code>then</code> 方法<ul><li>then 接收两个可选参数 <code>onFulfilled</code> 和 <code>onRejected</code></li><li><code>onFulfilled</code> 和 <code>onRejected</code> 为函数类型，其他类型则忽略</li><li>当 <code>state</code> 转变为 fulfilled 状态后，<code>onFulfilled</code> 函数会被调用，<code>value</code> 作为函数调用参数</li><li>当 <code>state</code> 转变为 rejected 状态后，<code>onRejected</code> 函数会被调用，<code>reason</code> 作为函数调用参数</li></ul></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 promises 三种状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">'PENDING'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">'FULFILLED'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">'REJECTED'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPromise</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callback</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="title function_">callback</span>(resolve, reject);</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) {</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) {</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'v:'</span>, v));</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">v1</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'v1:'</span>, v1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs:</span></span><br><span class="line"><span class="comment">// Promise { 1 }</span></span><br><span class="line"><span class="comment">// CustomPromise { value: 2, reason: undefined, state: 'FULFILLED' }</span></span><br><span class="line"><span class="comment">// v: 2</span></span><br><span class="line"><span class="comment">// v1: 2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="实现异步操作"><a href="#实现异步操作" class="headerlink" title="实现异步操作"></a>实现异步操作</h3><p>promise 可以多次调用 then 方法，并且按照调用顺序依次执行。<br>使用发布订阅模式，在 CustomPromise 的构造函数中定义两个列表 onFulfilledList 和 onRejectedList，分别缓存 then 方法调用时传入的回调函数 onFulfilled 和 onRejected。<br>当 promise 状态由 pending 转变为 fulfilled 后，依次执行 onFulfilledList 中的函数。<br>当 promise 状态由 pending 转变为 rejected 后，依次执行 onRejectedList 中的函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义 promises 三种状态</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">'PENDING'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">'FULFILLED'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">'REJECTED'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPromise</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callback</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledList</span> = []; <span class="comment">// ++</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedList</span> = []; <span class="comment">// ++</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">value</span>)); <span class="comment">// ++</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(<span class="variable language_">this</span>.<span class="property">reason</span>)); <span class="comment">// ++</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="title function_">callback</span>(resolve, reject);</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) {</span><br><span class="line">      <span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) {</span><br><span class="line">      <span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// ++</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledList</span>.<span class="title function_">push</span>(onFulfilled);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">push</span>(onRejected);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">2</span>), <span class="number">2000</span>);</span><br><span class="line">});</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1);</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'v:'</span>, v));</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">v1</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'v1:'</span>, v1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// CustomPromise {</span></span><br><span class="line"><span class="comment">//   value: undefined,</span></span><br><span class="line"><span class="comment">//   reason: undefined,</span></span><br><span class="line"><span class="comment">//   state: 'PENDING',</span></span><br><span class="line"><span class="comment">//   onFulfilledList: [],</span></span><br><span class="line"><span class="comment">//   onRejectedList: []</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"><span class="comment">// v: 2</span></span><br><span class="line"><span class="comment">// v1: 2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="实现-then-方法链式调用"><a href="#实现-then-方法链式调用" class="headerlink" title="实现 then 方法链式调用"></a>实现 then 方法链式调用</h3><p>then 方法必须返回一个 promise 对象才能实现链式调用。<br>链式调用涉及到 promise 状态、<code>value</code> 和 <code>reason</code> 传递问题。<br>值传递描述可以查看上述内容中的 <code>then</code> 方法规范要求，<a href="#then-%E6%96%B9%E6%B3%95">go</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) {</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledList</span>.<span class="title function_">push</span>(onFulfilled);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">push</span>(onRejected);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span>) {</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">          <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">        }</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) {</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">reason</span>));</span><br><span class="line">      } <span class="keyword">else</span> {</span><br><span class="line">        <span class="title function_">reject</span>(<span class="variable language_">this</span>.<span class="property">reason</span>);</span><br><span class="line">      }</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PENDING</span> = <span class="string">'PENDING'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">FULFILLED</span> = <span class="string">'FULFILLED'</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">REJECTED</span> = <span class="string">'REJECTED'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CustomPromise</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">callback</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">undefined</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">PENDING</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onFulfilledList</span> = [];</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">onRejectedList</span> = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">value</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">FULFILLED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onFulfilledList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(cb));</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">reason</span>) =&gt; {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> !== <span class="variable constant_">PENDING</span>) <span class="keyword">return</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">reason</span> = reason;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable constant_">REJECTED</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(cb));</span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">      <span class="title function_">callback</span>(resolve, reject);</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">      <span class="title function_">reject</span>(error);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="title function_">then</span>(<span class="params">onFulfilled, onRejected</span>) {</span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function">(<span class="params">x</span>) =&gt;</span> x;</span><br><span class="line">    onRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span></span><br><span class="line">        ? onRejected</span><br><span class="line">        : <span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">          };</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleFulfilled</span> = (<span class="params">resolve, reject</span>) =&gt; {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title function_">onFulfilled</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleRejected</span> = (<span class="params">resolve, reject</span>) =&gt; {</span><br><span class="line">      <span class="keyword">try</span> {</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="title function_">onRejected</span>(<span class="variable language_">this</span>.<span class="property">value</span>));</span><br><span class="line">      } <span class="keyword">catch</span> (error) {</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">      }</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">PENDING</span>) {</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onFulfilledList</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">handleFulfilled</span>(resolve, reject));</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">onRejectedList</span>.<span class="title function_">push</span>(<span class="function">() =&gt;</span> <span class="title function_">handleRejected</span>(resolve, reject));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">FULFILLED</span>) {</span><br><span class="line">        <span class="title function_">handleFulfilled</span>(resolve, reject);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span> === <span class="variable constant_">REJECTED</span>) {</span><br><span class="line">        <span class="title function_">handleRejected</span>(resolve, reject);</span><br><span class="line">      }</span><br><span class="line">    });</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>Test: Promise resolve，链式调用 then 方法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">a1</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'a1'</span>, a1);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hello'</span>;</span><br><span class="line">})</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">a2</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'a2'</span>, a2);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">a3</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'a3'</span>, a3);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">CustomPromise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(<span class="number">1</span>), <span class="number">100</span>));</span><br><span class="line"></span><br><span class="line">p1.<span class="title function_">then</span>(<span class="function">(<span class="params">b1</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'b1'</span>, b1);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'world'</span>;</span><br><span class="line">})</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">b2</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'b2'</span>, b2);</span><br><span class="line">  })</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">b3</span>) =&gt;</span> {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'b3'</span>, b3);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs:</span></span><br><span class="line"><span class="comment">// a1 1</span></span><br><span class="line"><span class="comment">// a2 hello</span></span><br><span class="line"><span class="comment">// a3 undefined</span></span><br><span class="line"><span class="comment">// b1 1</span></span><br><span class="line"><span class="comment">// b2 world</span></span><br><span class="line"><span class="comment">// b3 undefined</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考内容"><a href="#参考内容" class="headerlink" title="参考内容"></a>参考内容</h2><ul><li><a href="https://promisesaplus.com/">Promises/A+ 规范</a></li><li><a href="https://developer.aliyun.com/article/904989#slide-0">遵循 Promises/A+规范，深入分析 Promise 源码实现(基础篇)</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 异步编程</title>
      <link href="/blog/2022/09/16/JS-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
      <url>/blog/2022/09/16/JS-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是异步编程"><a href="#什么是异步编程" class="headerlink" title="什么是异步编程"></a>什么是异步编程</h2><p>在了解异步编程前，需知道以下几个知识点。</p><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>进程是指在系统中正在运行的一个应用程序，每个进程之间是独立的。</li><li>线程是进程的基本执行单元，一个进程的所有任务都在线程中执行。</li><li>进程至少要有一条线程，程序启动会默认开启一条线程，这条线程被称为主线程或 UI 线程。</li></ul><h3 id="JS-单线程"><a href="#JS-单线程" class="headerlink" title="JS 单线程"></a>JS 单线程</h3><p>单线程：所有任务要按顺序执行，在上一个任务完成后才能开始新的任务。</p><p><code>JS 单线程</code>指的是 <code>JS 引擎线程</code>， 它负责解析执行 JS 代码。<br>JS 的运行环境，即宿主，一般为浏览器或者 Node。<br>在浏览器环境中有 JS 引擎线程和渲染线程，两个线程是互斥的。Node 环境中只有 JS 线程。</p><p>JS 引擎线程常驻于内存中，等待宿主将 JS 代码传递给它。<br>JS 执行的任务包含同步任务和异步任务：</p><ul><li>同步任务会放到执行栈中，它们是要按顺序执行的任务</li><li>异步任务会放到任务队列中，这些异步任务会在执行栈清空后执行</li></ul><h3 id="同步和异步"><a href="#同步和异步" class="headerlink" title="同步和异步"></a>同步和异步</h3><p>异步（Asynchronous, async）是与同步（Synchronous, sync）相对的概念。<br>传统单线程编程中，程序的运行是同步的，同步并不意味着所有步骤同时运行，而是指步骤在一个控制流序列中按顺序执行。<br>简单来理解就是：同步按照代码顺序执行，异步不按照代码顺序执行，异步的执行效率更高。</p><p><img src="https://www.runoob.com/wp-content/uploads/2020/07/async-sync.png"></p><h3 id="什么时候用异步编程"><a href="#什么时候用异步编程" class="headerlink" title="什么时候用异步编程"></a>什么时候用异步编程</h3><!-- 在完成一些可能耗时较长的任务时，需要用到异步编程，比如读取一个较大的文件，或者是发送网络请求，通常使用子线程来处理上述操作。因为子线程独立于主线程，所以即使出现阻塞也不会影响主线程的运行。但是子线程有一个局限：一旦发射了以后就会与主线程失去同步，我们无法确定它的结束，如果结束之后需要处理一些事情，比如处理来自服务器的信息，我们是无法将它合并到主线程中去的。为了解决这个问题，JavaScript 中的异步操作函数往往通过回调函数来实现异步任务的结果处理。 --><p><strong>异步编程技术可以让我们的程序在执行一个耗时较长的任务的同时，对其他事件做出反应而不必等待任务完成。</strong></p><h2 id="异步编程的方法"><a href="#异步编程的方法" class="headerlink" title="异步编程的方法"></a>异步编程的方法</h2><h3 id="函数回调"><a href="#函数回调" class="headerlink" title="函数回调"></a>函数回调</h3><p>函数 func2 需要在 func1 执行后再执行，可以把 func2 作为参数传入 func1, 待 func1 内部执行完后执行 func2 。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'init'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func1</span>(<span class="params">callback</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="property">time</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>){</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="title function_">callback</span>()</span><br><span class="line">  }, <span class="number">1000</span>)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func2</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'world'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="title function_">func1</span>(func2)</span><br></pre></td></tr></tbody></table></figure><h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><p>监听 DOM 操作，用户交互时触发操作。比如用户点击按钮后弹出消息。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'load'</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">'click'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">'hello'</span>)</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">  })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="自定义-DOM-事件"><a href="#自定义-DOM-事件" class="headerlink" title="自定义 DOM 事件"></a>自定义 DOM 事件</h4><p>可以使用 Web API 提供的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Event">Event</a> 接口，它表示 DOM 中出现的事件。</p><p>如果需要在触发事件时携带额外的数据，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent">CustomEvent</a> 接口。<br>CustomEvent 接口继承 Event 接口方法，可以在接口初始化时传入数据，事件触发时可以获取该数据。<br>且自定义的事件可以手动触发多次。</p><p>定义事件和定义函数调用的区别是什么？<br>事件时绑定在 DOM 元素上的，初始化事件时可以携带额外数据，可以动态从元素上移除事件。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> eventA = <span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">'eventA'</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> eventB = <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="string">'eventB'</span>, { <span class="attr">detail</span>: { <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span> } });</span></span><br><span class="line"><span class="language-javascript">  </span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'button'</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">'click'</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger click'</span>, e)</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">dispatchEvent</span>(eventB); <span class="comment">// 触发事件 eventB</span></span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">dispatchEvent</span>(eventB); <span class="comment">// 第二次触发事件 eventB</span></span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">'eventA'</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventA'</span>, e)</span></span><br><span class="line"><span class="language-javascript">    }, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">    btn.<span class="title function_">addEventListener</span>(<span class="string">'eventB'</span>, <span class="keyword">function</span> (<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventB'</span>, e,e.<span class="property">detail</span>)</span></span><br><span class="line"><span class="language-javascript">    }, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">      btn.<span class="title function_">dispatchEvent</span>(eventA); <span class="comment">// 2秒后触发事件 eventA</span></span></span><br><span class="line"><span class="language-javascript">    }, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">  })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="Node-js-中自定义事件"><a href="#Node-js-中自定义事件" class="headerlink" title="Node.js 中自定义事件"></a>Node.js 中自定义事件</h4><p>JS 核心 API 大部分是围绕一个惯用的异步事件驱动架构构建的，其中某些类型的对象(称为“发射器”)发出命名事件，这些事件导致函数对象(“侦听器”)被调用。</p><p>Node.js 里有一个 <a href="https://nodejs.org/dist/latest-v16.x/docs/api/events.html">Events</a> 模块，发出事件的所有对象都是 <code>EventEmitter</code> 类的实例。<br>注册多个侦听器时，EventEmitter 按照注册的顺序同步调用“侦听器”。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">'node:events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">'eventA'</span>, <span class="keyword">function</span>(<span class="params">data</span>) {</span><br><span class="line">  <span class="comment">// this 指向实例</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventA: '</span>, data, <span class="variable language_">this</span> === myEmitter);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">'eventB'</span>, <span class="function">(<span class="params">name, action</span>) =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventB: '</span>, name, action);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventA'</span>, { <span class="attr">name</span>: <span class="string">'Mary'</span>, <span class="attr">action</span>: <span class="string">'eat'</span> });</span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventB'</span>, <span class="string">'Jack'</span>, <span class="string">'sleep'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs:</span></span><br><span class="line"><span class="comment">// trigger eventA:  { name: 'Mary', action: 'eat' } true</span></span><br><span class="line"><span class="comment">// trigger eventB:  Jack sleep</span></span><br></pre></td></tr></tbody></table></figure><p>使用 <code>EventEmitter.on()</code> 方法，当事件触发时每次都会调侦听器，使用 <code>EventEmitter.once()</code> 方法注册的侦听器最多只会被调用一次。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">EventEmitter</span> = <span class="built_in">require</span>(<span class="string">'node:events'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myEmitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">on</span>(<span class="string">'eventA'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventA'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">once</span>(<span class="string">'eventB'</span>, <span class="function">() =&gt;</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'trigger eventB'</span>);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventA'</span>);</span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventA'</span>);</span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventB'</span>);</span><br><span class="line">myEmitter.<span class="title function_">emit</span>(<span class="string">'eventB'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs:</span></span><br><span class="line"><span class="comment">// trigger eventA</span></span><br><span class="line"><span class="comment">// trigger eventA</span></span><br><span class="line"><span class="comment">// trigger eventB</span></span><br></pre></td></tr></tbody></table></figure><h3 id="发布与订阅"><a href="#发布与订阅" class="headerlink" title="发布与订阅"></a>发布与订阅</h3><p>具体例子：小明想买房，到售楼处后被告知已售罄，还剩一些尾盘，开发商在办理相关手续，手续办好后可购买。于是，小明在售楼处留下自己联系电话，等待售楼处电话通知。在例子中售楼处为发布者，小明为订阅者。</p><p>实现发布-订阅：</p><ul><li>创建发布者（售楼处）；</li><li>发布者上添加缓存列表，用来存储客户信息（登记表）；</li><li>发布者上添加方法保存客户信息（提供登记表给客户填写信息）；</li><li>发布者上添加方法发送消息（更加登记表上信息逐个电话通知）；</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> salesOffices = {</span><br><span class="line">  <span class="comment">// 保存订阅者信息</span></span><br><span class="line">  <span class="attr">clientList</span>: [],</span><br><span class="line">  <span class="comment">// 定义订阅方法</span></span><br><span class="line">  <span class="attr">on</span>: <span class="keyword">function</span> (<span class="params">mobile, fn</span>) {</span><br><span class="line">    <span class="keyword">let</span> isExist = salesOffices.<span class="property">clientList</span>.<span class="title function_">find</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v.<span class="property">mobile</span> == mobile);</span><br><span class="line">    <span class="keyword">if</span> (isExist) {</span><br><span class="line">      <span class="title function_">fn</span>(<span class="string">'你已订阅，请等待消息通知！'</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    salesOffices.<span class="property">clientList</span>.<span class="title function_">push</span>({ mobile, fn });</span><br><span class="line">    <span class="title function_">fn</span>(<span class="string">'恭喜您，订阅成功！'</span>);</span><br><span class="line">  },</span><br><span class="line">  <span class="comment">// 定义消息发布方法</span></span><br><span class="line">  <span class="attr">notice</span>: <span class="keyword">function</span> (<span class="params">msg</span>) {</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; salesOffices.<span class="property">clientList</span>.<span class="property">length</span>; i++) {</span><br><span class="line">      <span class="keyword">let</span> client = salesOffices.<span class="property">clientList</span>[i];</span><br><span class="line">      client.<span class="title function_">fn</span>(client.<span class="property">mobile</span> + <span class="string">'，'</span> + msg);</span><br><span class="line">    }</span><br><span class="line">  },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">on</span>(<span class="string">'135xxxxxxx1'</span>, <span class="keyword">function</span> (<span class="params">msg</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), msg);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">on</span>(<span class="string">'135xxxxxxx2'</span>, <span class="keyword">function</span> (<span class="params">msg</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), msg);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line">salesOffices.<span class="title function_">on</span>(<span class="string">'135xxxxxxx2'</span>, <span class="keyword">function</span> (<span class="params">msg</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(), msg);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'======wait for notification====='</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  salesOffices.<span class="title function_">notice</span>(<span class="string">'尊敬的客户，xxx楼盘现有尾盘推出，限时95折！'</span>);</span><br><span class="line">}, <span class="number">2000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// outputs:</span></span><br><span class="line"><span class="comment">// 2022-10-09T09:24:25.144Z 恭喜您，订阅成功！</span></span><br><span class="line"><span class="comment">// 2022-10-09T09:24:25.151Z 恭喜您，订阅成功！</span></span><br><span class="line"><span class="comment">// 2022-10-09T09:24:25.151Z 你已订阅，请等待消息通知！</span></span><br><span class="line"><span class="comment">// ======wait for notification=====</span></span><br><span class="line"><span class="comment">// 2022-10-09T09:24:27.153Z 135xxxxxxx1，尊敬的客户，xxx楼盘现有尾盘推出，限时95折！</span></span><br><span class="line"><span class="comment">// 2022-10-09T09:24:27.153Z 135xxxxxxx2，尊敬的客户，xxx楼盘现有尾盘推出，限时95折！</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h3><p>promise 是 <a href="https://promisesaplus.com/">Promises/A+规范</a> 的实现。</p><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise">promise</a> 是一个对象，用来表示一个异步操作的最终完成或失败以及结果。</p><p>Promise 有三种状态：</p><ul><li><code>pending</code>，初始状态，既没有成功也没有失败</li><li><code>fulfilled</code>，意味着操作成功</li><li><code>rejected</code>，意味着操作失败</li></ul><h4 id="实现-Promises-A-规范"><a href="#实现-Promises-A-规范" class="headerlink" title="实现 Promises/A+ 规范"></a>实现 Promises/A+ 规范</h4><p><a href="./%E5%AE%9E%E7%8E%B0-Promises-A-%E8%A7%84%E8%8C%83.md">实现 Promises/A+ 规范 </a></p><!-- ### generator/yield### async/await --><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.runoob.com/js/js-async.html">菜鸟教程 - JavaScript 异步编程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing">MDN - 异步 JavaScript 简介</a></li><li><a href="https://wangdoc.com/javascript/async/general.html">异步操作</a></li><li><a href="https://juejin.cn/post/6844903760280420366#heading-2">JS 异步编程六种方案</a></li><li><a href="https://cloud.tencent.com/developer/article/1822306">腾讯云开发者社区 - 异步编程的几种方式，你知道几种？</a></li><li><a href="https://aijishu.com/a/1060000000252733">极术社区 - 从根本上了解异步编程体系</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events/Creating_and_triggering_events">MDN - 创建和触发 events</a></li><li><a href="https://nodejs.org/dist/latest-v16.x/docs/api/events.html">Node.js - Events</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Promises">MDN - 如何使用 Promise</a></li><li><a href="https://developer.aliyun.com/article/904989">深入分析 Promise 源码实现</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodePush: React Native App</title>
      <link href="/blog/2022/09/05/CodePush-React-Native-App/"/>
      <url>/blog/2022/09/05/CodePush-React-Native-App/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建-app"><a href="#1-创建-app" class="headerlink" title="1. 创建 app"></a>1. 创建 app</h2><p><img src="/blog/resources/img/codePush/create-app.jpg"></p><p>⚠️ 创建时注意要填写 Release Type，虽然显示是选填的，但如果创建时为空，app 列表里会查询不到， Release type 查询条件会为空，但地址栏默认查询条件为 release_type=debug</p><h2 id="2-添加-App-Center-SDK"><a href="#2-添加-App-Center-SDK" class="headerlink" title="2. 添加 App Center SDK"></a>2. 添加 App Center SDK</h2><h3 id="2-1-Add-the-SDK-to-the-project"><a href="#2-1-Add-the-SDK-to-the-project" class="headerlink" title="2.1 Add the SDK to the project"></a>2.1 Add the SDK to the project</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install appcenter appcenter-analytics appcenter-crashes --save-exact</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-Integrate-the-SDK"><a href="#2-2-Integrate-the-SDK" class="headerlink" title="2.2 Integrate the SDK"></a>2.2 Integrate the SDK</h3><p>在 <code>android/app/src/main/assets/</code> 目录下创建一个名为 <code>appcenter-config.json</code> 的文件，文件内容如下：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">{</span></span><br><span class="line">  <span class="attr">"app_secret"</span><span class="punctuation">:</span> <span class="string">"e9f9d4a9-c996-4474-b1a7-7fc2897d4781"</span></span><br><span class="line"><span class="punctuation">}</span></span><br></pre></td></tr></tbody></table></figure><p>若 <code>assets</code> 目录不存在，创建目录：</p><p>方法 1:<br><img src="/blog/resources/img/codePush/create-assets-directory.jpg"></p><p><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-05-34.jpg"></p><p>方法 2:<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-05-34.jpg"></p><p><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-12-47.jpg"></p><p>修改 app 内容下的 <code>res/values/stringx.xml</code> 文件，添加如下内容：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"appCenterCrashes_whenToSendCrashes"</span> <span class="attr">moduleConfig</span>=<span class="string">"true"</span> <span class="attr">translatable</span>=<span class="string">"false"</span>&gt;</span>DO_NOT_ASK_JAVASCRIPT<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"appCenterAnalytics_whenToEnableAnalytics"</span> <span class="attr">moduleConfig</span>=<span class="string">"true"</span> <span class="attr">translatable</span>=<span class="string">"false"</span>&gt;</span>ALWAYS_SEND<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-Explore-data"><a href="#2-3-Explore-data" class="headerlink" title="2.3 Explore data"></a>2.3 Explore data</h3><p>构建并启动应用，然后查看 App Center 里面的 Analytics 部分，在 Analytics 里面应该有一个激活的用户和至少一个会话。</p><p>若构建时遇到 minSdkVersion 问题，可修改 build.gradle 配置文件。<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-25-15.jpg"></p><p>构建成功，Analytics 内容：<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-28-31.jpg"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/5974fcf88170">创建 assets 目录</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty 和 Proxy</title>
      <link href="/blog/2022/08/30/Object-defineProperty-%E5%92%8C-ES6-Proxy/"/>
      <url>/blog/2022/08/30/Object-defineProperty-%E5%92%8C-ES6-Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p><code>defineProperty</code> 是一个静态方法，该方法允许精准的新增或修改属性，并且返回对象。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>Object.defineProperty(obj, prop, descriptor)</p></blockquote><ul><li><code>obj</code> 指定要定义属性的对象</li><li><code>prop</code> 要定义或修改的属性名或标识符</li><li><code>descriptor</code> 将要被定义或修改的属性的描述</li></ul><h3 id="descriptor-配置选项"><a href="#descriptor-配置选项" class="headerlink" title="descriptor 配置选项"></a>descriptor 配置选项</h3><p>descriptor 可分为两类：数据描述符和存取描述符。</p><p>数据描述符选项：</p><ul><li><code>value</code>, 该属性对应的值。</li><li><code>writable</code>, 默认 false；当配置为 true 时，该属性的值才可以被修改。</li><li><code>configurable</code>, 默认 false；当配置为 true 时，该属性的描述才可以被修改。</li><li><code>enumerable</code>, 默认 false；当配置为 true 时，该属性才会出现在对象的枚举属性中。</li></ul><p>存取描述符选项：</p><ul><li><code>configurable</code></li><li><code>enumerable</code></li><li><code>get</code>, 属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象。该函数的返回值会被用作属性的值。 默认为 undefined。</li><li><code>set</code>, 属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。 默认为 undefined。</li></ul><p><strong>若存在 value 或 writable 键值，则为数据描述符，不能存在 get 和 set，否则会产生异常。</strong><br><strong>若存在 get 或 set 键值，则为存取描述符，不能存在 value 和 writable，否则会产生异常。</strong></p><h4 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {};</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'name'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="string">'Mary'</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'age'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性值</span></span><br><span class="line"><span class="comment">// 因为 name 属性配置的 writable 为 false，所以无法修改属性值</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Jack'</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 20</span></span><br></pre></td></tr></tbody></table></figure><h4 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {};</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'name'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="string">'Mary'</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'age'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Jack'</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 name 和 age 属性writable 配置为 false，所以无法直接修改属性值</span></span><br><span class="line"><span class="comment">// 若需要修改属性值，则需要修改属性描述符，将 writable 配置为 true</span></span><br><span class="line"><span class="comment">// name 属性配置了 configurable 为 true，所以可以将 writable 配置为 true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'name'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="string">'Jack'</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">})</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Jack</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Amy'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Amy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// age 属性未配置 configurable，默认为false，无法修改其他描述符，若直接修改会报错</span></span><br><span class="line"><span class="comment">// 下面代码运行会抛出异常：</span></span><br><span class="line"><span class="comment">// TypeError: Cannot redefine property: age</span></span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'age'</span>, {</span><br><span class="line">    <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">  })</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// Jack</span></span><br><span class="line">} <span class="keyword">catch</span> (error) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {};</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'name'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="string">'Mary'</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// enumerable 默认为 false，不可以枚举</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'age'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'sex'</span>, {</span><br><span class="line">  <span class="attr">value</span>: <span class="string">'female'</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// { name: 'Mary', sex: 'female' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) <span class="comment">// [ 'name', 'sex' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in语句以任意顺序迭代一个对象的除Symbol以外的可枚举属性，包括继承的可枚举属性。</span></span><br><span class="line"><span class="keyword">let</span> newObj = {}</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) {</span><br><span class="line">  newObj[key] = obj[key]</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj); <span class="comment">// { name: 'Mary', sex: 'female' }</span></span><br></pre></td></tr></tbody></table></figure><h4 id="get-和-set"><a href="#get-和-set" class="headerlink" title="get 和 set"></a>get 和 set</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">'female'</span>,</span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'Mary'</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">'name'</span>, {</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">    <span class="keyword">return</span> str + <span class="string">', '</span> + <span class="variable language_">this</span>.<span class="property">sex</span>;</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) {</span><br><span class="line">    <span class="comment">// 使用 this.name = val，会出现异常 RangeError: Maximum call stack size exceeded</span></span><br><span class="line">    <span class="keyword">if</span> (val == <span class="string">'Jack'</span>) {</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">'male'</span></span><br><span class="line">    }</span><br><span class="line">    str = val</span><br><span class="line">  },</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// { sex: 'female', name: [Getter/Setter] }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Mary, female</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Jack'</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// { sex: 'male', name: [Getter/Setter] }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Jack, male</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h2><p>Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p><p>Object.defineProperty 每次只能处理单个属性，Object.defineProperties 可以同时处理多个属性。</p><blockquote><p>Object.defineProperties(obj, props)</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {}</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, {</span><br><span class="line">  <span class="attr">name</span>: {</span><br><span class="line">    <span class="attr">value</span>: <span class="string">'Mary'</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">age</span>: {</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  },</span><br><span class="line">  <span class="attr">sex</span>: {</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) {</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span> == <span class="string">'Jack'</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'male'</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="string">'female'</span></span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);     <span class="comment">// { name: 'Mary', age: 18 }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>); <span class="comment">// female</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Jack'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);     <span class="comment">// { name: 'Jack', age: 18 }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>); <span class="comment">// male</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty"></a>Reflect.defineProperty</h2><p>静态方法 <code>Reflect.defineProperty()</code> 基本等同于 <code>Object.defineProperty()</code> 方法，唯一不同是返回值。<br><code>Object.defineProperty</code> 返回一个对象，或者如果属性没有被成功定义，抛出一个 TypeError。<br><code>Reflect.defineProperty</code> 方法只返回一个 Boolean，来说明该属性是否被成功定义。</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>const p = new Proxy(target, handler)</p></blockquote><ul><li><code>target</code> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li><code>handler</code> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</li></ul><h3 id="handler-捕获选项"><a href="#handler-捕获选项" class="headerlink" title="handler 捕获选项"></a>handler 捕获选项</h3><ul><li>getPrototypeOf()</li><li>setPrototypeOf()</li><li>isExtensible()</li><li>preventExtensions()</li><li>getOwnPropertyDescriptor()</li><li>defineProperty()</li><li><code>has</code> in 操作符捕获</li><li>get()</li><li>set()</li><li><code>deleteProperty()</code> delete 操作符捕获 </li><li><code>ownKeys()</code> Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</li><li><code>apply</code> 函数调用操作捕获</li><li><code>construct()</code> new 操作符捕获</li></ul><h3 id="example-捕获对象属性定义或修改操作"><a href="#example-捕获对象属性定义或修改操作" class="headerlink" title="example: 捕获对象属性定义或修改操作"></a>example: 捕获对象属性定义或修改操作</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置对象属性 name 不可以修改，age 不可枚举</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  {},</span><br><span class="line">  {</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截对对象的下列操作：</span></span><br><span class="line"><span class="comment">     * - Object.defineProperty()</span></span><br><span class="line"><span class="comment">     * - Reflect.defineProperty()</span></span><br><span class="line"><span class="comment">     * - proxy.property = value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">target</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">property</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> {<span class="type">*</span>} <span class="variable">descriptor</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> 返回 boolean 值，表示对象属性的操作成功与否，严格模式下返回 false 会抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">defineProperty</span>: <span class="keyword">function</span> (<span class="params">target, property, descriptor</span>) {</span><br><span class="line">      <span class="keyword">if</span> (property == <span class="string">'name'</span>) {</span><br><span class="line">        descriptor.<span class="property">writable</span> = <span class="literal">false</span>;    <span class="comment">// name 属性不可以写</span></span><br><span class="line">      } <span class="keyword">else</span> <span class="keyword">if</span> (property == <span class="string">'age'</span>) {</span><br><span class="line">        descriptor.<span class="property">enumerable</span> = <span class="literal">false</span>;  <span class="comment">// age 属性不可枚举</span></span><br><span class="line">      }</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, property, descriptor);</span><br><span class="line">    },</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, prop</span>) {</span><br><span class="line">      <span class="keyword">return</span> prop <span class="keyword">in</span> target ? target[prop] : <span class="literal">undefined</span>;</span><br><span class="line">    },</span><br><span class="line">  }</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// {}</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Mary'</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">'female'</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// { name: 'Mary', sex: 'female' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">'Jack'</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">'male'</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">24</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// { name: 'Mary', sex: 'male' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">// 24</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN - Object.defineProperty</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">MDN - Object.defineProperties</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty">MDN - Reflect.defineProperty</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">MDN - Proxy</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 学习笔记</title>
      <link href="/blog/2022/08/22/TypeScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2022/08/22/TypeScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="TypeScript-概述"><a href="#TypeScript-概述" class="headerlink" title="TypeScript 概述"></a>TypeScript 概述</h2><p><a href="https://github.com/Microsoft/TypeScript">TypeScript</a> 是一种由微软开发的开源、跨平台的编程语言。它是 JavaScript 的超集，最终会被编译为 JavaScript 代码。</p><h2 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a>安装 TypeScript</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g TypeScript</span><br><span class="line"></span><br><span class="line">tsc -V <span class="comment"># 查看安装版本</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置文件-tsconfig-json"><a href="#配置文件-tsconfig-json" class="headerlink" title="配置文件 tsconfig.json"></a>配置文件 tsconfig.json</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init <span class="comment"># create</span></span><br></pre></td></tr></tbody></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li>boolean</li><li>number</li><li>string</li><li>undefined</li><li>null，默认情况下 null 和 undefined 是所有类型的子类型。 也就是说我们可以把 null 和 undefined 赋值给 number 或其他类型的变量。</li><li>Array&lt;元素类型&gt;</li><li>Tuple，元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</li><li>enum，枚举类型是对 JavaScript 标准数据类型的一个补充。默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。</li><li>any，当变量的类型不清楚时，可以指定变量为 any 类型。类型检查器不会对这些变量进行检查。</li><li>void，表示没有任何类型，当一个函数没有返回值时，你通常会见到其返回值类型是 void。声明 void 类型的变量只能被赋值为 undefined 和 null。</li><li>object，非原始类型，是除 number，string，boolean 之外的类型。</li><li>Union Types，联合类型，取值可以为多种类型中的一种。</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a2</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a3</span>: <span class="built_in">string</span> = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a4</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a5</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下 null 和 undefined 是所有类型的子类型。 可以把 null 和 undefined 赋值给其他类型的变量。</span></span><br><span class="line"></span><br><span class="line">a1 = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a6</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组 tuple, 已知元素数量和类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a7</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">'Lily'</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Animal</span> {</span><br><span class="line">  <span class="title class_">Cat</span>, <span class="title class_">Dog</span>, <span class="title class_">Snake</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> {</span><br><span class="line">  female = <span class="number">1</span>, male = <span class="number">2</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPet</span>: <span class="title class_">Animal</span> = <span class="title class_">Animal</span>.<span class="property">Cat</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySex</span>: <span class="title class_">Sex</span> = <span class="title class_">Sex</span>.<span class="property">male</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property">Cat</span>, <span class="title class_">Animal</span>.<span class="property">Dog</span>, <span class="title class_">Animal</span>.<span class="property">Snake</span>); <span class="comment">// 0 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Sex</span>.<span class="property">female</span>, <span class="title class_">Sex</span>.<span class="property">male</span>); <span class="comment">// 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myPet); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySex); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a8</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">'h'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 void 类型的变量只能被赋值为 undefined 和 null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a9</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>): <span class="built_in">void</span> {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'test func'</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// object 类型表示除 number，string，boolean之外的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">obj = {}</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union Types</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) {</span><br><span class="line">  <span class="comment">// 类型断言</span></span><br><span class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;x).<span class="property">length</span>) {</span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>TypeScript 允许你覆盖它的推断，并且能以任何你想要的方式分析它，这种机制被称为「类型断言」。<br>TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p><p>类型断言有两种形式。 其一是 <code>&lt;&gt;</code> 语法, 另一个为 <code>as</code> 语法。</p><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> {</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = {} <span class="keyword">as</span> <span class="title class_">Person</span>;</span><br><span class="line">x.<span class="property">name</span> = <span class="string">'Lily'</span></span><br><span class="line">x.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = &lt;<span class="title class_">Person</span>&gt;{}</span><br><span class="line">y.<span class="property">name</span> = <span class="string">'Mary'</span></span><br><span class="line">y.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let z = {}</span></span><br><span class="line"><span class="comment">// z.name = 'Jack' // z不存在name属性，直接赋值会报错</span></span><br></pre></td></tr></tbody></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>TypeScript 会在没有明确指定类型时，根据一些简单的规则推断变量的类型。</p><ul><li>定义变量且被赋值，推断为对应的类型；</li><li>定义变量且未赋值，推断未 any 类型；</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x</span><br><span class="line">x = <span class="number">123</span></span><br><span class="line">x = <span class="string">'hello'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>; <span class="comment">// 推断为 number 类型</span></span><br><span class="line">a = <span class="string">'hello'</span> <span class="comment">// error: Type '"hello"' is not assignable to type 'number'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>TypeScript 使用接口（interfaces）来定义对象的类型。<br>类型检查器会查看对象内部的属性是否与接口描述一致, 如果不一致就会提示类型错误。</p><ul><li>可选属性，在属性名定义后加上 <code>?</code>，对可能存在的属性进行预定义。</li><li>只读属性，在属性名前加上 <code>readonly</code>，只能在对象创建的时候赋值，创建后不能修改属性值。</li></ul><figure class="highlight ts"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> {</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  hobby?: <span class="built_in">string</span> <span class="comment">// 可选属性</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personA</span>: <span class="title class_">Person</span> = {</span><br><span class="line">  <span class="attr">id</span>: <span class="string">'p_001'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'张三'</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobby</span>: <span class="string">'唱歌'</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺少属性 age </span></span><br><span class="line"><span class="comment">// error: Property 'age' is missing in type '{ name: string; }' but required in type 'Person'.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personB</span>: <span class="title class_">Person</span> = {</span><br><span class="line">  <span class="attr">id</span>: <span class="string">'p_001'</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'李四'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">personA.<span class="property">name</span> = <span class="string">'王武'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// id 为只读属性，不能修改</span></span><br><span class="line"><span class="comment">// error: Cannot assign to 'id' because it is a read-only </span></span><br><span class="line">personA.<span class="property">id</span> = <span class="string">'test'</span> </span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 学习笔记</title>
      <link href="/blog/2022/08/03/Vue-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2022/08/03/Vue-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-概述"><a href="#Vue-概述" class="headerlink" title="Vue 概述"></a>Vue 概述</h2><p><a href="https://cn.vuejs.org/v2/guide/">Vue</a> 是一套用于构建用户界面的框架，Vue 的核心库只关心视图层，易于上手操作，且方便和其他第三方库或已有的项目进行整合。</p><h3 id="Vue-安装使用"><a href="#Vue-安装使用" class="headerlink" title="Vue 安装使用"></a>Vue 安装使用</h3><p><a href="https://cn.vuejs.org/v2/guide/installation.html">Vue 安装</a></p><p>HTML中使用</p><ul><li>在 html 文件中引入 vue.js 库；</li><li>创建 Vue 实例，绑定 DOM 节点；</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span>{{ message }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">'Hello Vue!'</span>,</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="版本历史-question"><a href="#版本历史-question" class="headerlink" title="版本历史 :question:"></a>版本历史 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><h3 id="框架优点-question"><a href="#框架优点-question" class="headerlink" title="框架优点 :question:"></a>框架优点 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></h3><p><a href="https://cn.vuejs.org/v2/guide/comparison.html">Vue 对比其他框架</a></p><h2 id="Vue-开发"><a href="#Vue-开发" class="headerlink" title="Vue 开发"></a>Vue 开发</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。</p><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p><a href="/code/vue/bind-data.html" target="_blank">demo</a></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- js 表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{ 1+1 }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 绑定 class 属性；渲染普通文本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"textClass"</span>&gt;</span>{{ text }}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 渲染 html 内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"html"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 绑定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"showRed"</span> <span class="attr">v-bind:disabled</span>=<span class="string">"textClass == 'red'"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"textClass = 'blue'"</span> <span class="attr">v-bind:disabled</span>=<span class="string">"textClass == 'blue'"</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">'Hello Vue!'</span>,                   <span class="comment">// 普通文本</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">html</span>: <span class="string">'&lt;span&gt;hello world&lt;/span&gt;'</span>,     <span class="comment">// html</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">textClass</span>: <span class="string">'red'</span>,                     <span class="comment">// html attribute</span></span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showRed</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">textClass</span> = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><p>常用的指令有：</p><ul><li><code>v-if</code></li></ul><p><strong>指令缩写</strong></p><ul><li>v-bind 缩写</li><li>v-on 缩写</li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>模板内的表达式的设计初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护。<br>对于任何复杂逻辑，你都应当使用计算属性。<br>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。</p><iframe src="/blog/code/vue/computed.html" height="100"></iframe><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1 到 5 数字和为：{{total}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>{{fullName}}<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"setValue"</span>&gt;</span>点击直接计算属性赋值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">'Lily'</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">'Chen'</span>,</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, e</span>) =&gt;</span> v + e);</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">' '</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">        },</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'set fullName: '</span>, val);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> arr = val.<span class="title function_">split</span>(<span class="string">' '</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">        },</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setValue</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">total</span> = <span class="number">20</span>; <span class="comment">// 未设置 setter，total 无法更新</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">'Jack Li'</span>;</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>计算属性默认只有 <code>getter</code>，不过在需要时你也可以提供一个 <code>setter</code>。<br>上面 demo 中计算属性 total 未设置 <code>setter</code>，控制台会出现警告：Computed property “total” was assigned to but it has no setter.</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>侦听器用来观察和响应 Vue 实例上的数据变动。</p><iframe src="/blog/code/vue/watch.html" height="60"></iframe><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"{ color }"</span>&gt;</span>{{count}}<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count++"</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"count--"</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">'#000'</span>,</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="keyword">function</span> (<span class="params">current</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (current &lt; <span class="number">0</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">'red'</span>;</span></span><br><span class="line"><span class="language-javascript">        } <span class="keyword">else</span> <span class="keyword">if</span> (current == <span class="number">0</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">'#000'</span>;</span></span><br><span class="line"><span class="language-javascript">        } <span class="keyword">else</span> {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">'blue'</span>;</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h3><iframe src="/blog/code/vue/style.html" height="140"></iframe><p>使用 <code>v-on</code>（可省略） 指令绑定 <code>class</code> 和 <code>style</code> 属性，属性绑定值均为 JS 表达式，可以是字符串、对象或数组。</p><p>内联样式可以提供多个值：<code>&lt;div :style="{ display: ['-webkit-box', '-ms-flexbox', 'flex'] }"&gt;&lt;/div&gt;</code>，这样只会渲染数组中最后一个被浏览器支持的值。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"theme-title"</span>&gt;</span></span><br><span class="line">    主题颜色：</span><br><span class="line">    <span class="comment">&lt;!-- class、style 绑定对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"{ show: theme == 'light'}"</span>&gt;</span>light<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">"{ show: theme == 'dark'}"</span>&gt;</span>dark<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">"{ display: theme == 'pink' ? 'inline-block' : 'none'}"</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- class、style 绑定数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['content', theme]"</span> <span class="attr">:style</span>=<span class="string">"[computedStyle]"</span>&gt;</span></span><br><span class="line">    内容测试测试测试测试测试测试</span><br><span class="line">    <span class="comment">&lt;!-- class 绑定属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"size"</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"theme = 'light'"</span>&gt;</span>light<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"theme = 'dark'"</span>&gt;</span>dark<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"theme = 'pink'"</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"size = 'sm'"</span>&gt;</span>14px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"size = 'lg'"</span>&gt;</span>18px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">size</span>: <span class="string">'sm'</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">theme</span>: <span class="string">'light'</span>,</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computedStyle</span>: <span class="keyword">function</span> (<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">theme</span> == <span class="string">'pink'</span>) <span class="keyword">return</span> { <span class="attr">fontStyle</span>: <span class="string">'italic'</span> };</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">''</span>;</span></span><br><span class="line"><span class="language-javascript">      },</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><ul><li><code>v-if</code> 接收 truthy 值</li><li><code>v-else</code>、 <code>v-else-if</code> 表示 ‘else’ 块，需跟在 <code>v-if</code> 或 <code>v-else-if</code> 后面</li><li><code>v-if</code> 支持 template 元素</li></ul><iframe src="/blog/code/vue/condition.html" height="80"></iframe><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"activeKey = 0"</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"activeKey = 1"</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"activeKey = 2"</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"activeKey == 0"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"activeKey == 1"</span>&gt;</span>world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">activeKey</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">"visible"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</strong></p><h4 id="两者差异"><a href="#两者差异" class="headerlink" title="两者差异"></a>两者差异</h4><ul><li><code>v-if</code> 支持 v-else 和 v-else-if，v-show 不支持；</li><li><code>v-if</code> 支持 <code>&lt;template&gt;</code> 元素，<code>v-show</code> 不支持；</li><li><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则不会渲染条件块，直到条件第一次变为真才会开始渲染条件块；</li><li><code>v-show</code> 不管条件是什么，都会渲染元素，它只是简单的根据 CSS display 属性进行切换；</li></ul><p>适用场景:<br><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。<br>如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><iframe src="/blog/code/vue/list.html" height="120"></iframe><p>渲染列表可以使用 <code>v-for</code> 指令，它基于数组来渲染列表。</p><p><code>v-for</code> 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名<br>在 <code>v-for </code>块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><p>可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法。</p><p><code>v-for</code> 也可以用来遍历对象属性。<br><code>v-for="(item, key) of 3" </code> 可以渲染 num 个空元素。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, key) of list"</span> <span class="attr">:key</span>=<span class="string">"key"</span>&gt;</span>{{ item.name }}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(item, key) of 3"</span> <span class="attr">::key</span>=<span class="string">"key"</span>&gt;</span>{{item}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"(value, name, key) in obj"</span> <span class="attr">::key</span>=<span class="string">"key"</span>&gt;</span>{{name + ': ' + value}}<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/blog/resources/lib/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>({</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">'.box'</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: {</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [{ <span class="attr">name</span>: <span class="string">'Mary'</span> }, { <span class="attr">name</span>: <span class="string">'Lily'</span> }, { <span class="attr">name</span>: <span class="string">'Jack'</span> }],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">obj</span>: {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">'Amy'</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>: <span class="string">'female'</span></span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">    },</span></span><br><span class="line"><span class="language-javascript">  });</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>数组更新检测</strong></p><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：<br>push()、pop()、shift()、unshift()、splice()、sort()、reverse()。</p><p>在浏览器控制台中输入 <code>app.list.push({ name: 'test' })</code> 可看到数据变化<br>修改对象属性，渲染内容会更新，新增属性则不会，例如控制台输入 <code>app.obj.test = 'xxx'</code> 却不会触发更新 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>❓</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2753.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。</p><p><strong>v-for 与 v-if 一同使用</strong></p><p>不推荐在同一元素上使用 v-if 和 v-for。<br>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用.</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>Vue 使用 <code>v-on</code> 监听 DOM 事件，<code>v-on</code> 可以缩写为 <code>@</code>。</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>Vue 为 v-on 提供了<a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符</a>，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>stop</code></li><li><code>prevent</code></li><li><code>capture</code></li><li><code>self</code></li><li><code>once</code></li><li><code>passive</code><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4></li></ul><!-- ## 重点内容### 双向绑定原理 --><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/">Vue.js 官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>package.json用途</title>
      <link href="/blog/2022/08/01/package-json%E7%94%A8%E9%80%94/"/>
      <url>/blog/2022/08/01/package-json%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json-有哪些用途"><a href="#package-json-有哪些用途" class="headerlink" title="package.json 有哪些用途"></a>package.json 有哪些用途</h2><p>package.json 文件是项目清单，它可以做很多事情，并且它们之间可以完全不相关。</p><p>用途有：</p><ul><li>对应用程序或包的名称、版本、其他信息进行说明；</li><li>列出包的作者或贡献者的名称、邮箱等信息；</li><li>指明包的 liscense；</li><li>可以用来存储工具配置信息；</li><li>是 <code>npm</code> 或 <code>yarn</code> 存储已安装库的名称和版本的地方；</li><li>设置包的入口文件；</li><li>定义一组可以运行的 node 脚本；</li></ul><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>dependencies 用来设置作为依赖项安装的 npm 包列表。程序运行前需要安装这些依赖。<br>例如 request 库，用来创建请求，在开发和生产中都会用到的库。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;PACKAGENAME&gt;</span><br><span class="line">yarn add &lt;PACKAGENAME&gt;</span><br></pre></td></tr></tbody></table></figure><h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>devDependencies 用来设置作为开发依赖项安装的 npm 包列表。<br>它与 dependencies 有所不同，devDependencies 设置的依赖项只会安装在开发机上，而不需要在生产中运行代码。<br>例如 eslint、babel 库，在开发中会使用，在生产中则不需要。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &lt;PACKAGENAME&gt;</span><br><span class="line">yarn add --dev &lt;PACKAGENAME&gt;</span><br></pre></td></tr></tbody></table></figure><!-- ### peerDependencies --><!-- npm 是一个非常好的包管理工具，尤其是在管理子依赖上。如果有一个包同时依赖 http v2 和 libA，并且 libA 依赖 http v1，那么最终的依赖图像为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|__ request@2.12.0</span><br><span class="line">|__ libA</span><br><span class="line">  |__ request@1.9.9</span><br></pre></td></tr></table></figure><p>libA 有 request v1 副本，不会和 request v2 交互，可以很好的工作。</p><h4 id="plugin-package"><a href="#plugin-package" class="headerlink" title="plugin package"></a>plugin package</h4><p>插件包，意味着会和主机上的其他包一起使用，即使不直接使用主机上的包。例如：Grunt plugins、Express plugins。<br>本质上，插件被设计为与主机包一起使用。更重要的是，它们被设计被使用主机上特定版本的包。</p><p>作为一个包管理器，npm 在安装依赖项时的很大一部分工作是管理它们的版本。 –&gt;</p><!-- 运行 `npm install` 或 `yarn` 时，dependencies 和 devDependencies 中的依赖项会自动安装，peerDependencies 里的包则不会自动安装。 --><h2 id="package-lock-json-用途"><a href="#package-lock-json-用途" class="headerlink" title="package-lock.json 用途"></a>package-lock.json 用途</h2><p>package-lock.json 会固化当前安装的每个软件包的版本，当运行 npm install 时，npm 会使用这些确切的版本。<br>当运行 npm update 时，package-lock.json 文件中的依赖的版本会被更新。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://nodejs.dev/learn/the-package-json-guide/">The package.json guide</a></li><li><a href="https://nodejs.dev/learn/the-package-lock-json-file">The package-lock.json file</a></li><li><a href="https://nodejs.org/uk/blog/npm/peer-dependencies/">Peer Dependencies</a></li><li><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">npm Docs - package.json</a></li><li><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">npm Docs - package-lock.json</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS Algorithm</title>
      <link href="/blog/2022/07/27/JS-Algorithm/"/>
      <url>/blog/2022/07/27/JS-Algorithm/</url>
      
        <content type="html"><![CDATA[<h2 id="算法复杂度和空间度计算"><a href="#算法复杂度和空间度计算" class="headerlink" title="算法复杂度和空间度计算"></a>算法复杂度和空间度计算</h2><h2 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>算法思想：相邻两个元素比较，若前一个值大于后一个，则交换位置，每趟中最大的元素会排在最后。第一趟需要比较 n - 1 次， 后面每趟比较的次数依次递减。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span> - <span class="number">1</span>; i++) {</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.<span class="property">length</span> - i - <span class="number">1</span>; j++) {</span><br><span class="line">    <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) {</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j];</span><br><span class="line">      list[j] = list[j + <span class="number">1</span>];</span><br><span class="line">      list[j + <span class="number">1</span>] = tmp;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list); <span class="comment">// [ 1, 2, 3, 4,  5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>算法思想：将数组分为有序和无序两部分，左侧为有序，右侧为无序，每次从无序序列中取出最小值放在有序序列末尾。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span> - <span class="number">1</span>; i++) {</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; list.<span class="property">length</span>; j++) {</span><br><span class="line">    <span class="keyword">if</span> (list[i] &gt; list[j]) {</span><br><span class="line">      <span class="keyword">let</span> tmp = list[i]</span><br><span class="line">      list[i] = list[j]</span><br><span class="line">      list[j] = tmp</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>算法思想：将数组分为有序和无序两部分，左侧为有序，右侧为无序，每次从无序序列中拿出一个放在有序序列的适当位置。无序的第一个元素和有序的元素从右向左比较，若比左边小则依次交换。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; list.<span class="property">length</span>; i++) {</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) {</span><br><span class="line">    <span class="keyword">if</span> (list[j] &lt; list[j - <span class="number">1</span>]) {</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j]</span><br><span class="line">      list[j] = list[j - <span class="number">1</span>]</span><br><span class="line">      list[j - <span class="number">1</span>] = tmp</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- ### 快速排序算法思想：找到数组的中间值，使小于中间值的排在左边，大于中间值的排在右边。左边的任意值都要小于右边的值，然后再次对左右两边进行分割以此类推。[掘金-JS 实现快速排序](https://juejin.cn/post/7033761580214911007) --><h2 id="回文字符串检测"><a href="#回文字符串检测" class="headerlink" title="回文字符串检测"></a>回文字符串检测</h2><p>字符串从左向右读取和从右向左读取的内容一致。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindrome</span>(<span class="params">s</span>) {</span><br><span class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = s.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) {</span><br><span class="line">    <span class="keyword">if</span> (s[left] != s[right]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    ++left</span><br><span class="line">    --right</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="查找字符串中最长回文子串"><a href="#查找字符串中最长回文子串" class="headerlink" title="查找字符串中最长回文子串"></a>查找字符串中最长回文子串</h2><h3 id="中心扩展"><a href="#中心扩展" class="headerlink" title="中心扩展"></a>中心扩展</h3><p>算法思想：遍历每一个字符，向两边扩展找到以其为中心的最长回文子串，所有找到的回文子串的最大长度即所求&nbsp;。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestPalindrome</span>(<span class="params">s</span>) {</span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> s</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span> <span class="comment">// 回文字符串起初位置</span></span><br><span class="line">  <span class="keyword">var</span> maxLen = <span class="number">1</span> <span class="comment">// 回文字符串长度</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="comment">// 奇数</span></span><br><span class="line">    <span class="keyword">let</span> left = i, right = i</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="property">length</span>) {</span><br><span class="line">      <span class="keyword">if</span> (s[left] !== s[right]) <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> ((right - left + <span class="number">1</span>) &gt; maxLen) {</span><br><span class="line">        start = left</span><br><span class="line">        maxLen = right - left + <span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">      --left</span><br><span class="line">      ++right</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 偶数</span></span><br><span class="line">    <span class="keyword">let</span> left2 = i, right2 = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left2 &gt;= <span class="number">0</span> &amp;&amp; right2 &lt; s.<span class="property">length</span>) {</span><br><span class="line">      <span class="keyword">if</span> (s[left2] !== s[right2]) <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> ((right2 - left2 + <span class="number">1</span>) &gt; maxLen) {</span><br><span class="line">        start = left2</span><br><span class="line">        maxLen = right2 - left2 + <span class="number">1</span></span><br><span class="line">      }</span><br><span class="line">      --left2</span><br><span class="line">      ++right2</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">substring</span>(start, start + maxLen)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><!-- ### 动态规划 --><h2 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h2><p>杨辉三角形，又称帕斯卡三角形、贾宪三角形、海亚姆三角形、巴斯卡三角形。</p><p>前 9 行如下：</p><img src="/blog/resources/img/83e43c795c7cba79bf4b6a4a3cdfa0f3e52b5fd5.svg"><p>杨辉三角形特性：</p><ul><li>三角形以正整数构成，数字左右对称，每行由1开始逐渐变大，然后变小，回到1。</li><li>三角形每一行的平方和在杨辉三角出现奇数次。</li><li>每个数是它左上方和右上方的数的和。</li></ul><img src="/blog/resources/img/PascalTriangleAnimated2.gif"><p>参考文档：</p><ul><li><a href="https://zh.m.wikipedia.org/zh-sg/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">维基百科 - 杨辉三角形</a></li><li><a href="https://www.shuxuele.com/pascals-triangle.html">数学乐 - 杨辉三角</a></li></ul><h3 id="输出行数为-n-的内容"><a href="#输出行数为-n-的内容" class="headerlink" title="输出行数为 n 的内容"></a>输出行数为 n 的内容</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个数是它左上方和右上方的数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateTriangle</span>(<span class="params">rowNum = <span class="number">1</span></span>) {</span><br><span class="line">  <span class="keyword">let</span> arr = [[<span class="number">1</span>]]</span><br><span class="line">  <span class="keyword">if</span> (rowNum &gt;= <span class="number">2</span>) {</span><br><span class="line">    arr.<span class="title function_">push</span>([<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; rowNum; i++) {</span><br><span class="line">      <span class="keyword">let</span> preRow = arr[i-<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">let</span> row = <span class="title class_">Array</span>(i+<span class="number">1</span>)</span><br><span class="line">      row[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">      row[row.<span class="property">length</span>-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt; i; j++) {</span><br><span class="line">        row[j] = preRow[j-<span class="number">1</span>] + preRow[j]</span><br><span class="line">      }</span><br><span class="line">      arr.<span class="title function_">push</span>(row)</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Algorithm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 数组操作</title>
      <link href="/blog/2022/07/27/JS-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2022/07/27/JS-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数组（指定长度、初始值）"><a href="#创建数组（指定长度、初始值）" class="headerlink" title="创建数组（指定长度、初始值）"></a>创建数组（指定长度、初始值）</h2><ul><li><code>Array(num)</code> 创建长度为 num 的空数组</li><li><code>Array.from({ length: num })</code> 创建长度为 num 的数组，元素为 undefined</li><li><code>Array.fill(val, startIndex, lastIndex)</code> 使用固定值，填充从起始索引到终止索引内的元素，不包括终止索引。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>({ <span class="attr">length</span>: <span class="number">6</span> })</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="string">'x'</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [ 'x', 'x', 'x', 'x', 'x', 'x' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr2.<span class="title function_">fill</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)  <span class="comment">// [ 1, 1, 1 ]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="判断对象是否为数组"><a href="#判断对象是否为数组" class="headerlink" title="判断对象是否为数组"></a>判断对象是否为数组</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = { <span class="attr">x</span>: <span class="number">1</span> }</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(b)) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><p><strong>instanceof vs isArray</strong></p><p><a href="https://web.mit.edu/jwalden/www/isArray.html">严格判定 JavaScript 对象是否为数组</a></p><p>当检测 Array 实例时，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">Array.isArray</a> 优于 <code>instanceof</code>，因为 Array.isArray 能检测 iframes。</p><p>Array.isArray 移动端浏览器兼容性不是很好，若要在移动端使用，最好先判断方法是否存在。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) {</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span>(<span class="params">arg</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">  };</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="检查元素是否存在"><a href="#检查元素是否存在" class="headerlink" title="检查元素是否存在"></a>检查元素是否存在</h2><h3 id="原始值类型"><a href="#原始值类型" class="headerlink" title="原始值类型"></a>原始值类型</h3><ul><li>indexOf 元素存在，则返回索引，不存在则返回 -1</li><li>includes 元素存在返回 true，不存在返回 false</li></ul><p><code>indexOf</code> 浏览器兼容性要高于 <code>includes</code>。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">0</span>))    <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">'x'</span>))  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">0</span>))   <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))   <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><ul><li>findIndex 返回数组中满足条件的第一个元素索引，未找到则返回 -1。</li><li>find 返回数组中满足条件的第一个元素值，未找到则返回 undefined。</li><li>some 检测数组中是否存在满足条件的元素，返回 Boolean 值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [{ <span class="attr">name</span>: <span class="string">'Mary'</span> }, { <span class="attr">name</span>: <span class="string">'Lily'</span> }, { <span class="attr">name</span>: <span class="string">'Jack'</span> }];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">'Lily'</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">'Lily'</span>))       <span class="comment">// { name: 'Lily' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">'Lily'</span>))       <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce方法</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">s, e</span>) =&gt;</span>  s + e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) <span class="comment">// 13</span></span><br></pre></td></tr></tbody></table></figure><h2 id="数组去重合并"><a href="#数组去重合并" class="headerlink" title="数组去重合并"></a>数组去重合并</h2><p>元素为简单数值，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 对象去重。</p><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。Set 对象是值的集合，我们可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));             <span class="comment">// Set(4) { 1, 2, 3, 6 }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))); <span class="comment">// [ 1, 2, 3, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">let</span> arr = [].<span class="property">concat</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], n = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">combine</span>(m, n)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><ul><li>函数内的 arguments 是一个对应于传递给函数的参数的类数组对象。</li><li>apply 方法可以改变this指向。</li></ul><h2 id="多维数组扁平化"><a href="#多维数组扁平化" class="headerlink" title="多维数组扁平化"></a>多维数组扁平化</h2><h3 id="数组维度已知（flat方法）"><a href="#数组维度已知（flat方法）" class="headerlink" title="数组维度已知（flat方法）"></a>数组维度已知（flat方法）</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat方法</a> 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><p>语法：</p><blockquote><p>var newArray = arr.flat([depth])</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>())  <span class="comment">// [ 1, 2, 3, 4, [ 5, 6 ] ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>)) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数组维度未知（递归）"><a href="#数组维度未知（递归）" class="headerlink" title="数组维度未知（递归）"></a>数组维度未知（递归）</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray</span>(<span class="params">arr</span>) {</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) {</span><br><span class="line">    <span class="keyword">if</span> (arr[i] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) {</span><br><span class="line">      newArr = newArr.<span class="title function_">concat</span>(<span class="title function_">flattenArray</span>(arr[i]))</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">}</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenArray</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></tbody></table></figure><h2 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h2><h3 id="sort-方法排序"><a href="#sort-方法排序" class="headerlink" title="sort 方法排序"></a>sort 方法排序</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array - sort</a></p><p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [ 1, 2, 3, 6, 9 ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h3><p><a href="/2022/07/27/JS-%E7%AE%97%E6%B3%95/">常见的排序算法</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN - Array</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 深拷贝</title>
      <link href="/blog/2022/07/26/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/blog/2022/07/26/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><p>JavaScript 中变量是区分大小写的，并使用 Unicode 字符集。</p><p>在应用程序中使用变量作为值的符号名。JavaScript 变量名必须以字母、下划线（_）或者美元符号（$）开头，后续的字符也可以是数字（0-9）。</p><p>ECMAScript 标准定义了 8 种数据类型:</p><ul><li>7 种原始数据类型<ul><li>Boolean</li><li>null</li><li>undefined，undefined 表示变量未赋值时的属性</li><li>Number</li><li>String</li><li>BigInt，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制</li><li>Symbol，ES6 新增类型，一种实例是唯一且不可改变的数据类型</li></ul></li><li>Object 类型</li></ul><p>变量按数据类型可分为两种：</p><ul><li>原始值，最简单的数值</li><li>引用值，由多个值构成的对象</li></ul><h2 id="实现对象深拷贝"><a href="#实现对象深拷贝" class="headerlink" title="实现对象深拷贝"></a>实现对象深拷贝</h2><p>浅拷贝会导致两个引用类型变量指向同一个内存地址，修改其中一个变量值，另外一个也会跟着改变。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objA = { <span class="attr">x</span>: <span class="number">1</span> }</span><br><span class="line"><span class="keyword">let</span> objB = objA</span><br><span class="line">objB.<span class="property">x</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objA, objB); <span class="comment">// { x: 2 } { x: 2 }</span></span><br></pre></td></tr></tbody></table></figure><h3 id="JSON序列化和反序列化"><a href="#JSON序列化和反序列化" class="headerlink" title="JSON序列化和反序列化"></a>JSON序列化和反序列化</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Hello, My name is '</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> lily = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">'Lily'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);        <span class="comment">// People { name: 'Lily' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">sayHi</span>);  <span class="comment">// [Function: sayHi]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = {</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">'hello'</span>,</span><br><span class="line">  <span class="attr">e</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="title class_">Symbol</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">g</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">h</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">  <span class="attr">i</span>: <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">'name'</span>, <span class="string">'Mary'</span>),</span><br><span class="line">  <span class="attr">j</span>: lily</span><br><span class="line">};</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="keyword">let</span> parseData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// {"b":null,"c":1,"d":"hello","e":true,"g":[1,2,3],"h":{},"i":{},"j":{"name":"Lily"}}</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parseData);</span><br><span class="line"><span class="comment">// {</span></span><br><span class="line"><span class="comment">//   b: null,</span></span><br><span class="line"><span class="comment">//   c: 1,</span></span><br><span class="line"><span class="comment">//   d: 'hello',</span></span><br><span class="line"><span class="comment">//   e: true,</span></span><br><span class="line"><span class="comment">//   g: [ 1, 2, 3 ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   h: {},</span></span><br><span class="line"><span class="comment">//   i: {},</span></span><br><span class="line"><span class="comment">//   j: { name: 'Lily' }</span></span><br><span class="line"><span class="comment">// }</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parseData.<span class="property">j</span>.<span class="property">sayHi</span>);  <span class="comment">// undefined</span></span><br></pre></td></tr></tbody></table></figure><p>序列化后，Symbol、undefined 类型数据会丢失，class 实例会变成普通对象，实例方法丢失。<br>Set、Map 对象会变成空对象。</p><h3 id="for-in-和-for…of"><a href="#for-in-和-for…of" class="headerlink" title="for..in 和 for…of"></a>for..in 和 for…of</h3><p><code>for...in</code> 可以遍历对象的属性。for…in 语句以任意顺序迭代对象的可枚举属性。<br><code>for..of</code> 在可迭代对象上创建一个迭代循环，为每个不同属性执行语句。for…of 语句遍历可迭代对象定义要迭代的数据。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">1</span>, <span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>]), <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">'name'</span>, <span class="string">'Mary'</span>)];</span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) {</span><br><span class="line">  newArr.<span class="title function_">push</span>(item);</span><br><span class="line">}</span><br><span class="line">newArr[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">newArr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">newArr[<span class="number">2</span>].<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">newArr[<span class="number">3</span>].<span class="title function_">set</span>(<span class="string">'name'</span>, <span class="string">'Lily'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);     </span><br><span class="line"><span class="comment">// [ 1, [ 2, 1 ], Set(2) { 1, 2 }, Map(1) { 'name' =&gt; 'Lily' } ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);  </span><br><span class="line"><span class="comment">// [ 2, [ 2, 1 ], Set(2) { 1, 2 }, Map(1) { 'name' =&gt; 'Lily' } ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Object-assign-方法"><a href="#Object-assign-方法" class="headerlink" title="Object.assign() 方法"></a>Object.assign() 方法</h3><blockquote><p>Object.assign(targetObj, sourceObj1, sourceObj2, …)</p></blockquote><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj1 = {</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = { <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">c</span>: <span class="string">'2'</span> };</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源对象有相同属性时，后者会覆盖前者</span></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>({}, obj1, obj2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br></pre></td></tr></tbody></table></figure><p>拷贝多个源对象的可以枚举属性到目标对象。<br>源对象属性值为简单类型，则该属性为深拷贝，若为对象或其他引用类型时，该属性值为浅拷贝，更新新对象属性值会同时修改源对象属性值。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = {</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">d</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>]),</span><br><span class="line">  <span class="attr">e</span>: <span class="keyword">function</span> (<span class="params"></span>) {},</span><br><span class="line">  <span class="attr">f</span>: { <span class="attr">f1</span>: <span class="string">'xxx'</span> },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>({}, obj);</span><br><span class="line">newObj.<span class="property">a</span> = <span class="string">'aaa'</span>; <span class="comment">// obj.a 不改变</span></span><br><span class="line">newObj.<span class="property">f</span>.<span class="property">f1</span> = <span class="string">'yyy'</span>; <span class="comment">// obj.f.f1 属性值变成 yyy</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj, newObj);</span><br></pre></td></tr></tbody></table></figure><h3 id="拷贝实例属性和方法"><a href="#拷贝实例属性和方法" class="headerlink" title="拷贝实例属性和方法"></a>拷贝实例属性和方法</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> {</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  }</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) {</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'Hello, My name is '</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">' !'</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> lily = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">'Lily'</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);                       <span class="comment">// People { name: 'Lily' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">sayHi</span>);                 <span class="comment">// [Function: sayHi]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">__proto__</span>.<span class="property">constructor</span>); <span class="comment">// [class People]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> lily);                <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值拷贝</span></span><br><span class="line"><span class="keyword">let</span> mary = lily</span><br><span class="line">mary.<span class="property">name</span> = <span class="string">'Mary'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);  <span class="comment">// People { name: 'Mary' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mary);  <span class="comment">// People { name: 'Mary' }</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过实例获取构造函数，创建新的实例</span></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> lily.<span class="property">__proto__</span>.<span class="title function_">constructor</span>(<span class="params">lily.name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jack);  <span class="comment">// People { name: 'Mary' }</span></span><br><span class="line">jack.<span class="property">name</span> = <span class="string">'Jack'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);  <span class="comment">// People { name: 'Mary' }</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jack);  <span class="comment">// People { name: 'Jack' }</span></span><br></pre></td></tr></tbody></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现普通对象、数组、Set 和 Map 对象数据深拷贝。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source</span>) {</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source !== <span class="string">'object'</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (source == <span class="literal">null</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>(source);</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(source);</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Array</span>) {</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> source) {</span><br><span class="line">      <span class="keyword">let</span> tmp = <span class="title function_">deepClone</span>(item);</span><br><span class="line">      newArr.<span class="title function_">push</span>(tmp);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (source.<span class="property">__proto__</span>.<span class="title function_">toString</span>() == <span class="string">'[object Object]'</span>) {</span><br><span class="line">    <span class="comment">// 确保为普通对象，排除 WeakSet、WeakMap 等对象</span></span><br><span class="line">    <span class="keyword">let</span> newObj = {};</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) {</span><br><span class="line">      <span class="keyword">let</span> item = source[key];</span><br><span class="line">      newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">MDN - 语法和数据类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">MDN - for..in vs for…of</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 开发问题集合</title>
      <link href="/blog/2022/07/26/web-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
      <url>/blog/2022/07/26/web-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="禁止文本选中"><a href="#禁止文本选中" class="headerlink" title="禁止文本选中"></a>禁止文本选中</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.forbid-select</span> {</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  -moz-user-select:none;      <span class="comment">/*火狐*/</span></span><br><span class="line">  -webkit-user-select:none;   <span class="comment">/*webkit浏览器*/</span></span><br><span class="line">  -ms-user-select:none;       <span class="comment">/*IE10*/</span></span><br><span class="line">  -khtml-user-select:none;    <span class="comment">/*早期浏览器*/</span></span><br><span class="line">  user-select:none;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="设置滚动条样式"><a href="#设置滚动条样式" class="headerlink" title="设置滚动条样式"></a>设置滚动条样式</h2><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* firefox scrollbar */</span></span><br><span class="line"><span class="selector-class">.custom-scrollbar</span> {</span><br><span class="line">  <span class="attribute">scrollbar-color</span>: <span class="number">#aaa</span> <span class="number">#fafafa</span>;</span><br><span class="line">  <span class="attribute">scrollbar-width</span>: thin;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.custom-scrollbar</span>::-webkit-scrollbar {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.custom-scrollbar</span>::-webkit-scrollbar-thumb {</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="渲染小于-12px-的字体"><a href="#渲染小于-12px-的字体" class="headerlink" title="渲染小于 12px 的字体"></a>渲染小于 12px 的字体</h2><h3 id="使用-transform-scale"><a href="#使用-transform-scale" class="headerlink" title="使用 transform scale"></a>使用 transform scale</h3><p>语法：</p><blockquote><p>transfrom: scale(sx, sy)</p></blockquote><p>CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">transform</a> 属性允许我们旋转，缩放，倾斜或平移指定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。<br>sx 为横向缩放倍数，sy 为纵向缩放倍数。sy 为空时，默认值为 sx。<br>transform 只能使用在块元素上，行内元素上使用无效。</p><p>使用 scale 缩小元素时，元素展示内容会缩小，但是在文档中占据的空间不变，这是因为 transform 只会引起重绘，不会引起重排，所以元素展示内容虽然缩小了，但是元素在文档流中的布局不会改变。</p><div class="box-scale">  <span class="txt">从点点滴滴点点滴滴，悬浮时缩小元素</span></div><style>  .box-scale {    background-color: pink;    display: inline-block;    margin-bottom: 6px;  }  .box-scale .txt {    background-color: orange;    display: inline-block;    font-size: 16px;  }  .box-scale .txt:hover {    transform: scale(0.8);  }</style>    <figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-scale"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>从点点滴滴点点滴滴，悬浮时缩小元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> <span class="selector-class">.txt</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> <span class="selector-class">.txt</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用-zoom"><a href="#使用-zoom" class="headerlink" title="使用 zoom"></a>使用 zoom</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/zoom">zoom</a> 是 CSS 里的一个非标准属性，用来控制元素放大倍数。不同于 transform:scale()，zoom 会影响元素布局。</p><div class="box-zoom">  <span class="txt">从点点滴滴点点滴滴，悬浮时缩小元素</span></div><style>  .box-zoom {    background-color: pink;    display: inline-block;    margin-bottom: 6px;  }  .box-zoom .txt {    background-color: orange;    display: inline-block;    font-size: 16px;  }  .box-zoom .txt:hover {    zoom: 0.8;    -ms-zoom: 0.8;  }</style><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-zoom"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"txt"</span>&gt;</span>从点点滴滴点点滴滴，悬浮时缩小元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> <span class="selector-class">.txt</span> {</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> <span class="selector-class">.txt</span><span class="selector-pseudo">:hover</span> {</span></span><br><span class="line"><span class="language-css">    zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css">    -ms-zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css">  }</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="两者差异"><a href="#两者差异" class="headerlink" title="两者差异"></a>两者差异</h3><p>两者都可以用来放大缩小元素，差异点：</p><ul><li>transform scale 会引起重绘，不会引起重排；</li><li>zoom 会引起重排；</li><li>transform scale 浏览器兼容性高于 zoom，zoom 是非标准属性；</li><li>firefox 不支持 zoom 属性；</li></ul><h2 id="margin-重叠问题"><a href="#margin-重叠问题" class="headerlink" title="margin 重叠问题"></a>margin 重叠问题</h2><h3 id="什么情况下会出现重叠"><a href="#什么情况下会出现重叠" class="headerlink" title="什么情况下会出现重叠"></a>什么情况下会出现重叠</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing">MDN - 外边距重叠</a></p><ul><li>同级的相邻元素</li><li>空的块元素，当一个块元素上边界margin-top 直接贴到元素下边界margin-bottom时也会发生边界折叠。</li><li>父元素和后代元素之间没有内容分隔</li></ul><h3 id="重叠原因"><a href="#重叠原因" class="headerlink" title="重叠原因"></a>重叠原因</h3><div class="box-wrap">  <div class="box-overlap">1</div>  <div class="box-overlap">2</div></div><style>  .box-wrap {    background-color: pink;    display: inline-block;  }  .box-overlap {    width: 50px;    height: 50px;    background-color: orange;    margin: 10px;  }</style><p>设置两个 div 元素，宽高均为 50px，margin 均为 10px，此时两个 div 之间的间距为 10px 而为 20px。<br>因为 <strong>margin 指的是元素自身从边框开始向外延伸的距离，只和自身有关</strong>，和其他元素无关。<br>上面两个元素 margin 值相同，margin 出现了重叠，所以间距为 10px。</p><h3 id="如何解决重叠问题"><a href="#如何解决重叠问题" class="headerlink" title="如何解决重叠问题"></a>如何解决重叠问题</h3><p>可以通过创建 BFC(Block Formatting Context，块格式化上下文) 来解决 margin 重叠问题。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a> 是 web 页面 CSS 渲染的一部分，它是一个独立的渲染区域，是块盒子布局过程发生的区域，也是浮动元素与其他元素交互的区域。BFC 有自己的渲染规则，不会影响到外部元素。</p><p>正常文档流，两个 div 纵向 margin 重叠解决方法：</p><ul><li>设置其中一个 div 样式 <code>display: inline-block</code>；</li><li>设置后一个 div 样式 <code>position: absolute</code> 或者 <code>position: fixed</code>；</li><li>设置后一个 div 样式 <code>float: left</code>；</li><li>设置父元素样式 <code>display: flex; flex-direction: column</code>；</li><li>设置父元素样式 <code>display: inline-grid</code>；</li></ul><!-- ## DOMContentLoaded VS onload --><h2 id="字体颜色渐变"><a href="#字体颜色渐变" class="headerlink" title="字体颜色渐变"></a>字体颜色渐变</h2><ul><li>background-image: linear-gradient() 设置渐变背景</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip">background-clip</a> 设置元素的背景是否扩展到其边框、填充框或内容框的下方。</li><li><a href="">-webkit-text-fill-color</a></li><li><style>.box-font-color {font-size: 28px;font-weight: 500;}.box-font-color div {background-image: linear-gradient(blue, red);background-clip: text;-webkit-background-clip: text;/* -webkit-text-fill-color: transparent; */color: transparent;}</style><div class="box-font-color"><div>从上到下渐变</div></div></li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-font-color</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-font-color</span> <span class="selector-tag">div</span> {</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, red);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-clip</span>: text;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">background-clip</span>: text;</span></span><br><span class="line"><span class="language-css">  -webkit-text-fill-<span class="attribute">color</span>: transparent;</span></span><br><span class="line"><span class="language-css">}</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box-font-color"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>从上到下渐变<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/blog/2022/07/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/blog/2022/07/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>正则表达式是用来匹配字符串中字符组合的模式。在 JS 中，正则表达式也是对象。</p><ul><li><p>正则表达式字面量</p><p>  使用两个斜杠包含匹配模式。</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/ab+c/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">'ab'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">'abc'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>正则表达式对象</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'ab+c'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">'ab'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">'abc'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="正则表达式特殊字符"><a href="#正则表达式特殊字符" class="headerlink" title="正则表达式特殊字符"></a>正则表达式特殊字符</h2><ul><li><code>^</code> 从字符串起始位置开始匹配</li><li><code>$</code> 匹配到字符串的结束位置</li><li><code>*</code> 匹配前一个表达式0次或多次，等同于 <code>{0,}</code></li><li><code>+</code> 匹配前一个表达式1次或多次，等同于 <code>{1,}</code></li><li><code>?</code> 匹配前一个表达式0次或1次，等同于 <code>{0,1}</code></li><li><code>.</code> 小数点，默认匹配除换行符之外的任何单个字符</li><li><code>x|y</code> 匹配 x 或 y</li><li><code>{n}</code> n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</li><li><code>{n,}</code> n 是一个正整数，匹配前一个字符至少出现了 n 次</li><li><code>{n,m}</code> n 和 m 都是整数。匹配前面的字符至少 n 次，最多 m 次。如果 n 或者 m 的值是 0， 这个值被忽略</li><li><code>[xyz]</code> 一个字符集合。匹配方括号中的任意字符</li><li><code>[^xyz]</code> 一个反向字符集。它匹配任何没有包含在方括号中的字符</li><li><code>\d</code> 匹配一个数字。等价于 [0-9]</li><li><code>\D</code> 匹配一个非数字字符。等价于 [^0-9]</li><li><code>\s</code> 匹配一个空白字符，包括空格、制表符、换页符和换行符</li><li><code>\S</code> 匹配一个非空白字符</li><li><code>\w</code> 匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]</li><li><code>\W</code> 匹配一个非单字字符。等价于 [^A-Za-z0-9_]</li><li><code>\W</code> 匹配一个非单字字符。等价于 [^A-Za-z0-9_]</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/</span>.<span class="title function_">test</span>(<span class="string">'123abc'</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^a/</span>.<span class="title function_">test</span>(<span class="string">'123abc'</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a$/</span>.<span class="title function_">test</span>(<span class="string">'123abc'</span>)) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><code>lastIndex</code> 开始下一个匹配的起始索引值。（这个属性只有在使用 g 参数时可用在通过参数进行高级搜索)</li><li><code>source</code> 模式文本</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'abc'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">source</span>)    <span class="comment">// abc</span></span><br></pre></td></tr></tbody></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">exec</td><td align="left">一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组，未匹配到则返回 null。</td></tr><tr><td align="left">test</td><td align="left">一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。</td></tr><tr><td align="left">match</td><td align="left">一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td align="left">matchAll</td><td align="left">一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</td></tr><tr><td align="left">search</td><td align="left">一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td align="left">replace</td><td align="left">一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td align="left">split</td><td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</td></tr></tbody></table><h3 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h3><table><thead><tr><th align="left">标志</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">g</td><td align="left">全局搜索。</td></tr><tr><td align="left">i</td><td align="left">不区分大小写搜索。</td></tr><tr><td align="left">m</td><td align="left">多行搜索。</td></tr><tr><td align="left">s</td><td align="left">允许 . 匹配换行符。</td></tr><tr><td align="left">u</td><td align="left">使用 unicode 码的模式进行匹配。</td></tr><tr><td align="left">y</td><td align="left">执行“粘性 (sticky)”搜索，匹配从目标字符串的当前位置开始。</td></tr></tbody></table><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><ul><li><p>全局搜索</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'abc'</span>, <span class="string">'g'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(<span class="string">'abc123abc'</span>)) </span><br><span class="line"><span class="comment">// [ 'abc', index: 0, input: 'abc123abc', groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(<span class="string">'abc123abc'</span>)) </span><br><span class="line"><span class="comment">// [ 'abc', index: 6, input: 'abc123abc', groups: undefined ]</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>是否区分大小写</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'Abc'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">'abc'</span>))  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'Abc'</span>, <span class="string">'i'</span>) <span class="comment">// 不区分大小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">'abc'</span>))  <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在设置了&nbsp;global&nbsp;或&nbsp;sticky&nbsp;标志位的情况下（如&nbsp;/foo/g&nbsp;or&nbsp;/foo/y），JavaScript&nbsp;RegExp&nbsp;对象是有状态的。他们会将上次成功匹配后的位置记录在&nbsp;lastIndex&nbsp;属性中。使用此特性，exec()&nbsp;可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配）。</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'a'</span>, <span class="string">'g'</span>)</span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">'a123a456a789a'</span>) <span class="comment">// ['a', index: 0, input: 'a123a456a789a', groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">'a123a456a789a'</span>) <span class="comment">// ['a', index: 4, input: 'a123a456a789a', groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">'a123a456a789a'</span>) <span class="comment">// ['a', index: 8, input: 'a123a456a789a', groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">'a123a456a789a'</span>) <span class="comment">// ['a', index: 12, input: 'a123a456a789a', groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">'a123a456a789a'</span>) <span class="comment">// null</span></span><br></pre></td></tr></tbody></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'\\d+'</span>, <span class="string">'g'</span>)</span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">'[a-z]+'</span>, <span class="string">'g'</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'12abc345ef67xyz9'</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg))   <span class="comment">// [ '12', '345', '67', '9' ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg2))  <span class="comment">// [ 'abc', 'ef', 'xyz' ]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'123abc456abc7890'</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/abc/</span>, <span class="string">'xyz'</span>)</span><br><span class="line"><span class="keyword">let</span> res2 = str.<span class="title function_">replace</span>(<span class="regexp">/abc/g</span>, <span class="string">'xyz'</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)   <span class="comment">// 123xyz456abc7890</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)  <span class="comment">// 123xyz456xyz7890</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)   <span class="comment">// 123abc456abc7890</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串匹配替换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} match 匹配的子串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} p1 第一个括号([a-z]+)匹配的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} p2 第二个括号(\d+)匹配的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} offset 匹配到的字符串在原字符串中偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> {<span class="type">*</span>} string 被匹配的原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 替换匹配内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">match, p1, p2, offset, string</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match);     <span class="comment">// abc12345</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);        <span class="comment">// abc</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);        <span class="comment">// 12345</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(offset);    <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(string);    <span class="comment">// #abc12345@@</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`*<span class="subst">${p1}</span>*<span class="subst">${p2}</span>*`</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">let</span> newString = <span class="string">'#abc12345@@'</span>.<span class="title function_">replace</span>(<span class="regexp">/([a-z]+)(\d+)/</span>, replacer);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newString); <span class="comment">// #*abc*12345*@@</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h2><h3 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h3><p><code>/^1[3|4|5|7|8][0-9]{9}$/</code></p><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><p><code>/^[A-Za-z0-9]+([_\.][A-Za-z0-9]+)*@([A-Za-z0-9\-]+\.)+[A-Za-z]{2,6}$/</code></p><!-- var emailArr = ['1234@qq.com', 'wang@126.com', 'wang123@126.com', 'wang123@vip.163.com', 'wang_email@outlook.com', 'wang.email@gmail.com']; --><h3 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码"></a>身份证号码</h3><p><a href="https://www.fadada.com/notice/detail-1865.html">身份证号码含义</a></p><table><thead><tr><th align="left">匹配模式</th><th align="left">匹配内容</th></tr></thead><tbody><tr><td align="left">[1-9]\d{5}</td><td align="left">6位地区编码</td></tr><tr><td align="left">[1-9]\d(3)</td><td align="left">4位年份</td></tr><tr><td align="left">((0\d)</td><td align="left">(1[0-2]))</td></tr><tr><td align="left">(([0</td><td align="left">1</td></tr><tr><td align="left">\d{3}[0-9Xx]</td><td align="left">4位校验码</td></tr></tbody></table><p><code>/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}[0-9Xx]$/</code></p><h3 id="http或https链接"><a href="#http或https链接" class="headerlink" title="http或https链接"></a>http或https链接</h3><ul><li><code>/(http|https):\/\/([\w.]+\/?)\S*/</code></li><li><code>/http[s]{0,1}:\/\/([\w.]+\/?)\S*/</code></li></ul><h3 id="匹配数字"><a href="#匹配数字" class="headerlink" title="匹配数字"></a>匹配数字</h3><ul><li>0到100数字， <code>/^([1-9]?\d|100)$/</code></li><li>匹配0和非0开头数字， <code>/^(0|[1-9][0-9]*)$/</code></li></ul><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li>[MDN - Regular_Expressions]（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li><li><a href="https://github.com/aykutkardas/regexlearn.com">github - regexlearn</a></li><li><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 创建请求</title>
      <link href="/blog/2022/07/20/JS-%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82/"/>
      <url>/blog/2022/07/20/JS-%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>XMLHttpRequest 是用来与服务器进行交换的对象，可以使网页局部更新而不用中断用户当前行为。</p><p>使用方法：</p><ul><li>初始化一个 XMLHttpRequest 对象实例</li><li>在实例上添加事件，监听请求状态变化</li><li>设置请求头，响应类型</li><li>调用 open() 方法初始化请求</li><li>调用 send() 方法发送请求</li></ul><p><strong>创建 get 请求</strong></p><p><button type="button" class="btn btn-primary" onclick="handleClick()">send request</button></p><script>function handleClick() {  let req = new XMLHttpRequest()  req.onreadystatechange = e => {    let { readyState, status, response } = req    // readyState 4 表示请求完成，status 表示请求成功    if (readyState == 4 && status == 200) {        console.log('response: ', typeof response, response)    }  }  req.responseType = 'json' // 服务端返回数据格式为 json  req.open('get', 'https://jsonplaceholder.typicode.com/users')  req.send()}</script><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"handleClick()"</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">    req.<span class="property">onreadystatechange</span> = <span class="function"><span class="params">e</span> =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> { readyState, status, response } = req</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// readyState 4 表示请求完成，status 表示请求成功</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (readyState == <span class="number">4</span> &amp;&amp; status == <span class="number">200</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'response: '</span>, <span class="keyword">typeof</span> response, response)</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">    }</span></span><br><span class="line"><span class="language-javascript">    req.<span class="property">responseType</span> = <span class="string">'json'</span> <span class="comment">// 服务端返回数据格式为 json</span></span></span><br><span class="line"><span class="language-javascript">    req.<span class="title function_">open</span>(<span class="string">'get'</span>, <span class="string">'https://jsonplaceholder.typicode.com/users'</span>)</span></span><br><span class="line"><span class="language-javascript">    req.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><!-- ### 属性- readyState### 事件 --><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"handleClick2()"</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick2</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) {</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! Status: <span class="subst">${response.status}</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        }</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">      })</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'res'</span>, response)</span></span><br><span class="line"><span class="language-javascript">      });</span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>axios 是一个基于 promise 的 HTTP 客户端，可用于浏览器和 Node.js</p><p><strong>特性</strong></p><ul><li>在浏览器中使用 XMLHttpRequest</li><li>在 node.js 中使用 http requests</li><li>支持 promise api</li><li>可以拦截请求和响应</li><li>可以转换请求和响应数据</li><li>可以取消请求</li><li>自动转换为 json 数据</li><li>存在 multipart/form-data 和 x-www-form-urlencoded时，自动将数据对象序列化</li><li>客户端支持防止XSRF</li></ul><div>  <button type="button" class="btn btn-primary" onclick="handleClick3()">send request</button>  <button type="button" class="btn btn-primary" onclick="handleClick4()">query city list</button></div><script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script><script>  function handleClick3() {    axios.get('https://jsonplaceholder.typicode.com/users').then(res => {      if (res.status == 200) {        console.log('res', res.data)      }    }).catch(err => {      console.err(err)    })  }  function handleClick4() {    axios      .get('/extra/area.json', {        responseType: 'json',      })      .then((res) => console.log(res.data?.data))      .catch((err) => console.error(err));  }</script><br><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"handleClick3()"</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">onclick</span>=<span class="string">"handleClick4()"</span>&gt;</span>query city list<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick3</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">'https://jsonplaceholder.typicode.com/users'</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) {</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'res'</span>, res.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      }</span></span><br><span class="line"><span class="language-javascript">    }).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> {</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">err</span>(err)</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick4</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    axios</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">get</span>(<span class="string">'/extra/area.json'</span>, {</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">responseType</span>: <span class="string">'json'</span>,</span></span><br><span class="line"><span class="language-javascript">      })</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>?.<span class="property">data</span>))</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span></span><br><span class="line"><span class="language-javascript">  }</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="">JSONPlaceholder - Free Fake REST API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">MDN - XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">MDN - Fetch API</a></li><li><a href="https://github.com/axios/axios">github - Axios</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 获取图片、视频尺寸大小</title>
      <link href="/blog/2022/07/19/JS-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E5%B0%BA%E5%AF%B8%E5%A4%A7%E5%B0%8F/"/>
      <url>/blog/2022/07/19/JS-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E5%B0%BA%E5%AF%B8%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="获取图片原始尺寸大小"><a href="#获取图片原始尺寸大小" class="headerlink" title="获取图片原始尺寸大小"></a>获取图片原始尺寸大小</h2><img src="/blog/resources/img/cat/0.jpeg" width="200"><h3 id="使用-img-标签获取"><a href="#使用-img-标签获取" class="headerlink" title="使用 img 标签获取"></a>使用 img 标签获取</h3><p>使用 <code>img</code> 标签加载图片后，通过获取该元素的 <code>naturalWidth</code>、<code>naturalHeight</code> 属性可以得到原始图片尺寸，width 和 height 属性是图片渲染尺寸。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span> (<span class="params"></span>) {</span><br><span class="line">  <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'img'</span>);</span><br><span class="line">  <span class="keyword">let</span> { width, height, naturalWidth, naturalHeight } = img;</span><br><span class="line">  <span class="comment">// 图片原始尺寸</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(naturalWidth, naturalHeight); <span class="comment">// 640 427</span></span><br><span class="line">  <span class="comment">// 图片渲染尺寸</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(width, height); <span class="comment">// 300 200</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="使用-Image-构造函数获取"><a href="#使用-Image-构造函数获取" class="headerlink" title="使用 Image 构造函数获取"></a>使用 Image 构造函数获取</h3><p><code>Image()</code> 构造函数可以创建一个 img 元素实例，在功能上它等同于 <code>document.createElement('img')</code>.</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">{ target }</span>) {</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">width</span>, target.<span class="property">height</span>); <span class="comment">// 640 427</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">naturalWidth</span>, target.<span class="property">naturalHeight</span>); <span class="comment">// 640 427</span></span><br><span class="line">}</span><br><span class="line">img.<span class="property">src</span> = <span class="string">'../source/blog/resources/img/cat/0.jpeg'</span></span><br></pre></td></tr></tbody></table></figure><p>因为元素实例尚未添加到文档中，所有 width，height 属性值为原始值。</p><h2 id="获取视频原始尺寸大小"><a href="#获取视频原始尺寸大小" class="headerlink" title="获取视频原始尺寸大小"></a>获取视频原始尺寸大小</h2><p>使用 video 标签来加载视频文件，通过设置数据加载事件监听来获取数据。</p><ul><li><code>loadedmetadata</code> 事件，视频元数据被加载后触发，此时可以从 <code>videoWidth</code>，<code>videoHeight</code> 属性中可以获取视频原始尺寸。</li><li><code>loadeddata</code> 事件，视频首帧加载完成后触发。</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">src</span>=<span class="string">"/blog/resources/video/flower.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'video'</span>)</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">'loadedmetadata'</span>, <span class="keyword">function</span>(<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// The metadata has been loaded.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'meta data loaded'</span>, e);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">videoWidth</span>, e.<span class="property">target</span>.<span class="property">videoHeight</span>); <span class="comment">// 960 540</span></span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">'loadeddata'</span>, <span class="keyword">function</span>(<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// The first frame of the media has finished loading.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">'first frame loaded'</span>, e);</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">  })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="获取视频首帧画面"><a href="#获取视频首帧画面" class="headerlink" title="获取视频首帧画面"></a>获取视频首帧画面</h2><ul><li>添加并获取 video 元素，添加 loadeddata 事件监听</li><li>添加并获取 canvas 元素，loadeddata 事件触发后获取 video 尺寸用来设置 canvas 画布大小</li><li>使用 <code>drawImage</code> 方法绘制首帧画面内容</li><li>使用 <code>toDataURL</code> 方法将canvas画布内容转换成 base64 字符串</li></ul><p><video preload="" controls="" width="300" src="/blog/resources/video/flower.mp4"></video><br><canvas></canvas></p><script>  window.addEventListener('DOMContentLoaded', function() {    let video = document.querySelector('video')    video.addEventListener('loadeddata', function(e) {      const { videoWidth, videoHeight } = e.target            let canvas = document.querySelector('canvas')      let ctx = canvas.getContext('2d')       // 设置画布大小      canvas.width = videoWidth      canvas.height = videoHeight      // 设置渲染宽度      canvas.style.width = '200px'      ctx.drawImage(video, 0, 0, videoWidth, videoHeight)      // img to base64      let url = canvas.toDataURL('image/png')    })  })</script><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">"300"</span> <span class="attr">src</span>=<span class="string">"/blog/resources/video/flower.mp4"</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">'DOMContentLoaded'</span>, <span class="keyword">function</span>(<span class="params"></span>) {</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'video'</span>)</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">'loadeddata'</span>, <span class="keyword">function</span>(<span class="params">e</span>) {</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> { videoWidth, videoHeight } = e.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">'canvas'</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">'2d'</span>) </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置画布大小</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">width</span> = videoWidth</span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">height</span> = videoHeight</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置渲染宽度</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">style</span>.<span class="property">width</span> = <span class="string">'200px'</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, videoWidth, videoHeight)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// img to base64</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> url = canvas.<span class="title function_">toDataURL</span>(<span class="string">'image/png'</span>)</span></span><br><span class="line"><span class="language-javascript">    })</span></span><br><span class="line"><span class="language-javascript">  })</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement/Image">MDN - Image</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">MDN - Canvas API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D">MDN - CanvasRenderingContext2D</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">MDN - toDataURL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Position</title>
      <link href="/blog/2022/07/18/CSS-Position/"/>
      <url>/blog/2022/07/18/CSS-Position/</url>
      
        <content type="html"><![CDATA[<h2 id="默认文档流"><a href="#默认文档流" class="headerlink" title="默认文档流"></a>默认文档流</h2><p>默认文档流 或者 正常文档流，normal flow， 是指在不改变元素的情况下，元素在文档中默认的布局方式（元素的框高、位置）。</p><p>网页文档中的元素是从上到下排列的，根据默认排列方式可以分为<code>块级元素</code>和<code>内联元素</code>。</p><p><strong>块级元素</strong></p><ul><li>默认情况下，块级元素宽度占父元素宽度 100%，块级元素高度由其内容填充。</li><li>可以通过设置 width、height 熟悉来设置内容区域展示大小， 即使设置了内容宽度，块级元素始终占据父元素一行位置。</li><li>可以有效设置 margin、padding 属性值。</li></ul><p>常用的块级元素有：<code>div</code>，<code>p</code>，<code>ul</code>，<code>ol</code>，<code>li</code>，<code>section</code></p><p><strong>内联元素</strong></p><ul><li>默认情况下，内联元素的宽高和其内容占据的宽高一致，不占据一行，多个元素可以同时排列在同一行。</li><li>设置 width、height 属性值无效。</li><li>margin 属性值水平方向设置有效，垂直方向设置无效。</li><li>可以有效设置 padding 属性值，设置垂直方式 padding，会出现和其他元素重叠。</li></ul><p>常用的块级元素有：<code>span</code>，<code>a</code>，<code>i</code></p><p><strong>块级元素和内联元素转换</strong></p><p>可以通过设置 display 属性值为：<code>inline</code>、<code>inline-block</code>、<code>block</code>来切换元素展示方式。<br><br>设置为 <code>inline-block</code> 时，元素同时兼具块级元素和内联元素特性：多个元素可以同时排列在同一行，且可以有效设置 width、height、margin、padding 属性值。</p><h2 id="position-属性"><a href="#position-属性" class="headerlink" title="position 属性"></a>position 属性</h2><p>css 中的 position 属性用来指定元素在文档中的定位方式。在设置定位方式后，通过设置<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>属性值来设置偏移量，最终决定元素位置。</p><p>语法：</p><blockquote><p>position: static | fixed | sticky | relative | absolute</p></blockquote><h3 id="static（默认定位）"><a href="#static（默认定位）" class="headerlink" title="static（默认定位）"></a>static（默认定位）</h3><p>元素使用正常（默认）的布局行为，此时 top、right、bottom、left 和 z-index 属性无效。</p><h3 id="relative（相对自身定位）"><a href="#relative（相对自身定位）" class="headerlink" title="relative（相对自身定位）"></a>relative（相对自身定位）</h3><p>元素会先使用正常文档流进行定位。在设置元素偏移量后会相对自身位置进行偏移。</p><h3 id="absolute（相对祖先定位）"><a href="#absolute（相对祖先定位）" class="headerlink" title="absolute（相对祖先定位）"></a>absolute（相对祖先定位）</h3><p>元素会被移出正常文档流，在设置元素偏移量后，元素会相对最近的非 <code>static</code> 祖先元素进行偏移，默认相对 html 元素定位。</p><h3 id="fixed（相对视窗定位）"><a href="#fixed（相对视窗定位）" class="headerlink" title="fixed（相对视窗定位）"></a>fixed（相对视窗定位）</h3><p>元素会被移出正常文档流，在设置元素偏移量后，元素会相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。</p><p><strong>当元素祖先的 <code>transform</code>, <code>perspective</code> 或 <code>filter</code> 属性非 none 时，容器由视口改为该祖先。</strong></p><h3 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h3><p>该值总是创建一个新的层叠上下文（stacking context）。</p><p>元素使用正常文档流进行定位，会保留在正常文档流中占据的空间。在设置元素偏移量后，会相对它的<strong>最近滚动祖先元素</strong>或<strong>最近块级元素</strong>进行偏移。偏移值不会影响任何其他元素的位置。该元素会固定在祖先元素上。</p><p>当祖先元素的 overflow 为 hidden，scroll，auto 或 overlay 时，可以抑制 sticky 行为。</p><h2 id="定位类型"><a href="#定位类型" class="headerlink" title="定位类型"></a>定位类型</h2><ul><li>相对定位：position 属性值为 relative 的元素。</li><li>绝对定位：position 属性值为 absolute 和 fixed 的元素。</li><li>粘性定位：position 属性值为 sticky 的元素。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN - CSS Position</a></p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 形状绘制</title>
      <link href="/blog/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/"/>
      <url>/blog/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="三角形绘制原理"><a href="#三角形绘制原理" class="headerlink" title="三角形绘制原理"></a>三角形绘制原理</h2><p>绘制原理：设置元素宽高均为 0，通过设置边框 border 来绘制三角形。</p><p><strong>step1: css border 绘制宽为 100px 的正方形，每个边框设置不同颜色</strong></p><style>.triangle1 {  margin-bottom: 16px;  width: 0;  height: 0;  /* 设置单个边框大小为50px */  border: 50px solid;  /* 按照 上右下左 顺序设置边框颜色 */  border-color: red orange yellow green;}</style><div class="triangle1"></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle1</span> {</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 设置单个边框大小为50px */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="comment">/* 按照 上右下左 顺序设置边框颜色 */</span></span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>step2: 保留一个边框颜色，其他三个边框设置透明</strong></p><p>这样可以绘制一个箭头向下的三角形，但是元素实际占用尺寸比显示的要多。</p><style>.triangle2 {  margin-bottom: 16px;  width: 0;  height: 0;  border: 50px solid;  border-color: red transparent transparent transparent;  background-color: #f5f5f5;}</style><div class="triangle2"></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle2</span> {</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>step3: 分别设置边框大小，使绘制的图形占用尺寸最小</strong></p><p>分别设置左、上、右边框大小为 50px, 再设置左右边框颜色透明。</p><style>.triangle3-1 {  display: inline-block;  margin-bottom: 16px;  margin-right: 16px;  background-color: #f5f5f5;  width: 0;  height: 0;  border-style: solid;  border-top-width: 50px;   border-right-width: 50px;  border-left-width: 50px;  border-color: red orange yellow green;}.triangle3-2 {  border-color: red transparent transparent transparent;}.triangle3-3 {  border-left-width: 30px;  border-right-width: 30px;  border-color: red transparent transparent transparent;}</style><div class="triangle3-1"></div><div class="triangle3-1 triangle3-2"></div><div class="triangle3-1 triangle3-3"></div><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle3-1</span> {</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.triangle3-2</span> {</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.triangle3-3</span> {</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 操作符和表达式</title>
      <link href="/blog/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/blog/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="数值分割符-1-0000-0000"><a href="#数值分割符-1-0000-0000" class="headerlink" title="数值分割符 (1_0000_0000)"></a>数值分割符 (1_0000_0000)</h2><p>ES2021 引入数值分隔符<code>_</code>, 在数值之间提供分隔，使一个长数值读起来更容易。十进制，十进制小数部分，二进制，十六进制都可以使用分隔符。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000</span>) <span class="comment">// 1万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0_0000</span>) <span class="comment">// 10万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000_0000</span>) <span class="comment">// 1亿</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_1_1</span>) <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11_1</span>) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_1_1</span>) <span class="comment">// 0.111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_11</span>) <span class="comment">// 0.111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0x1_1</span>) <span class="comment">// 0x11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b1_1</span>) <span class="comment">// 0b11</span></span><br></pre></td></tr></tbody></table></figure><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a> 对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p><p>example1:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = (a, b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">c = (c++, c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure><h2 id="可选链接操作符"><a href="#可选链接操作符" class="headerlink" title="可选链接操作符 (?.)"></a>可选链接操作符 (?.)</h2><p>可选链操作符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为 <code>null</code> 或者 <code>undefined</code> 的情况下不会引起错误，该表达式短路返回值是 <code>undefined。</code></p><h2 id="逻辑无效赋值"><a href="#逻辑无效赋值" class="headerlink" title="逻辑无效赋值 (??=)"></a>逻辑无效赋值 (??=)</h2><pre><code>expr1 ?? expr2</code></pre><p>当 expr1 值为 null 或 undefined 时，返回 expr2 的值，否则返回 expr1 的值。</p><p>  <code>x ??= y</code> 等价于 <code>x ?? (x=y)</code></p><p>example:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = { <span class="attr">a</span>: <span class="number">1</span> }</span><br><span class="line">obj.<span class="property">a</span> ??= <span class="number">2</span></span><br><span class="line">obj.<span class="property">b</span> ??= <span class="number">6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>) <span class="comment">// 6</span></span><br></pre></td></tr></tbody></table></figure><h2 id="静态和私有方法-属性"><a href="#静态和私有方法-属性" class="headerlink" title="静态和私有方法/属性"></a>静态和私有方法/属性</h2><p>在一个类里面可以给属性前面添加 <code>#</code> 符号来标记为私有，<code>getter/setter</code> 也可以标记为私有，私有的方法和属性只有在类的内部可以访问。</p><p>添加前缀 <code>static</code> 可以设置静态的方法和属性，它们只能通过类本身来访问。</p><p>example:</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> {</span><br><span class="line">  #age = <span class="number">18</span> <span class="comment">// 私有属性，只能在类的内部访问，不能通过类的实例访问</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">'male'</span> <span class="comment">// 静态属性，只能通过类本身访问，不能通过类的实例访问</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, sex, age</span>) {</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.#age = age</span><br><span class="line">    <span class="title class_">Man</span>.<span class="property">sex</span> = sex</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">'Lily'</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>) <span class="comment">// [class Man] { age: 25 }</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance) <span class="comment">// Man { name: 'Lily' }</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">sex</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure><p>执行过程：</p><ul><li>表达式从左向右执行，先给 <code>a</code> 赋值 <code>b</code></li><li>JS 引擎会在作用于链寻找 <code>b</code>，<code>b = c</code> 是一个赋值表达式</li><li>继续在作用域链里寻找 <code>c</code>，<code>c = 1</code>即 <code>c</code> 被赋值为1</li><li>最后 <code>b</code> 和 <code>a</code> 依次被赋值为 1</li></ul><h2 id="连续箭头函数"><a href="#连续箭头函数" class="headerlink" title="连续箭头函数"></a>连续箭头函数</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) {</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将函数 <code>add</code> 柯里化</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add_curry</span>(<span class="params">a</span>) {</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) {</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">c</span>) {</span><br><span class="line">      <span class="keyword">return</span> a + b + c</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><code>add_curry</code> 函数返回值为函数，所以它是一个高阶函数。</p><p>ES6 写法</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add_curry_es6</span> = a =&gt; <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">c</span> =&gt;</span> (a + b + c)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry_es6</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br></pre></td></tr></tbody></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>在数学和计算机科学中，高阶函数指的是一个函数至少满足下列一个条件：</p><ul><li>接收一个或多个函数作为参数</li><li>返回一个函数作为它的结果</li></ul><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化是一种函数的转换，是把接受多个参数的函数转换成接收一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>柯里化又称部分求值。一个currying函数首先会接收一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另一个函数，刚才传入的参数在函数形式的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所以参数都会被一次性用于求值。</p><p>柯里化要求函数具有固定数量的参数。<br>根据定义，柯里化应该将 sum(a, b, c) 转换为 sum(a)(b)(c)。</p><h3 id="柯里化函数的用途"><a href="#柯里化函数的用途" class="headerlink" title="柯里化函数的用途"></a>柯里化函数的用途</h3><ul><li>可以惰性求值</li><li>可以提取传递部分参数</li></ul><p>n 个连续箭头组成的函数实际上就是柯里化了 n - 1次。</p><p>具体调用过程如下：</p><p>前 n - 1 次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值。所以连续箭头函数就是多次柯里化函数的 es6 写法。</p><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844903857777016845">https://juejin.cn/post/6844903857777016845</a></li><li><a href="https://zh.javascript.info/currying-partials">https://zh.javascript.info/currying-partials</a></li><li><a href="https://juejin.cn/post/6969016993215152136">https://juejin.cn/post/6969016993215152136</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令和操作</title>
      <link href="/blog/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Config-Account"><a href="#Config-Account" class="headerlink" title="Config Account"></a>Config Account</h2><h3 id="查询账号、邮箱"><a href="#查询账号、邮箱" class="headerlink" title="查询账号、邮箱"></a>查询账号、邮箱</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line"></span><br><span class="line">git config --global user.email</span><br></pre></td></tr></tbody></table></figure><h3 id="设置账号、邮箱"><a href="#设置账号、邮箱" class="headerlink" title="设置账号、邮箱"></a>设置账号、邮箱</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">"email address"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Generate-SSH-key"><a href="#Generate-SSH-key" class="headerlink" title="Generate SSH key"></a>Generate SSH key</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ED25519</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">"email address"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048-bit RSA</span></span><br><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">"email address"</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h2><h3 id="查询分支"><a href="#查询分支" class="headerlink" title="查询分支"></a>查询分支</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询本地所有分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有分支（本地+remote）</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></tbody></table></figure><h3 id="创建分支、切换分支"><a href="#创建分支、切换分支" class="headerlink" title="创建分支、切换分支"></a>创建分支、切换分支</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置新建分支代码源为远程分支 branchName</span></span><br><span class="line">git checkout -b branchName  origin/branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换本地已有分支</span></span><br><span class="line">git checkout branchName</span><br></pre></td></tr></tbody></table></figure><h3 id="push-本地分支到-remote"><a href="#push-本地分支到-remote" class="headerlink" title="push 本地分支到 remote"></a>push 本地分支到 remote</h3><p>远程服务器不存在该分支时，可通过下列操作 push 本地分支到远程服务器</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localBranchName</span><br><span class="line">git push origin localBranchName:remoteBranchName</span><br><span class="line">git push --set-upstream origin remoteBranchName</span><br></pre></td></tr></tbody></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将其他分支代码合并到当前分支</span></span><br><span class="line">git merge otherBranchName</span><br></pre></td></tr></tbody></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地某个分支</span></span><br><span class="line">git branch -d branchName</span><br></pre></td></tr></tbody></table></figure><h2 id="Git-Remote"><a href="#Git-Remote" class="headerlink" title="Git Remote"></a>Git Remote</h2><h3 id="查询远程仓库地址"><a href="#查询远程仓库地址" class="headerlink" title="查询远程仓库地址"></a>查询远程仓库地址</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></tbody></table></figure><h3 id="仓库迁移"><a href="#仓库迁移" class="headerlink" title="仓库迁移"></a>仓库迁移</h3><p>可以保存之前的提交记录</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除当前仓库关联的远程地址</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联新的 git 地址到本地仓库</span></span><br><span class="line">git remote add origin newAddress</span><br></pre></td></tr></tbody></table></figure><h2 id="撤销提交操作"><a href="#撤销提交操作" class="headerlink" title="撤销提交操作"></a>撤销提交操作</h2><h3 id="撤销-git-add-操作"><a href="#撤销-git-add-操作" class="headerlink" title="撤销 git add 操作"></a>撤销 git add 操作</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销指定文件</span></span><br><span class="line">git reset HEAD xxx/xxx.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销所有文件</span></span><br><span class="line">git reset HEAD</span><br></pre></td></tr></tbody></table></figure><h3 id="撤销-git-commit-操作"><a href="#撤销-git-commit-操作" class="headerlink" title="撤销 git commit 操作"></a>撤销 git commit 操作</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前 commit 注释</span></span><br><span class="line">git commit --amend <span class="comment"># 进入vim编辑器，可以修改注释</span></span><br></pre></td></tr></tbody></table></figure><h2 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h2><blockquote><p>主分支的代码是受保护的，在本地代码回退后，再推送到主分支时会失败。开发时最好使用其他分支。</p></blockquote><h3 id="Git-refs-和-Git-heads"><a href="#Git-refs-和-Git-heads" class="headerlink" title="Git refs 和 Git heads"></a>Git refs 和 Git heads</h3><p>在版本回退前需要先理解两个 Git 概念： refs 和 heads。</p><ul><li>git refs<br>ref 指的是一个引用了 git commit ID 的名称。本质上它指向 commit。<br>ref 可以是分支名称例如 <code>master</code> 和 <code>dev</code> 。ref 也可以是 tag 名称，例如 <code>v1</code> 或 <code>v2</code><br>可以理解为 ref 是一个变量名指向一个 commit ID，并且指向的 commit ID 会动态随时间变更。</li><li>git heads<br>head 是一个分支中 ref 指向的最近的 commit ID。在 <code>.git/refs/heads</code> 目录中可以看到与分支同名的文件，文件中的内容是最新的 commit ID。</li></ul><h3 id="Git-HEAD"><a href="#Git-HEAD" class="headerlink" title="Git HEAD"></a>Git HEAD</h3><p><code>HEAD</code> 是一个特殊的 ref, 通常指向当前分支的顶端。可以在 <code>.git/HEAD</code> 文件中查看。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> .git/HEAD</span><br></pre></td></tr></tbody></table></figure><h3 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史，确认回退版本，拿到 commit_id</span></span><br><span class="line">git <span class="built_in">log</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行版本回退</span></span><br><span class="line">git reset --hard commit_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">git push --force</span><br></pre></td></tr></tbody></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://initialcommit.com/blog/what-is-git-head#:~:text=In%20Git%2C%20a%20head%20is,recent%20commit">What Is Git HEAD? | The Concept Of HEAD In Git - Explained</a>%20of%20that%20branch.)</li><li><a href="https://devconnected.com/how-to-git-reset-to-head/#:~:text=To%20hard%20reset%20files%20to,option%20and%20specify%20the%20HEAD.&amp;text=The%20purpose%20of%20the%20%E2%80%9Cgit,before%20HEAD%20and%20so%20on">How To Git Reset to HEAD</a>.)</li><li><a href="https://www.atlassian.com/git/tutorials/undoing-changes/git-reset">Git Reset</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
