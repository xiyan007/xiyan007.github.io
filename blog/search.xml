<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CodePush: React Native App</title>
      <link href="/blog/2022/09/05/CodePush-React-Native-App/"/>
      <url>/blog/2022/09/05/CodePush-React-Native-App/</url>
      
        <content type="html"><![CDATA[<h2 id="1-创建-app"><a href="#1-创建-app" class="headerlink" title="1. 创建 app"></a>1. 创建 app</h2><p><img src="/blog/resources/img/codePush/create-app.jpg"></p><p>⚠️ 创建时注意要填写 Release Type，虽然显示是选填的，但如果创建时为空，app 列表里会查询不到， Release type 查询条件会为空，但地址栏默认查询条件为 release_type=debug</p><h2 id="2-添加-App-Center-SDK"><a href="#2-添加-App-Center-SDK" class="headerlink" title="2. 添加 App Center SDK"></a>2. 添加 App Center SDK</h2><h3 id="2-1-Add-the-SDK-to-the-project"><a href="#2-1-Add-the-SDK-to-the-project" class="headerlink" title="2.1 Add the SDK to the project"></a>2.1 Add the SDK to the project</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install appcenter appcenter-analytics appcenter-crashes --save-exact</span><br></pre></td></tr></table></figure><h3 id="2-2-Integrate-the-SDK"><a href="#2-2-Integrate-the-SDK" class="headerlink" title="2.2 Integrate the SDK"></a>2.2 Integrate the SDK</h3><p>在 <code>android/app/src/main/assets/</code> 目录下创建一个名为 <code>appcenter-config.json</code> 的文件，文件内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;app_secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e9f9d4a9-c996-4474-b1a7-7fc2897d4781&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>若 <code>assets</code> 目录不存在，创建目录：</p><p>方法 1:<br><img src="/blog/resources/img/codePush/create-assets-directory.jpg"></p><p><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-05-34.jpg"></p><p>方法 2:<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-05-34.jpg"></p><p><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-12-47.jpg"></p><p>修改 app 内容下的 <code>res/values/stringx.xml</code> 文件，添加如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;appCenterCrashes_whenToSendCrashes&quot;</span> <span class="attr">moduleConfig</span>=<span class="string">&quot;true&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span>DO_NOT_ASK_JAVASCRIPT<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">&quot;appCenterAnalytics_whenToEnableAnalytics&quot;</span> <span class="attr">moduleConfig</span>=<span class="string">&quot;true&quot;</span> <span class="attr">translatable</span>=<span class="string">&quot;false&quot;</span>&gt;</span>ALWAYS_SEND<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-Explore-data"><a href="#2-3-Explore-data" class="headerlink" title="2.3 Explore data"></a>2.3 Explore data</h3><p>构建并启动应用，然后查看 App Center 里面的 Analytics 部分，在 Analytics 里面应该有一个激活的用户和至少一个会话。</p><p>若构建时遇到 minSdkVersion 问题，可修改 build.gradle 配置文件。<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-25-15.jpg"></p><p>构建成功，Analytics 内容：<br><img src="/blog/resources/img/codePush/Snipaste_2021-01-22_11-28-31.jpg"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="https://www.jianshu.com/p/5974fcf88170">创建 assets 目录</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> React Native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解浏览器渲染</title>
      <link href="/blog/2022/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
      <url>/blog/2022/09/02/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器能够渲染的最小-px-值"><a href="#浏览器能够渲染的最小-px-值" class="headerlink" title="浏览器能够渲染的最小 px 值"></a>浏览器能够渲染的最小 px 值</h2><h3 id="height-能够显示的最小值"><a href="#height-能够显示的最小值" class="headerlink" title="height 能够显示的最小值"></a>height 能够显示的最小值</h3><iframe src="/code/html/height_value.html" height="210"></iframe><p>设置多个 div，width 属性设置为 200px，height 属性值从 1px 开始递减。</p><p>测试环境：笔记本 MacBook Pro (16inch, 2019) 内建显示器</p><p>浏览器：</p><ul><li>chrome 版本 105.0.5195.52</li><li>safari 版本15.6 (17613.3.9.1.5)</li><li>firefox 版本104.0</li></ul><table><thead><tr><th align="left">height 属性值</th><th align="left">computed height</th><th align="left">占据高度</th><th align="left">chrome</th><th align="left">firefox</th><th align="left">safari</th></tr></thead><tbody><tr><td align="left">1px</td><td align="left">1px</td><td align="left">1</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td></tr><tr><td align="left">0.5px</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td></tr><tr><td align="left">0.2584px</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td><td align="left">:heavy_check_mark:</td></tr><tr><td align="left">0.2583px</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:x:</td><td align="left">:heavy_check_mark:</td></tr><tr><td align="left">0.2500</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:x:</td><td align="left">:heavy_check_mark:</td></tr><tr><td align="left">0.2499</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:x:</td><td align="left">:x:</td></tr><tr><td align="left">0.0391px</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:heavy_check_mark:</td><td align="left">:x:</td><td align="left">:x:</td></tr><tr><td align="left">0.0390px</td><td align="left">0.5px</td><td align="left">0.5</td><td align="left">:x:</td><td align="left">:x:</td><td align="left">:x:</td></tr></tbody></table><p>测试结果，设置到小数点后4位，浏览器能渲染 height 的最小值分别为：</p><ul><li>chrome 0.0391px</li><li>safari 0.2500px</li><li>firefox 0.2584px</li></ul><!-- 使用 chrome 浏览器测试到30位小数`height: 0.039062498137354847299596016797px;` 显示`height: 0.039062498137354847299596016796px;` 不显示 --><!-- 使用 safari 浏览器测试到30位小数`height: 0.24999999254941938919838407px;` 显示`height: 0.24999999254941938919838406px;` 不显示 --><!-- 使用 safari 浏览器测试到30位小数`height: 0.258333310484887px;` 显示`height: 0.258333310484886px;` 不显示 --><!-- ### border 能够显示的最小值<iframe src="/code/html/border_value.html" height="210"></iframe> --><h2 id="显示器对渲染的影响"><a href="#显示器对渲染的影响" class="headerlink" title="显示器对渲染的影响"></a>显示器对渲染的影响</h2><p>上述测试切换到扩展显示器显示后，渲染结果比内建显示器差。<br>内建显示器分辨率为：3072 x 1920<br>扩展显示器分辨率为：1680 x 1050</p><h3 id="如何将元素绘制到屏幕上"><a href="#如何将元素绘制到屏幕上" class="headerlink" title="如何将元素绘制到屏幕上"></a>如何将元素绘制到屏幕上</h3><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Performance/How_browsers_work">MDN - 渲染页面：浏览器的工作原理</a></li><li><a href="https://bbs.huaweicloud.com/blogs/178984">从浏览器的渲染到性能</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>渲染 0.5px 线条</title>
      <link href="/blog/2022/09/01/%E6%B8%B2%E6%9F%93-0-5px-%E7%BA%BF%E6%9D%A1/"/>
      <url>/blog/2022/09/01/%E6%B8%B2%E6%9F%93-0-5px-%E7%BA%BF%E6%9D%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器能够渲染的最小-px-值"><a href="#浏览器能够渲染的最小-px-值" class="headerlink" title="浏览器能够渲染的最小 px 值"></a>浏览器能够渲染的最小 px 值</h2><p>浏览器的最小渲染单位是 1px。</p><h3 id="div-元素-height-可以渲染的最小值"><a href="#div-元素-height-可以渲染的最小值" class="headerlink" title="div 元素 height 可以渲染的最小值"></a>div 元素 height 可以渲染的最小值</h3><p>设置多个 div，宽为 200px，高度从 1px 开始递减。<br>使用 chrome 浏览器测试结果如下：</p><table><thead><tr><th>height 属性值</th><th>computed height</th><th>实际占据高度</th><th>浏览器默认显示</th><th>浏览器放大显示</th></tr></thead><tbody><tr><td>0.5px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.4px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.3px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.1px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.05px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.04px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.03px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.02px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.01px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr><tr><td>0.009px</td><td>Title</td><td>Title</td><td>Title</td><td>Title</td></tr></tbody></table><h2 id="渲染-0-5px-线条"><a href="#渲染-0-5px-线条" class="headerlink" title="渲染 0.5px 线条"></a>渲染 0.5px 线条</h2><h3 id="使用-CSS-transform"><a href="#使用-CSS-transform" class="headerlink" title="使用 CSS transform"></a>使用 CSS transform</h3><p>浏览器的最小渲染单位是 1px。即使设置的属性值小于 1px，浏览器最终呈现的还是 1px。</p><p>可以使用 <strong>transform: scale()</strong> 来缩小元素，从而渲染出小于 1px 的线条。</p><div class="embed-html-wrap">  <div class="line-box"></div>  <div class="line-box"></div>  <div class="line-box"></div>  <div class="line-box"></div>  <div class="rectangle"></div>  <div class="rectangle"></div></div><style>  .embed-html-wrap {    width: 100%;    padding: 20px;    background-color: rgba(250, 235, 215, 0.423);  }  .line-box {    width: 200px;    height: 10px;    background: red;    margin-bottom: 10px;  }  .line-box:nth-child(2) {    transform: scale(1, 0.5); /* x轴不缩放，y轴缩小1倍 */  }  .line-box:nth-child(3) {    height: 1px;  }  .line-box:nth-child(4) {    height: 1px;    transform: scale(1, 0.5);  }  .rectangle {    display: inline-block;    width: 100px;    height: 100px;    border: 1px solid #000;  }  .rectangle:last-child {    border: none;    position: relative;  }  .rectangle:last-child::before {    content: "";    width: 200%;    height: 200%;    display: inline-block;    border: 1px solid #000;    position: absolute;    top: 0;    left: 0;    transform: scale(0.5);      /* x和y轴方向缩小1倍 */    transform-origin: left top; /* 设置内容转换的中心点为左上角，默认中心点为内容中心 */   }</style><p>上面展示的线条粗细分别为 20px，10px，1px, 0.5px<br>矩形边框分别为 1px, 0.5px</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;embed-html-wrap&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line-box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rectangle&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.embed-html-wrap</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">250</span>, <span class="number">235</span>, <span class="number">215</span>, <span class="number">0.423</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.line-box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: red;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.line-box</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">0.5</span>); <span class="comment">/* x轴不缩放，y轴缩小1倍 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.line-box</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.line-box</span><span class="selector-pseudo">:nth-child</span>(<span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.rectangle</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.rectangle</span><span class="selector-pseudo">:last-child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.rectangle</span><span class="selector-pseudo">:last-child</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">200%</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);      <span class="comment">/* x和y轴方向缩小1倍 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform-origin</span>: left top; <span class="comment">/* 设置内容转换的中心点为左上角，默认中心点为内容中心 */</span> </span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- ### 使用 SVG -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 笔记</title>
      <link href="/blog/2022/08/31/Vue3-%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2022/08/31/Vue3-%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h2><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object.defineProperty 和 Proxy</title>
      <link href="/blog/2022/08/30/Object-defineProperty-%E5%92%8C-ES6-Proxy/"/>
      <url>/blog/2022/08/30/Object-defineProperty-%E5%92%8C-ES6-Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h2><p><code>defineProperty</code> 是一个静态方法，该方法允许精准的新增或修改属性，并且返回对象。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><blockquote><p>Object.defineProperty(obj, prop, descriptor)</p></blockquote><ul><li><code>obj</code> 指定要定义属性的对象</li><li><code>prop</code> 要定义或修改的属性名或标识符</li><li><code>descriptor</code> 将要被定义或修改的属性的描述</li></ul><h3 id="descriptor-配置选项"><a href="#descriptor-配置选项" class="headerlink" title="descriptor 配置选项"></a>descriptor 配置选项</h3><p>descriptor 可分为两类：数据描述符和存取描述符。</p><p>数据描述符选项：</p><ul><li><code>value</code>, 该属性对应的值。</li><li><code>writable</code>, 默认 false；当配置为 true 时，该属性的值才可以被修改。</li><li><code>configurable</code>, 默认 false；当配置为 true 时，该属性的描述才可以被修改。</li><li><code>enumerable</code>, 默认 false；当配置为 true 时，该属性才会出现在对象的枚举属性中。</li></ul><p>存取描述符选项：</p><ul><li><code>configurable</code></li><li><code>enumerable</code></li><li><code>get</code>, 属性的 getter 函数，如果没有 getter，则为 undefined。当访问该属性时，会调用此函数。执行时不传入任何参数，但是会传入 this 对象。该函数的返回值会被用作属性的值。 默认为 undefined。</li><li><code>set</code>, 属性的 setter 函数，如果没有 setter，则为 undefined。当属性值被修改时，会调用此函数。该方法接受一个参数（也就是被赋予的新值），会传入赋值时的 this 对象。 默认为 undefined。</li></ul><p><strong>若存在 value 或 writable 键值，则为数据描述符，不能存在 get 和 set，否则会产生异常。</strong><br><strong>若存在 get 或 set 键值，则为存取描述符，不能存在 value 和 writable，否则会产生异常。</strong></p><h4 id="writable"><a href="#writable" class="headerlink" title="writable"></a>writable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性值</span></span><br><span class="line"><span class="comment">// 因为 name 属性配置的 writable 为 false，所以无法修改属性值</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 20</span></span><br></pre></td></tr></table></figure><h4 id="configurable"><a href="#configurable" class="headerlink" title="configurable"></a>configurable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>); <span class="comment">// Mary 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为 name 和 age 属性writable 配置为 false，所以无法直接修改属性值</span></span><br><span class="line"><span class="comment">// 若需要修改属性值，则需要修改属性描述符，将 writable 配置为 true</span></span><br><span class="line"><span class="comment">// name 属性配置了 configurable 为 true，所以可以将 writable 配置为 true</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Jack&#x27;</span>,</span><br><span class="line">  <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Jack</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Amy&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Amy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// age 属性未配置 configurable，默认为false，无法修改其他描述符，若直接修改会报错</span></span><br><span class="line"><span class="comment">// 下面代码运行会抛出异常：</span></span><br><span class="line"><span class="comment">// TypeError: Cannot redefine property: age</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// Jack</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="enumerable"><a href="#enumerable" class="headerlink" title="enumerable"></a>enumerable</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span> <span class="comment">// enumerable 默认为 false，不可以枚举</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;age&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;sex&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); <span class="comment">// &#123; name: &#x27;Mary&#x27;, sex: &#x27;female&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组，数组中属性名的排列顺序和正常循环遍历该对象时返回的顺序一致。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) <span class="comment">// [ &#x27;name&#x27;, &#x27;sex&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...in语句以任意顺序迭代一个对象的除Symbol以外的可枚举属性，包括继承的可枚举属性。</span></span><br><span class="line"><span class="keyword">let</span> newObj = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  newObj[key] = obj[key]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj); <span class="comment">// &#123; name: &#x27;Mary&#x27;, sex: &#x27;female&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h4 id="get-和-set"><a href="#get-和-set" class="headerlink" title="get 和 set"></a>get 和 set</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Mary&#x27;</span>;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&#x27;name&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> str + <span class="string">&#x27;, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">sex</span>;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用 this.name = val，会出现异常 RangeError: Maximum call stack size exceeded</span></span><br><span class="line">    <span class="keyword">if</span> (val == <span class="string">&#x27;Jack&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">sex</span> = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    str = val</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// &#123; sex: &#x27;female&#x27;, name: [Getter/Setter] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Mary, female</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// &#123; sex: &#x27;male&#x27;, name: [Getter/Setter] &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>); <span class="comment">// Jack, male</span></span><br></pre></td></tr></table></figure><h2 id="Object-defineProperties"><a href="#Object-defineProperties" class="headerlink" title="Object.defineProperties"></a>Object.defineProperties</h2><p>Object.defineProperties() 方法直接在一个对象上定义新的属性或修改现有属性，并返回该对象。</p><p>Object.defineProperty 每次只能处理单个属性，Object.defineProperties 可以同时处理多个属性。</p><blockquote><p>Object.defineProperties(obj, props)</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperties</span>(obj, &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;Mary&#x27;</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">sex</span>: &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">name</span> == <span class="string">&#x27;Jack&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;female&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);     <span class="comment">// &#123; name: &#x27;Mary&#x27;, age: 18 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>); <span class="comment">// female</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);     <span class="comment">// &#123; name: &#x27;Jack&#x27;, age: 18 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">sex</span>); <span class="comment">// male</span></span><br></pre></td></tr></table></figure><h2 id="Reflect-defineProperty"><a href="#Reflect-defineProperty" class="headerlink" title="Reflect.defineProperty"></a>Reflect.defineProperty</h2><p>静态方法 <code>Reflect.defineProperty()</code> 基本等同于 <code>Object.defineProperty()</code> 方法，唯一不同是返回值。<br><code>Object.defineProperty</code> 返回一个对象，或者如果属性没有被成功定义，抛出一个 TypeError。<br><code>Reflect.defineProperty</code> 方法只返回一个 Boolean，来说明该属性是否被成功定义。</p><h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><blockquote><p>const p = new Proxy(target, handler)</p></blockquote><ul><li><code>target</code> 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）</li><li><code>handler</code> 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 p 的行为。</li></ul><h3 id="handler-捕获选项"><a href="#handler-捕获选项" class="headerlink" title="handler 捕获选项"></a>handler 捕获选项</h3><ul><li>getPrototypeOf()</li><li>setPrototypeOf()</li><li>isExtensible()</li><li>preventExtensions()</li><li>getOwnPropertyDescriptor()</li><li>defineProperty()</li><li><code>has</code> in 操作符捕获</li><li>get()</li><li>set()</li><li><code>deleteProperty()</code> delete 操作符捕获 </li><li><code>ownKeys()</code> Object.getOwnPropertyNames 方法和 Object.getOwnPropertySymbols 方法的捕捉器。</li><li><code>apply</code> 函数调用操作捕获</li><li><code>construct()</code> new 操作符捕获</li></ul><h3 id="example-捕获对象属性定义或修改操作"><a href="#example-捕获对象属性定义或修改操作" class="headerlink" title="example: 捕获对象属性定义或修改操作"></a>example: 捕获对象属性定义或修改操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置对象属性 name 不可以修改，age 不可枚举</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 拦截对对象的下列操作：</span></span><br><span class="line"><span class="comment">     * - Object.defineProperty()</span></span><br><span class="line"><span class="comment">     * - Reflect.defineProperty()</span></span><br><span class="line"><span class="comment">     * - proxy.property = value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">target</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">property</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">descriptor</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@returns</span> 返回 boolean 值，表示对象属性的操作成功与否，严格模式下返回 false 会抛出异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">defineProperty</span>: <span class="keyword">function</span> (<span class="params">target, property, descriptor</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (property == <span class="string">&#x27;name&#x27;</span>) &#123;</span><br><span class="line">        descriptor.<span class="property">writable</span> = <span class="literal">false</span>;    <span class="comment">// name 属性不可以写</span></span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (property == <span class="string">&#x27;age&#x27;</span>) &#123;</span><br><span class="line">        descriptor.<span class="property">enumerable</span> = <span class="literal">false</span>;  <span class="comment">// age 属性不可枚举</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, property, descriptor);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, prop</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> prop <span class="keyword">in</span> target ? target[prop] : <span class="literal">undefined</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// &#123;&#125;</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Mary&#x27;</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;female&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// &#123; name: &#x27;Mary&#x27;, sex: &#x27;female&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">obj.<span class="property">sex</span> = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">obj.<span class="property">age</span> = <span class="number">24</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);      <span class="comment">// &#123; name: &#x27;Mary&#x27;, sex: &#x27;male&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">age</span>);  <span class="comment">// 24</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty">MDN - Object.defineProperty</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperties">MDN - Object.defineProperties</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect/defineProperty">MDN - Reflect.defineProperty</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">MDN - Proxy</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TypeScript 学习笔记</title>
      <link href="/blog/2022/08/22/TypeScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2022/08/22/TypeScript-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<!-- https://24kcs.github.io/vue3_study/00_%E8%AF%BE%E7%A8%8B%E4%BB%8B%E7%BB%8D.html --><!-- https://jkchao.github.io/typescript-book-chinese/typings/typeAssertion.html --><!-- https://www.typescriptlang.org/ --><h2 id="TypeScript-概述"><a href="#TypeScript-概述" class="headerlink" title="TypeScript 概述"></a>TypeScript 概述</h2><p><a href="https://github.com/Microsoft/TypeScript">TypeScript</a> 是一种由微软开发的开源、跨平台的编程语言。它是 JavaScript 的超集，最终会被编译为 JavaScript 代码。</p><h2 id="安装-TypeScript"><a href="#安装-TypeScript" class="headerlink" title="安装 TypeScript"></a>安装 TypeScript</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g TypeScript</span><br><span class="line"></span><br><span class="line">tsc -V <span class="comment"># 查看安装版本</span></span><br></pre></td></tr></table></figure><h2 id="配置文件-tsconfig-json"><a href="#配置文件-tsconfig-json" class="headerlink" title="配置文件 tsconfig.json"></a>配置文件 tsconfig.json</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tsc --init <span class="comment"># create</span></span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h3><ul><li>boolean</li><li>number</li><li>string</li><li>undefined</li><li>null，默认情况下 null 和 undefined 是所有类型的子类型。 也就是说我们可以把 null 和 undefined 赋值给 number 或其他类型的变量。</li><li>Array&lt;元素类型&gt;</li><li>Tuple，元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</li><li>enum，枚举类型是对 JavaScript 标准数据类型的一个补充。默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值。</li><li>any，当变量的类型不清楚时，可以指定变量为 any 类型。类型检查器不会对这些变量进行检查。</li><li>void，表示没有任何类型，当一个函数没有返回值时，你通常会见到其返回值类型是 void。声明 void 类型的变量只能被赋值为 undefined 和 null。</li><li>object，非原始类型，是除 number，string，boolean 之外的类型。</li><li>Union Types，联合类型，取值可以为多种类型中的一种。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a1</span>: <span class="built_in">boolean</span> = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a2</span>: <span class="built_in">number</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a3</span>: <span class="built_in">string</span> = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a4</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a5</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下 null 和 undefined 是所有类型的子类型。 可以把 null 和 undefined 赋值给其他类型的变量。</span></span><br><span class="line"></span><br><span class="line">a1 = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a6</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组 tuple, 已知元素数量和类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a7</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&#x27;Lily&#x27;</span>, <span class="number">18</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 枚举</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title class_">Cat</span>, <span class="title class_">Dog</span>, <span class="title class_">Snake</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Sex</span> &#123;</span><br><span class="line">  female = <span class="number">1</span>, male = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPet</span>: <span class="title class_">Animal</span> = <span class="title class_">Animal</span>.<span class="property">Cat</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySex</span>: <span class="title class_">Sex</span> = <span class="title class_">Sex</span>.<span class="property">male</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认情况下，从 0 开始为元素编号。 你也可以手动的指定成员的数值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Animal</span>.<span class="property">Cat</span>, <span class="title class_">Animal</span>.<span class="property">Dog</span>, <span class="title class_">Animal</span>.<span class="property">Snake</span>); <span class="comment">// 0 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Sex</span>.<span class="property">female</span>, <span class="title class_">Sex</span>.<span class="property">male</span>); <span class="comment">// 1 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myPet); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mySex); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a8</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明一个 void 类型的变量只能被赋值为 undefined 和 null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a9</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test func&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// object 类型表示除 number，string，boolean之外的类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = [<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Union Types</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getLength</span>(<span class="params">x: <span class="built_in">number</span> | <span class="built_in">string</span></span>) &#123;</span><br><span class="line">  <span class="comment">// 类型断言</span></span><br><span class="line">  <span class="keyword">if</span> ((&lt;<span class="built_in">string</span>&gt;x).<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (x <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x.<span class="title function_">toString</span>().<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>TypeScript 允许你覆盖它的推断，并且能以任何你想要的方式分析它，这种机制被称为「类型断言」。<br>TypeScript 类型断言用来告诉编译器你比它更了解这个类型，并且它不应该再发出错误。</p><p>类型断言有两种形式。 其一是 <code>&lt;&gt;</code> 语法, 另一个为 <code>as</code> 语法。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Person</span>;</span><br><span class="line">x.<span class="property">name</span> = <span class="string">&#x27;Lily&#x27;</span></span><br><span class="line">x.<span class="property">age</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> y = &lt;<span class="title class_">Person</span>&gt;&#123;&#125;</span><br><span class="line">y.<span class="property">name</span> = <span class="string">&#x27;Mary&#x27;</span></span><br><span class="line">y.<span class="property">age</span> = <span class="number">20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// let z = &#123;&#125;</span></span><br><span class="line"><span class="comment">// z.name = &#x27;Jack&#x27; // z不存在name属性，直接赋值会报错</span></span><br></pre></td></tr></table></figure><h3 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h3><p>TypeScript 会在没有明确指定类型时，根据一些简单的规则推断变量的类型。</p><ul><li>定义变量且被赋值，推断为对应的类型；</li><li>定义变量且未赋值，推断未 any 类型；</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x</span><br><span class="line">x = <span class="number">123</span></span><br><span class="line">x = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">123</span>; <span class="comment">// 推断为 number 类型</span></span><br><span class="line">a = <span class="string">&#x27;hello&#x27;</span> <span class="comment">// error: Type &#x27;&quot;hello&quot;&#x27; is not assignable to type &#x27;number&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>TypeScript 使用接口（interfaces）来定义对象的类型。<br>类型检查器会查看对象内部的属性是否与接口描述一致, 如果不一致就会提示类型错误。</p><ul><li>可选属性，在属性名定义后加上 <code>?</code>，对可能存在的属性进行预定义。</li><li>只读属性，在属性名前加上 <code>readonly</code>，只能在对象创建的时候赋值，创建后不能修改属性值。</li></ul><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">id</span>: <span class="built_in">string</span> <span class="comment">// 只读属性</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">age</span>: <span class="built_in">number</span></span><br><span class="line">  hobby?: <span class="built_in">string</span> <span class="comment">// 可选属性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personA</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;p_001&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">hobby</span>: <span class="string">&#x27;唱歌&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺少属性 age </span></span><br><span class="line"><span class="comment">// error: Property &#x27;age&#x27; is missing in type &#x27;&#123; name: string; &#125;&#x27; but required in type &#x27;Person&#x27;.</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">personB</span>: <span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;p_001&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">personA.<span class="property">name</span> = <span class="string">&#x27;王武&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// id 为只读属性，不能修改</span></span><br><span class="line"><span class="comment">// error: Cannot assign to &#x27;id&#x27; because it is a read-only </span></span><br><span class="line">personA.<span class="property">id</span> = <span class="string">&#x27;test&#x27;</span> </span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> TypeScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 学习笔记</title>
      <link href="/blog/2022/08/03/Vue-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/blog/2022/08/03/Vue-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Vue-概述"><a href="#Vue-概述" class="headerlink" title="Vue 概述"></a>Vue 概述</h2><p><a href="https://cn.vuejs.org/v2/guide/">Vue</a> 是一套用于构建用户界面的框架，Vue 的核心库只关心视图层，易于上手操作，且方便和其他第三方库或已有的项目进行整合。</p><h3 id="Vue-安装使用"><a href="#Vue-安装使用" class="headerlink" title="Vue 安装使用"></a>Vue 安装使用</h3><p><a href="https://cn.vuejs.org/v2/guide/installation.html">Vue 安装</a></p><p>HTML中使用</p><ul><li>在 html 文件中引入 vue.js 库；</li><li>创建 Vue 实例，绑定 DOM 节点；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">message</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="版本历史-question"><a href="#版本历史-question" class="headerlink" title="版本历史 :question:"></a>版本历史 :question:</h3><h3 id="框架优点-question"><a href="#框架优点-question" class="headerlink" title="框架优点 :question:"></a>框架优点 :question:</h3><p><a href="https://cn.vuejs.org/v2/guide/comparison.html">Vue 对比其他框架</a></p><h2 id="Vue-开发"><a href="#Vue-开发" class="headerlink" title="Vue 开发"></a>Vue 开发</h2><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML，所以能被遵循规范的浏览器和 HTML 解析器解析。在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。</p><h4 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h4><p><a href="/code/vue/bind-data.html" target="_blank">demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.red</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.blue</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- js 表达式 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; 1+1 &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 绑定 class 属性；渲染普通文本 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;textClass&quot;</span>&gt;</span>&#123;&#123; text &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 渲染 html 内容 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;html&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 绑定事件 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;showRed&quot;</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;textClass == &#x27;red&#x27;&quot;</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;textClass = &#x27;blue&#x27;&quot;</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;textClass == &#x27;blue&#x27;&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">text</span>: <span class="string">&#x27;Hello Vue!&#x27;</span>,                   <span class="comment">// 普通文本</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">html</span>: <span class="string">&#x27;&lt;span&gt;hello world&lt;/span&gt;&#x27;</span>,     <span class="comment">// html</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">textClass</span>: <span class="string">&#x27;red&#x27;</span>,                     <span class="comment">// html attribute</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">showRed</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">textClass</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>指令 (Directives) 是带有 v- 前缀的特殊 attribute。指令 attribute 的值预期是单个 JavaScript 表达式 (v-for 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p><p>常用的指令有：</p><ul><li><code>v-if</code></li></ul><p><strong>指令缩写</strong></p><ul><li>v-bind 缩写</li><li>v-on 缩写</li></ul><h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><p>模板内的表达式的设计初衷是用于简单运算的，在模板中放入太多的逻辑会让模板过重且难以维护。<br>对于任何复杂逻辑，你都应当使用计算属性。<br>计算属性是基于它们的响应式依赖进行缓存的。只在相关响应式依赖发生改变时它们才会重新求值。</p><iframe src="/code/vue/computed.html" height="100"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>1 到 5 数字和为：&#123;&#123;total&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setValue&quot;</span>&gt;</span>点击直接计算属性赋值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">firstName</span>: <span class="string">&#x27;Lily&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">lastName</span>: <span class="string">&#x27;Chen&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">total</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">list</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">v, e</span>) =&gt;</span> v + e);</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">fullName</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstName</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">this</span>.<span class="property">lastName</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">val</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;set fullName: &#x27;</span>, val);</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">var</span> arr = val.<span class="title function_">split</span>(<span class="string">&#x27; &#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">firstName</span> = arr[<span class="number">0</span>];</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">lastName</span> = arr[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">setValue</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">total</span> = <span class="number">20</span>; <span class="comment">// 未设置 setter，total 无法更新</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">fullName</span> = <span class="string">&#x27;Jack Li&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>计算属性默认只有 <code>getter</code>，不过在需要时你也可以提供一个 <code>setter</code>。<br>上面 demo 中计算属性 total 未设置 <code>setter</code>，控制台会出现警告：Computed property “total” was assigned to but it has no setter.</p><h3 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h3><p>侦听器用来观察和响应 Vue 实例上的数据变动。</p><iframe src="/code/vue/watch.html" height="60"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; color &#125;&quot;</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;count--&quot;</span>&gt;</span>减<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">color</span>: <span class="string">&#x27;#000&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">watch</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">count</span>: <span class="keyword">function</span> (<span class="params">current</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (current &lt; <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current == <span class="number">0</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;#000&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;blue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Class-与-Style-绑定"><a href="#Class-与-Style-绑定" class="headerlink" title="Class 与 Style 绑定"></a>Class 与 Style 绑定</h3><iframe src="/code/vue/style.html" height="140"></iframe><p>使用 <code>v-on</code>（可省略） 指令绑定 <code>class</code> 和 <code>style</code> 属性，属性绑定值均为 JS 表达式，可以是字符串、对象或数组。</p><p>内联样式可以提供多个值：<code>&lt;div :style=&quot;&#123; display: [&#39;-webkit-box&#39;, &#39;-ms-flexbox&#39;, &#39;flex&#39;] &#125;&quot;&gt;&lt;/div&gt;</code>，这样只会渲染数组中最后一个被浏览器支持的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;theme-title&quot;</span>&gt;</span></span><br><span class="line">    主题颜色：</span><br><span class="line">    <span class="comment">&lt;!-- class、style 绑定对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; show: theme == &#x27;light&#x27;&#125;&quot;</span>&gt;</span>light<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; show: theme == &#x27;dark&#x27;&#125;&quot;</span>&gt;</span>dark<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; display: theme == &#x27;pink&#x27; ? &#x27;inline-block&#x27; : &#x27;none&#x27;&#125;&quot;</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- class、style 绑定数组 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;content&#x27;, theme]&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;[computedStyle]&quot;</span>&gt;</span></span><br><span class="line">    内容测试测试测试测试测试测试</span><br><span class="line">    <span class="comment">&lt;!-- class 绑定属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;size&quot;</span>&gt;</span>哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;theme = &#x27;light&#x27;&quot;</span>&gt;</span>light<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;theme = &#x27;dark&#x27;&quot;</span>&gt;</span>dark<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;theme = &#x27;pink&#x27;&quot;</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;size = &#x27;sm&#x27;&quot;</span>&gt;</span>14px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;size = &#x27;lg&#x27;&quot;</span>&gt;</span>18px<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">size</span>: <span class="string">&#x27;sm&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">theme</span>: <span class="string">&#x27;light&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">computedStyle</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">theme</span> == <span class="string">&#x27;pink&#x27;</span>) <span class="keyword">return</span> &#123; <span class="attr">fontStyle</span>: <span class="string">&#x27;italic&#x27;</span> &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h4 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h4><ul><li><code>v-if</code> 接收 truthy 值</li><li><code>v-else</code>、 <code>v-else-if</code> 表示 ‘else’ 块，需跟在 <code>v-if</code> 或 <code>v-else-if</code> 后面</li><li><code>v-if</code> 支持 template 元素</li></ul><iframe src="/code/vue/condition.html" height="80"></iframe><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;activeKey = 0&quot;</span>&gt;</span>btn1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;activeKey = 1&quot;</span>&gt;</span>btn2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;activeKey = 2&quot;</span>&gt;</span>btn3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;activeKey == 0&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;activeKey == 1&quot;</span>&gt;</span>world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>Vue<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">activeKey</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a>v-show</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;visible&quot;</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-show 不支持 <code>&lt;template&gt;</code> 元素，也不支持 <code>v-else</code>。</strong></p><h4 id="两者差异"><a href="#两者差异" class="headerlink" title="两者差异"></a>两者差异</h4><ul><li><code>v-if</code> 支持 v-else 和 v-else-if，v-show 不支持；</li><li><code>v-if</code> 支持 <code>&lt;template&gt;</code> 元素，<code>v-show</code> 不支持；</li><li><code>v-if</code> 也是惰性的：如果在初始渲染时条件为假，则不会渲染条件块，直到条件第一次变为真才会开始渲染条件块；</li><li><code>v-show</code> 不管条件是什么，都会渲染元素，它只是简单的根据 CSS display 属性进行切换；</li></ul><p>适用场景:<br><code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。<br>如果需要非常频繁地切换，则使用 <code>v-show</code> 较好；如果在运行时条件很少改变，则使用 <code>v-if</code> 较好。</p><h3 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h3><iframe src="/code/vue/list.html" height="120"></iframe><p>渲染列表可以使用 <code>v-for</code> 指令，它基于数组来渲染列表。</p><p><code>v-for</code> 指令需要使用 item in items 形式的特殊语法，其中 items 是源数据数组，而 item 则是被迭代的数组元素的别名<br>在 <code>v-for </code>块中，我们可以访问所有父作用域的 property。<code>v-for</code> 还支持一个可选的第二个参数，即当前项的索引。</p><p>可以用 of 替代 in 作为分隔符，因为它更接近 JavaScript 迭代器的语法。</p><p><code>v-for</code> 也可以用来遍历对象属性。<br><code>v-for=&quot;(item, key) of 3&quot; </code> 可以渲染 num 个空元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, key) of list&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, key) of 3&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, name, key) in obj&quot;</span> <span class="attr">::key</span>=<span class="string">&quot;key&quot;</span>&gt;</span>&#123;&#123;name + &#x27;: &#x27; + value&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">el</span>: <span class="string">&#x27;.box&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">list</span>: [&#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Lily&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;],</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">obj</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">name</span>: <span class="string">&#x27;Amy&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数组更新检测</strong></p><p>Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。这些被包裹过的方法包括：<br>push()、pop()、shift()、unshift()、splice()、sort()、reverse()。</p><p>在浏览器控制台中输入 <code>app.list.push(&#123; name: &#39;test&#39; &#125;)</code> 可看到数据变化<br>修改对象属性，渲染内容会更新，新增属性则不会，例如控制台输入 <code>app.obj.test = &#39;xxx&#39;</code> 却不会触发更新 :question:。</p><p><strong>v-for 与 v-if 一同使用</strong></p><p>不推荐在同一元素上使用 v-if 和 v-for。<br>当它们处于同一节点，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。当你只想为部分项渲染节点时，这种优先级的机制会十分有用.</p><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>Vue 使用 <code>v-on</code> 监听 DOM 事件，<code>v-on</code> 可以缩写为 <code>@</code>。</p><h4 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h4><p>Vue 为 v-on 提供了<a href="https://v2.cn.vuejs.org/v2/guide/events.html#%E4%BA%8B%E4%BB%B6%E4%BF%AE%E9%A5%B0%E7%AC%A6">事件修饰符</a>，修饰符是由点开头的指令后缀来表示的。</p><ul><li><code>stop</code></li><li><code>prevent</code></li><li><code>capture</code></li><li><code>self</code></li><li><code>once</code></li><li><code>passive</code><h4 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h4></li></ul><!-- ## 重点内容### 双向绑定原理 --><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://cn.vuejs.org/v2/guide/">Vue.js 官方文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json用途</title>
      <link href="/blog/2022/08/01/package-json%E7%94%A8%E9%80%94/"/>
      <url>/blog/2022/08/01/package-json%E7%94%A8%E9%80%94/</url>
      
        <content type="html"><![CDATA[<h2 id="package-json有哪些用途"><a href="#package-json有哪些用途" class="headerlink" title="package.json有哪些用途"></a>package.json有哪些用途</h2><p>package.json 文件是项目清单，它可以做很多事情，并且它们之间可以完全不相关。</p><p>用途有：</p><ul><li>对应用程序或包的名称、版本、其他信息进行说明；</li><li>列出包的作者或贡献者的名称、邮箱等信息；</li><li>指明包的 liscense；</li><li>可以用来存储工具配置信息；</li><li>是 <code>npm</code> 或 <code>yarn</code> 存储已安装库的名称和版本的地方；</li><li>设置包的入口文件；</li><li>定义一组可以运行的 node 脚本；</li></ul><h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><p>dependencies 用来设置作为依赖项安装的 npm 包列表。程序运行前需要安装这些依赖。<br>例如 request 库，用来创建请求，在开发和生产中都会用到的库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install &lt;PACKAGENAME&gt;</span><br><span class="line">yarn add &lt;PACKAGENAME&gt;</span><br></pre></td></tr></table></figure><h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>devDependencies 用来设置作为开发依赖项安装的 npm 包列表。<br>它与 dependencies 有所不同，devDependencies 设置的依赖项只会安装在开发机上，而不需要在生产中运行代码。<br>例如 eslint、babel 库，在开发中会使用，在生产中则不需要。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev &lt;PACKAGENAME&gt;</span><br><span class="line">yarn add --dev &lt;PACKAGENAME&gt;</span><br></pre></td></tr></table></figure><!-- ### peerDependencies --><!-- npm 是一个非常好的包管理工具，尤其是在管理子依赖上。如果有一个包同时依赖 http v2 和 libA，并且 libA 依赖 http v1，那么最终的依赖图像为：<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|__ request@2.12.0</span><br><span class="line">|__ libA</span><br><span class="line">  |__ request@1.9.9</span><br></pre></td></tr></table></figure><p>libA 有 request v1 副本，不会和 request v2 交互，可以很好的工作。</p><h4 id="plugin-package"><a href="#plugin-package" class="headerlink" title="plugin package"></a>plugin package</h4><p>插件包，意味着会和主机上的其他包一起使用，即使不直接使用主机上的包。例如：Grunt plugins、Express plugins。<br>本质上，插件被设计为与主机包一起使用。更重要的是，它们被设计被使用主机上特定版本的包。</p><p>作为一个包管理器，npm 在安装依赖项时的很大一部分工作是管理它们的版本。 –&gt;</p><!-- 运行 `npm install` 或 `yarn` 时，dependencies 和 devDependencies 中的依赖项会自动安装，peerDependencies 里的包则不会自动安装。 --><h2 id="package-lock-json用途"><a href="#package-lock-json用途" class="headerlink" title="package-lock.json用途"></a>package-lock.json用途</h2><p>package-lock.json 会固化当前安装的每个软件包的版本，当运行 npm install时，npm 会使用这些确切的版本。<br>当运行 npm update 时，package-lock.json 文件中的依赖的版本会被更新。</p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://nodejs.dev/learn/the-package-json-guide/">The package.json guide</a></li><li><a href="https://nodejs.dev/learn/the-package-lock-json-file">The package-lock.json file</a></li><li><a href="https://nodejs.org/uk/blog/npm/peer-dependencies/">Peer Dependencies</a></li><li><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">npm Docs - package.json</a></li><li><a href="https://docs.npmjs.com/cli/v8/configuring-npm/package-json">npm Docs - package-lock.json</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS 算法</title>
      <link href="/blog/2022/07/27/JS-%E7%AE%97%E6%B3%95/"/>
      <url>/blog/2022/07/27/JS-%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="算法复杂度和空间度计算"><a href="#算法复杂度和空间度计算" class="headerlink" title="算法复杂度和空间度计算"></a>算法复杂度和空间度计算</h2><h2 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>算法思想：相邻两个元素比较，若前一个值大于后一个，则交换位置，每趟中最大的元素会排在最后。第一趟需要比较 n - 1 次， 后面每趟比较的次数依次递减。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> list = [<span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">10</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; list.<span class="property">length</span> - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[j] &gt; list[j + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j];</span><br><span class="line">      list[j] = list[j + <span class="number">1</span>];</span><br><span class="line">      list[j + <span class="number">1</span>] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(list); <span class="comment">// [ 1, 2, 3, 4,  5, 6, 7, 8, 9, 10 ]</span></span><br></pre></td></tr></table></figure><h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><p>算法思想：将数组分为有序和无序两部分，左侧为有序，右侧为无序，每次从无序序列中取出最小值放在有序序列末尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.<span class="property">length</span> - <span class="number">1</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; list.<span class="property">length</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[i] &gt; list[j]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = list[i]</span><br><span class="line">      list[i] = list[j]</span><br><span class="line">      list[j] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h3><p>算法思想：将数组分为有序和无序两部分，左侧为有序，右侧为无序，每次从无序序列中拿出一个放在有序序列的适当位置。无序的第一个元素和有序的元素从右向左比较，若比左边小则依次交换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; list.<span class="property">length</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> j = i; j &gt; <span class="number">0</span>; j--) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list[j] &lt; list[j - <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = list[j]</span><br><span class="line">      list[j] = list[j - <span class="number">1</span>]</span><br><span class="line">      list[j - <span class="number">1</span>] = tmp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ### 快速排序算法思想：找到数组的中间值，使小于中间值的排在左边，大于中间值的排在右边。左边的任意值都要小于右边的值，然后再次对左右两边进行分割以此类推。[掘金-JS 实现快速排序](https://juejin.cn/post/7033761580214911007) --><h2 id="回文字符串检测"><a href="#回文字符串检测" class="headerlink" title="回文字符串检测"></a>回文字符串检测</h2><p>字符串从左向右读取和从右向左读取的内容一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isPalindrome</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!s) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  <span class="keyword">let</span> left = <span class="number">0</span>, right = s.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">    <span class="keyword">if</span> (s[left] != s[right]) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    ++left</span><br><span class="line">    --right</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查找字符串中最长回文子串"><a href="#查找字符串中最长回文子串" class="headerlink" title="查找字符串中最长回文子串"></a>查找字符串中最长回文子串</h2><h3 id="中心扩展"><a href="#中心扩展" class="headerlink" title="中心扩展"></a>中心扩展</h3><p>算法思想：遍历每一个字符，向两边扩展找到以其为中心的最长回文子串，所有找到的回文子串的最大长度即所求 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">longestPalindrome</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (s.<span class="property">length</span> &lt;= <span class="number">1</span>) <span class="keyword">return</span> s</span><br><span class="line">  <span class="keyword">var</span> start = <span class="number">0</span> <span class="comment">// 回文字符串起初位置</span></span><br><span class="line">  <span class="keyword">var</span> maxLen = <span class="number">1</span> <span class="comment">// 回文字符串长度</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; s.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="comment">// 奇数</span></span><br><span class="line">    <span class="keyword">let</span> left = i, right = i</span><br><span class="line">    <span class="keyword">while</span> (left &gt;= <span class="number">0</span> &amp;&amp; right &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[left] !== s[right]) <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> ((right - left + <span class="number">1</span>) &gt; maxLen) &#123;</span><br><span class="line">        start = left</span><br><span class="line">        maxLen = right - left + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      --left</span><br><span class="line">      ++right</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 偶数</span></span><br><span class="line">    <span class="keyword">let</span> left2 = i, right2 = i + <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> (left2 &gt;= <span class="number">0</span> &amp;&amp; right2 &lt; s.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (s[left2] !== s[right2]) <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">if</span> ((right2 - left2 + <span class="number">1</span>) &gt; maxLen) &#123;</span><br><span class="line">        start = left2</span><br><span class="line">        maxLen = right2 - left2 + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">      --left2</span><br><span class="line">      ++right2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> s.<span class="title function_">substring</span>(start, start + maxLen)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- ### 动态规划 --><h2 id="杨辉三角形"><a href="#杨辉三角形" class="headerlink" title="杨辉三角形"></a>杨辉三角形</h2><p>杨辉三角形，又称帕斯卡三角形、贾宪三角形、海亚姆三角形、巴斯卡三角形。</p><p>前 9 行如下：</p><img src="/blog/resources/img/83e43c795c7cba79bf4b6a4a3cdfa0f3e52b5fd5.svg" /><p>杨辉三角形特性：</p><ul><li>三角形以正整数构成，数字左右对称，每行由1开始逐渐变大，然后变小，回到1。</li><li>三角形每一行的平方和在杨辉三角出现奇数次。</li><li>每个数是它左上方和右上方的数的和。</li></ul><img src="/blog/resources/img/PascalTriangleAnimated2.gif" /><p>参考文档：</p><ul><li><a href="https://zh.m.wikipedia.org/zh-sg/%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92%E5%BD%A2">维基百科 - 杨辉三角形</a></li><li><a href="https://www.shuxuele.com/pascals-triangle.html">数学乐 - 杨辉三角</a></li></ul><h3 id="输出行数为-n-的内容"><a href="#输出行数为-n-的内容" class="headerlink" title="输出行数为 n 的内容"></a>输出行数为 n 的内容</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个数是它左上方和右上方的数的和</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">generateTriangle</span>(<span class="params">rowNum = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [[<span class="number">1</span>]]</span><br><span class="line">  <span class="keyword">if</span> (rowNum &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>([<span class="number">1</span>,<span class="number">1</span>])</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">2</span>; i &lt; rowNum; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> preRow = arr[i-<span class="number">1</span>]</span><br><span class="line">      <span class="keyword">let</span> row = <span class="title class_">Array</span>(i+<span class="number">1</span>)</span><br><span class="line">      row[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">      row[row.<span class="property">length</span>-<span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">      <span class="keyword">for</span> (j = <span class="number">1</span> ; j &lt; i; j++) &#123;</span><br><span class="line">        row[j] = preRow[j-<span class="number">1</span>] + preRow[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr.<span class="title function_">push</span>(row)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 数组操作</title>
      <link href="/blog/2022/07/27/JS-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2022/07/27/JS-%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="创建数组（指定长度、初始值）"><a href="#创建数组（指定长度、初始值）" class="headerlink" title="创建数组（指定长度、初始值）"></a>创建数组（指定长度、初始值）</h2><ul><li><code>Array(num)</code> 创建长度为 num 的空数组</li><li><code>Array.from(&#123; length: num &#125;)</code> 创建长度为 num 的数组，元素为 undefined</li><li><code>Array.fill(val, startIndex, lastIndex)</code> 使用固定值，填充从起始索引到终止索引内的元素，不包括终止索引。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; <span class="attr">length</span>: <span class="number">6</span> &#125;)</span><br><span class="line">arr.<span class="title function_">fill</span>(<span class="string">&#x27;x&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr)  <span class="comment">// [ &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27;, &#x27;x&#x27; ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr2.<span class="title function_">fill</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2)  <span class="comment">// [ 1, 1, 1 ]</span></span><br></pre></td></tr></table></figure><h2 id="判断对象是否为数组"><a href="#判断对象是否为数组" class="headerlink" title="判断对象是否为数组"></a>判断对象是否为数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> b = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Array</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(a)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(b)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>instanceof vs isArray</strong></p><p><a href="https://web.mit.edu/jwalden/www/isArray.html">严格判定 JavaScript 对象是否为数组</a></p><p>当检测 Array 实例时，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray">Array.isArray</a> 优于 <code>instanceof</code>，因为 Array.isArray 能检测 iframes。</p><p>Array.isArray 移动端浏览器兼容性不是很好，若要在移动端使用，最好先判断方法是否存在。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="title class_">Array</span>.<span class="property">isArray</span>) &#123;</span><br><span class="line">  <span class="title class_">Array</span>.<span class="property">isArray</span> = <span class="keyword">function</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arg) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查元素是否存在"><a href="#检查元素是否存在" class="headerlink" title="检查元素是否存在"></a>检查元素是否存在</h2><h3 id="原始值类型"><a href="#原始值类型" class="headerlink" title="原始值类型"></a>原始值类型</h3><ul><li>indexOf 元素存在，则返回索引，不存在则返回 -1</li><li>includes 元素存在返回 true，不存在返回 false</li></ul><p><code>indexOf</code> 浏览器兼容性要高于 <code>includes</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="number">0</span>))    <span class="comment">// -1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">indexOf</span>(<span class="string">&#x27;x&#x27;</span>))  <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">0</span>))   <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>))   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><ul><li>findIndex 返回数组中满足条件的第一个元素索引，未找到则返回 -1。</li><li>find 返回数组中满足条件的第一个元素值，未找到则返回 undefined。</li><li>some 检测数组中是否存在满足条件的元素，返回 Boolean 值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [&#123; <span class="attr">name</span>: <span class="string">&#x27;Mary&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Lily&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;Jack&#x27;</span> &#125;];</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">findIndex</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">&#x27;Lily&#x27;</span>))  <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">find</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">&#x27;Lily&#x27;</span>))       <span class="comment">// &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">some</span>(<span class="function"><span class="params">v</span> =&gt;</span> v.<span class="property">name</span> == <span class="string">&#x27;Lily&#x27;</span>))       <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="元素求和"><a href="#元素求和" class="headerlink" title="元素求和"></a>元素求和</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce">reduce方法</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>]</span><br><span class="line"><span class="keyword">let</span> sum = arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">s, e</span>) =&gt;</span>  s + e)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sum) <span class="comment">// 13</span></span><br></pre></td></tr></table></figure><h2 id="数组去重合并"><a href="#数组去重合并" class="headerlink" title="数组去重合并"></a>数组去重合并</h2><p>元素为简单数值，可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set">Set</a> 对象去重。</p><p>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。Set 对象是值的集合，我们可以按照插入的顺序迭代它的元素。Set 中的元素只会出现一次，即 Set 中的元素是唯一的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">6</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));             <span class="comment">// Set(4) &#123; 1, 2, 3, 6 &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr))); <span class="comment">// [ 1, 2, 3, 6 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">combine</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [].<span class="property">concat</span>.<span class="title function_">apply</span>([], <span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(arr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> m = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>], n = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">combine</span>(m, n)); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><ul><li>函数内的 arguments 是一个对应于传递给函数的参数的类数组对象。</li><li>apply 方法可以改变this指向。</li></ul><h2 id="多维数组扁平化"><a href="#多维数组扁平化" class="headerlink" title="多维数组扁平化"></a>多维数组扁平化</h2><h3 id="数组维度已知（flat方法）"><a href="#数组维度已知（flat方法）" class="headerlink" title="数组维度已知（flat方法）"></a>数组维度已知（flat方法）</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/flat">flat方法</a> 按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</p><p>语法：</p><blockquote><p>var newArray = arr.flat([depth])</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>())  <span class="comment">// [ 1, 2, 3, 4, [ 5, 6 ] ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>(<span class="number">2</span>)) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><h3 id="数组维度未知（递归）"><a href="#数组维度未知（递归）" class="headerlink" title="数组维度未知（递归）"></a>数组维度未知（递归）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [[<span class="number">1</span>,<span class="number">2</span>], [<span class="number">3</span>,<span class="number">4</span>], [[<span class="number">5</span>, <span class="number">6</span>]]]</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flattenArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> newArr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">      newArr = newArr.<span class="title function_">concat</span>(<span class="title function_">flattenArray</span>(arr[i]))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flattenArray</span>(arr)) <span class="comment">// [ 1, 2, 3, 4, 5, 6 ]</span></span><br></pre></td></tr></table></figure><h2 id="元素排序"><a href="#元素排序" class="headerlink" title="元素排序"></a>元素排序</h2><h3 id="sort-方法排序"><a href="#sort-方法排序" class="headerlink" title="sort 方法排序"></a>sort 方法排序</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array - sort</a></p><p>sort() 方法用原地算法对数组的元素进行排序，并返回数组。默认排序顺序是在将元素转换为字符串，然后比较它们的 UTF-16 代码单元值序列时构建的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">6</span>]</span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr) <span class="comment">// [ 1, 2, 3, 6, 9 ]</span></span><br></pre></td></tr></table></figure><h3 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h3><p><a href="/2022/07/27/JS-%E7%AE%97%E6%B3%95/">常见的排序算法</a></p><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">MDN - Array</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 深拷贝</title>
      <link href="/blog/2022/07/26/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/blog/2022/07/26/JS-%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h2><p>JavaScript 中变量是区分大小写的，并使用 Unicode 字符集。</p><p>在应用程序中使用变量作为值的符号名。JavaScript 变量名必须以字母、下划线（_）或者美元符号（$）开头，后续的字符也可以是数字（0-9）。</p><p>ECMAScript 标准定义了 8 种数据类型:</p><ul><li>7 种原始数据类型<ul><li>Boolean</li><li>null</li><li>undefined，undefined 表示变量未赋值时的属性</li><li>Number</li><li>String</li><li>BigInt，可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制</li><li>Symbol，ES6 新增类型，一种实例是唯一且不可改变的数据类型</li></ul></li><li>Object 类型</li></ul><p>变量按数据类型可分为两种：</p><ul><li>原始值，最简单的数值</li><li>引用值，由多个值构成的对象</li></ul><h2 id="实现对象深拷贝"><a href="#实现对象深拷贝" class="headerlink" title="实现对象深拷贝"></a>实现对象深拷贝</h2><p>浅拷贝会导致两个引用类型变量指向同一个内存地址，修改其中一个变量值，另外一个也会跟着改变。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">3</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a, b); <span class="comment">// 1 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> objA = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">let</span> objB = objA</span><br><span class="line">objB.<span class="property">x</span> = <span class="number">2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objA, objB); <span class="comment">// &#123; x: 2 &#125; &#123; x: 2 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="JSON序列化和反序列化"><a href="#JSON序列化和反序列化" class="headerlink" title="JSON序列化和反序列化"></a>JSON序列化和反序列化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lily = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;Lily&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);        <span class="comment">// People &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">sayHi</span>);  <span class="comment">// [Function: sayHi]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="literal">undefined</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">c</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">d</span>: <span class="string">&#x27;hello&#x27;</span>,</span><br><span class="line">  <span class="attr">e</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">f</span>: <span class="title class_">Symbol</span>(<span class="number">1</span>),</span><br><span class="line">  <span class="attr">g</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">  <span class="attr">h</span>: <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]),</span><br><span class="line">  <span class="attr">i</span>: <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>),</span><br><span class="line">  <span class="attr">j</span>: lily</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj);</span><br><span class="line"><span class="keyword">let</span> parseData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// &#123;&quot;b&quot;:null,&quot;c&quot;:1,&quot;d&quot;:&quot;hello&quot;,&quot;e&quot;:true,&quot;g&quot;:[1,2,3],&quot;h&quot;:&#123;&#125;,&quot;i&quot;:&#123;&#125;,&quot;j&quot;:&#123;&quot;name&quot;:&quot;Lily&quot;&#125;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parseData);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   b: null,</span></span><br><span class="line"><span class="comment">//   c: 1,</span></span><br><span class="line"><span class="comment">//   d: &#x27;hello&#x27;,</span></span><br><span class="line"><span class="comment">//   e: true,</span></span><br><span class="line"><span class="comment">//   g: [ 1, 2, 3 ],</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//   h: &#123;&#125;,</span></span><br><span class="line"><span class="comment">//   i: &#123;&#125;,</span></span><br><span class="line"><span class="comment">//   j: &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(parseData.<span class="property">j</span>.<span class="property">sayHi</span>);  <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>序列化后，Symbol、undefined 类型数据会丢失，class 实例会变成普通对象，实例方法丢失。<br>Set、Map 对象会变成空对象。</p><h3 id="for-in-和-for…of"><a href="#for-in-和-for…of" class="headerlink" title="for..in 和 for…of"></a>for..in 和 for…of</h3><p><code>for...in</code> 可以遍历对象的属性。for…in 语句以任意顺序迭代对象的可枚举属性。<br><code>for..of</code> 在可迭代对象上创建一个迭代循环，为每个不同属性执行语句。for…of 语句遍历可迭代对象定义要迭代的数据。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">1</span>, <span class="number">1</span>], <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>]), <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Mary&#x27;</span>)];</span><br><span class="line"><span class="keyword">let</span> newArr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  newArr.<span class="title function_">push</span>(item);</span><br><span class="line">&#125;</span><br><span class="line">newArr[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">newArr[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line">newArr[<span class="number">2</span>].<span class="title function_">add</span>(<span class="number">2</span>);</span><br><span class="line">newArr[<span class="number">3</span>].<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);     </span><br><span class="line"><span class="comment">// [ 1, [ 2, 1 ], Set(2) &#123; 1, 2 &#125;, Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;Lily&#x27; &#125; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);  </span><br><span class="line"><span class="comment">// [ 2, [ 2, 1 ], Set(2) &#123; 1, 2 &#125;, Map(1) &#123; &#x27;name&#x27; =&gt; &#x27;Lily&#x27; &#125; ]</span></span><br></pre></td></tr></table></figure><h3 id="拷贝实例属性和方法"><a href="#拷贝实例属性和方法" class="headerlink" title="拷贝实例属性和方法"></a>拷贝实例属性和方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">sayHi</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello, My name is &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; !&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> lily = <span class="keyword">new</span> <span class="title class_">People</span>(<span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);                       <span class="comment">// People &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">sayHi</span>);                 <span class="comment">// [Function: sayHi]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily.<span class="property">__proto__</span>.<span class="property">constructor</span>); <span class="comment">// [class People]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> lily);                <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接赋值拷贝</span></span><br><span class="line"><span class="keyword">let</span> mary = lily</span><br><span class="line">mary.<span class="property">name</span> = <span class="string">&#x27;Mary&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);  <span class="comment">// People &#123; name: &#x27;Mary&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mary);  <span class="comment">// People &#123; name: &#x27;Mary&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过实例获取构造函数，创建新的实例</span></span><br><span class="line"><span class="keyword">let</span> jack = <span class="keyword">new</span> lily.<span class="property">__proto__</span>.<span class="title function_">constructor</span>(<span class="params">lily.name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jack);  <span class="comment">// People &#123; name: &#x27;Mary&#x27; &#125;</span></span><br><span class="line">jack.<span class="property">name</span> = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(lily);  <span class="comment">// People &#123; name: &#x27;Mary&#x27; &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(jack);  <span class="comment">// People &#123; name: &#x27;Jack&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>实现普通对象、数组、Set 和 Map 对象数据深拷贝。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> source !== <span class="string">&#x27;object&#x27;</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (source == <span class="literal">null</span>) <span class="keyword">return</span> source;</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Set</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Set</span>(source);</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Map</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(source);</span><br><span class="line">  <span class="keyword">if</span> (source <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> newArr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> source) &#123;</span><br><span class="line">      <span class="keyword">let</span> tmp = <span class="title function_">deepClone</span>(item);</span><br><span class="line">      newArr.<span class="title function_">push</span>(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newArr;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (source.<span class="property">__proto__</span>.<span class="title function_">toString</span>() == <span class="string">&#x27;[object Object]&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 确保为普通对象，排除 WeakSet、WeakMap 等对象</span></span><br><span class="line">    <span class="keyword">let</span> newObj = &#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> source) &#123;</span><br><span class="line">      <span class="keyword">let</span> item = source[key];</span><br><span class="line">      newObj[key] = <span class="title function_">deepClone</span>(item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newObj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> source;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Grammar_and_types">MDN - 语法和数据类型</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of">MDN - for..in vs for…of</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web 开发问题集合</title>
      <link href="/blog/2022/07/26/web-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
      <url>/blog/2022/07/26/web-%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="禁止文本选中"><a href="#禁止文本选中" class="headerlink" title="禁止文本选中"></a>禁止文本选中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.forbid-select</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  -moz-user-select:none;      <span class="comment">/*火狐*/</span></span><br><span class="line">  -webkit-user-select:none;   <span class="comment">/*webkit浏览器*/</span></span><br><span class="line">  -ms-user-select:none;       <span class="comment">/*IE10*/</span></span><br><span class="line">  -khtml-user-select:none;    <span class="comment">/*早期浏览器*/</span></span><br><span class="line">  user-select:none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="设置滚动条样式"><a href="#设置滚动条样式" class="headerlink" title="设置滚动条样式"></a>设置滚动条样式</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* firefox scrollbar */</span></span><br><span class="line"><span class="selector-class">.custom-scrollbar</span> &#123;</span><br><span class="line">  <span class="attribute">scrollbar-color</span>: <span class="number">#aaa</span> <span class="number">#fafafa</span>;</span><br><span class="line">  <span class="attribute">scrollbar-width</span>: thin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom-scrollbar</span>::-webkit-scrollbar &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">6px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">6px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.custom-scrollbar</span>::-webkit-scrollbar-thumb &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#aaa</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="渲染小于-12px-的字体"><a href="#渲染小于-12px-的字体" class="headerlink" title="渲染小于 12px 的字体"></a>渲染小于 12px 的字体</h2><h3 id="使用-transform-scale"><a href="#使用-transform-scale" class="headerlink" title="使用 transform scale"></a>使用 transform scale</h3><p>语法：</p><blockquote><p>transfrom: scale(sx, sy)</p></blockquote><p>CSS <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">transform</a> 属性允许我们旋转，缩放，倾斜或平移指定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。<br>sx 为横向缩放倍数，sy 为纵向缩放倍数。sy 为空时，默认值为 sx。<br>transform 只能使用在块元素上，行内元素上使用无效。</p><p>使用 scale 缩小元素时，元素展示内容会缩小，但是在文档中占据的空间不变，这是因为 transform 只会引起重绘，不会引起重排，所以元素展示内容虽然缩小了，但是元素在文档流中的布局不会改变。</p><div class="box-scale">  <span class="txt">从点点滴滴点点滴滴，悬浮时缩小元素</span></div><style>  .box-scale {    background-color: pink;    display: inline-block;    margin-bottom: 6px;  }  .box-scale .txt {    background-color: orange;    display: inline-block;    font-size: 16px;  }  .box-scale .txt:hover {    transform: scale(0.8);  }</style>    <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-scale&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span>从点点滴滴点点滴滴，悬浮时缩小元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> <span class="selector-class">.txt</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-scale</span> <span class="selector-class">.txt</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.8</span>);</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-zoom"><a href="#使用-zoom" class="headerlink" title="使用 zoom"></a>使用 zoom</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/zoom">zoom</a> 是 CSS 里的一个非标准属性，用来控制元素放大倍数。不同于 transform:scale()，zoom 会影响元素布局。</p><div class="box-zoom">  <span class="txt">从点点滴滴点点滴滴，悬浮时缩小元素</span></div><style>  .box-zoom {    background-color: pink;    display: inline-block;    margin-bottom: 6px;  }  .box-zoom .txt {    background-color: orange;    display: inline-block;    font-size: 16px;  }  .box-zoom .txt:hover {    zoom: 0.8;    -ms-zoom: 0.8;  }</style><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-zoom&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;txt&quot;</span>&gt;</span>从点点滴滴点点滴滴，悬浮时缩小元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin-bottom</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> <span class="selector-class">.txt</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.box-zoom</span> <span class="selector-class">.txt</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">    zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css">    -ms-zoom: <span class="number">0.8</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="两者差异"><a href="#两者差异" class="headerlink" title="两者差异"></a>两者差异</h3><p>两者都可以用来放大缩小元素，差异点：</p><ul><li>transform scale 会引起重绘，不会引起重排；</li><li>zoom 会引起重排；</li><li>transform scale 浏览器兼容性高于 zoom，zoom 是非标准属性；</li><li>firefox 不支持 zoom 属性；</li></ul><h2 id="margin-重叠问题"><a href="#margin-重叠问题" class="headerlink" title="margin 重叠问题"></a>margin 重叠问题</h2><h3 id="什么情况下会出现重叠"><a href="#什么情况下会出现重叠" class="headerlink" title="什么情况下会出现重叠"></a>什么情况下会出现重叠</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Box_Model/Mastering_margin_collapsing">MDN - 外边距重叠</a></p><ul><li>同级的相邻元素</li><li>空的块元素，当一个块元素上边界margin-top 直接贴到元素下边界margin-bottom时也会发生边界折叠。</li><li>父元素和后代元素之间没有内容分隔</li></ul><h3 id="重叠原因"><a href="#重叠原因" class="headerlink" title="重叠原因"></a>重叠原因</h3><div class="box-wrap">  <div class="box-overlap">1</div>  <div class="box-overlap">2</div></div><style>  .box-wrap {    background-color: pink;    display: inline-block;  }  .box-overlap {    width: 50px;    height: 50px;    background-color: orange;    margin: 10px;  }</style><p>设置两个 div 元素，宽高均为 50px，margin 均为 10px，此时两个 div 之间的间距为 10px 而为 20px。<br>因为 <strong>margin 指的是元素自身从边框开始向外延伸的距离，只和自身有关</strong>，和其他元素无关。<br>上面两个元素 margin 值相同，margin 出现了重叠，所以间距为 10px。</p><h3 id="如何解决重叠问题"><a href="#如何解决重叠问题" class="headerlink" title="如何解决重叠问题"></a>如何解决重叠问题</h3><p>可以通过创建 BFC(Block Formatting Context，块格式化上下文) 来解决 margin 重叠问题。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context">BFC</a> 是 web 页面 CSS 渲染的一部分，它是一个独立的渲染区域，是块盒子布局过程发生的区域，也是浮动元素与其他元素交互的区域。BFC 有自己的渲染规则，不会影响到外部元素。</p><p>正常文档流，两个 div 纵向 margin 重叠解决方法：</p><ul><li>设置其中一个 div 样式 <code>display: inline-block</code>；</li><li>设置后一个 div 样式 <code>position: absolute</code> 或者 <code>position: fixed</code>；</li><li>设置后一个 div 样式 <code>float: left</code>；</li><li>设置父元素样式 <code>display: flex; flex-direction: column</code>；</li><li>设置父元素样式 <code>display: inline-grid</code>；</li></ul><!-- ## DOMContentLoaded VS onload --><h2 id="字体颜色渐变"><a href="#字体颜色渐变" class="headerlink" title="字体颜色渐变"></a>字体颜色渐变</h2><ul><li>background-image: linear-gradient() 设置渐变背景</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/background-clip">background-clip</a> 设置元素的背景是否扩展到其边框、填充框或内容框的下方。</li><li><a href="">-webkit-text-fill-color</a></li><li><style>.box-font-color {font-size: 28px;font-weight: 500;}.box-font-color div {background-image: linear-gradient(blue, red);background-clip: text;-webkit-background-clip: text;/* -webkit-text-fill-color: transparent; */color: transparent;}</style><div class="box-font-color"><div>从上到下渐变</div></div></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-font-color</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-size</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"><span class="selector-class">.box-font-color</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(blue, red);</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background-clip</span>: text;</span></span><br><span class="line"><span class="language-css">  -webkit-<span class="attribute">background-clip</span>: text;</span></span><br><span class="line"><span class="language-css">  -webkit-text-fill-<span class="attribute">color</span>: transparent;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box-font-color&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>从上到下渐变<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/blog/2022/07/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/blog/2022/07/26/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h2><p>正则表达式是用来匹配字符串中字符组合的模式。在 JS 中，正则表达式也是对象。</p><ul><li><p>正则表达式字面量</p><p>  使用两个斜杠包含匹配模式。</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/ab+c/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li><li><p>正则表达式对象</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;ab+c&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;ab&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="正则表达式特殊字符"><a href="#正则表达式特殊字符" class="headerlink" title="正则表达式特殊字符"></a>正则表达式特殊字符</h2><ul><li><code>^</code> 从字符串起始位置开始匹配</li><li><code>$</code> 匹配到字符串的结束位置</li><li><code>*</code> 匹配前一个表达式0次或多次，等同于 <code>&#123;0,&#125;</code></li><li><code>+</code> 匹配前一个表达式1次或多次，等同于 <code>&#123;1,&#125;</code></li><li><code>?</code> 匹配前一个表达式0次或1次，等同于 <code>&#123;0,1&#125;</code></li><li><code>.</code> 小数点，默认匹配除换行符之外的任何单个字符</li><li><code>x|y</code> 匹配 x 或 y</li><li><code>&#123;n&#125;</code> n 是一个正整数，匹配了前面一个字符刚好出现了 n 次</li><li><code>&#123;n,&#125;</code> n 是一个正整数，匹配前一个字符至少出现了 n 次</li><li><code>&#123;n,m&#125;</code> n 和 m 都是整数。匹配前面的字符至少 n 次，最多 m 次。如果 n 或者 m 的值是 0， 这个值被忽略</li><li><code>[xyz]</code> 一个字符集合。匹配方括号中的任意字符</li><li><code>[^xyz]</code> 一个反向字符集。它匹配任何没有包含在方括号中的字符</li><li><code>\d</code> 匹配一个数字。等价于 [0-9]</li><li><code>\D</code> 匹配一个非数字字符。等价于 [^0-9]</li><li><code>\s</code> 匹配一个空白字符，包括空格、制表符、换页符和换行符</li><li><code>\S</code> 匹配一个非空白字符</li><li><code>\w</code> 匹配一个单字字符（字母、数字或者下划线）。等价于 [A-Za-z0-9_]</li><li><code>\W</code> 匹配一个非单字字符。等价于 [^A-Za-z0-9_]</li><li><code>\W</code> 匹配一个非单字字符。等价于 [^A-Za-z0-9_]</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a/</span>.<span class="title function_">test</span>(<span class="string">&#x27;123abc&#x27;</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/^a/</span>.<span class="title function_">test</span>(<span class="string">&#x27;123abc&#x27;</span>)) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="regexp">/a$/</span>.<span class="title function_">test</span>(<span class="string">&#x27;123abc&#x27;</span>)) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h2 id="RegExp-对象"><a href="#RegExp-对象" class="headerlink" title="RegExp 对象"></a>RegExp 对象</h2><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul><li><code>lastIndex</code> 开始下一个匹配的起始索引值。（这个属性只有在使用 g 参数时可用在通过参数进行高级搜索)</li><li><code>source</code> 模式文本</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">lastIndex</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="property">source</span>)    <span class="comment">// abc</span></span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">exec</td><td align="left">一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组，未匹配到则返回 null。</td></tr><tr><td align="left">test</td><td align="left">一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。</td></tr><tr><td align="left">match</td><td align="left">一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。</td></tr><tr><td align="left">matchAll</td><td align="left">一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</td></tr><tr><td align="left">search</td><td align="left">一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td align="left">replace</td><td align="left">一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td align="left">split</td><td align="left">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</td></tr></tbody></table><h3 id="正则表达式标志"><a href="#正则表达式标志" class="headerlink" title="正则表达式标志"></a>正则表达式标志</h3><table><thead><tr><th align="left">标志</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">g</td><td align="left">全局搜索。</td></tr><tr><td align="left">i</td><td align="left">不区分大小写搜索。</td></tr><tr><td align="left">m</td><td align="left">多行搜索。</td></tr><tr><td align="left">s</td><td align="left">允许 . 匹配换行符。</td></tr><tr><td align="left">u</td><td align="left">使用 unicode 码的模式进行匹配。</td></tr><tr><td align="left">y</td><td align="left">执行“粘性 (sticky)”搜索，匹配从目标字符串的当前位置开始。</td></tr></tbody></table><h2 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h2><h3 id="标志"><a href="#标志" class="headerlink" title="标志"></a>标志</h3><ul><li><p>全局搜索</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(<span class="string">&#x27;abc123abc&#x27;</span>)) </span><br><span class="line"><span class="comment">// [ &#x27;abc&#x27;, index: 0, input: &#x27;abc123abc&#x27;, groups: undefined ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">exec</span>(<span class="string">&#x27;abc123abc&#x27;</span>)) </span><br><span class="line"><span class="comment">// [ &#x27;abc&#x27;, index: 6, input: &#x27;abc123abc&#x27;, groups: undefined ]</span></span><br></pre></td></tr></table></figure></li><li><p>是否区分大小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;Abc&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;Abc&#x27;</span>, <span class="string">&#x27;i&#x27;</span>) <span class="comment">// 不区分大小写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(reg2.<span class="title function_">test</span>(<span class="string">&#x27;abc&#x27;</span>))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在设置了 global 或 sticky 标志位的情况下（如 /foo/g or /foo/y），JavaScript RegExp 对象是有状态的。他们会将上次成功匹配后的位置记录在 lastIndex 属性中。使用此特性，exec() 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配）。</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;a123a456a789a&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, index: 0, input: &#x27;a123a456a789a&#x27;, groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;a123a456a789a&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, index: 4, input: &#x27;a123a456a789a&#x27;, groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;a123a456a789a&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, index: 8, input: &#x27;a123a456a789a&#x27;, groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;a123a456a789a&#x27;</span>) <span class="comment">// [&#x27;a&#x27;, index: 12, input: &#x27;a123a456a789a&#x27;, groups: undefined]</span></span><br><span class="line">reg.<span class="title function_">exec</span>(<span class="string">&#x27;a123a456a789a&#x27;</span>) <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;\\d+&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> reg2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;[a-z]+&#x27;</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;12abc345ef67xyz9&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg))   <span class="comment">// [ &#x27;12&#x27;, &#x27;345&#x27;, &#x27;67&#x27;, &#x27;9&#x27; ]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">match</span>(reg2))  <span class="comment">// [ &#x27;abc&#x27;, &#x27;ef&#x27;, &#x27;xyz&#x27; ]</span></span><br></pre></td></tr></table></figure><h3 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;123abc456abc7890&#x27;</span></span><br><span class="line"><span class="keyword">let</span> res = str.<span class="title function_">replace</span>(<span class="regexp">/abc/</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> res2 = str.<span class="title function_">replace</span>(<span class="regexp">/abc/g</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res)   <span class="comment">// 123xyz456abc7890</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(res2)  <span class="comment">// 123xyz456xyz7890</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str)   <span class="comment">// 123abc456abc7890</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 字符串匹配替换</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; match 匹配的子串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; p1 第一个括号([a-z]+)匹配的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; p2 第二个括号(\d+)匹配的字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; offset 匹配到的字符串在原字符串中偏移量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; string 被匹配的原字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> 替换匹配内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">replacer</span>(<span class="params">match, p1, p2, offset, string</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(match);     <span class="comment">// abc12345</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p1);        <span class="comment">// abc</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p2);        <span class="comment">// 12345</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(offset);    <span class="comment">// 1</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(string);    <span class="comment">// #abc12345@@</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`*<span class="subst">$&#123;p1&#125;</span>*<span class="subst">$&#123;p2&#125;</span>*`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> newString = <span class="string">&#x27;#abc12345@@&#x27;</span>.<span class="title function_">replace</span>(<span class="regexp">/([a-z]+)(\d+)/</span>, replacer);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newString); <span class="comment">// #*abc*12345*@@</span></span><br></pre></td></tr></table></figure><h2 id="常用匹配规则"><a href="#常用匹配规则" class="headerlink" title="常用匹配规则"></a>常用匹配规则</h2><h3 id="手机号"><a href="#手机号" class="headerlink" title="手机号"></a>手机号</h3><p><code>/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</code></p><h3 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h3><p><code>/^[A-Za-z0-9]+([_\.][A-Za-z0-9]+)*@([A-Za-z0-9\-]+\.)+[A-Za-z]&#123;2,6&#125;$/</code></p><!-- var emailArr = ['1234@qq.com', 'wang@126.com', 'wang123@126.com', 'wang123@vip.163.com', 'wang_email@outlook.com', 'wang.email@gmail.com']; --><h3 id="身份证号码"><a href="#身份证号码" class="headerlink" title="身份证号码"></a>身份证号码</h3><p><a href="https://www.fadada.com/notice/detail-1865.html">身份证号码含义</a></p><table><thead><tr><th align="left">匹配模式</th><th align="left">匹配内容</th></tr></thead><tbody><tr><td align="left">[1-9]\d{5}</td><td align="left">6位地区编码</td></tr><tr><td align="left">[1-9]\d(3)</td><td align="left">4位年份</td></tr><tr><td align="left">((0\d)</td><td align="left">(1[0-2]))</td></tr><tr><td align="left">(([0</td><td align="left">1</td></tr><tr><td align="left">\d{3}[0-9Xx]</td><td align="left">4位校验码</td></tr></tbody></table><p><code>/^[1-9]\d&#123;5&#125;[1-9]\d&#123;3&#125;((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d&#123;3&#125;[0-9Xx]$/</code></p><h3 id="http或https链接"><a href="#http或https链接" class="headerlink" title="http或https链接"></a>http或https链接</h3><ul><li><code>/(http|https):\/\/([\w.]+\/?)\S*/</code></li><li><code>/http[s]&#123;0,1&#125;:\/\/([\w.]+\/?)\S*/</code></li></ul><h3 id="匹配数字"><a href="#匹配数字" class="headerlink" title="匹配数字"></a>匹配数字</h3><ul><li>0到100数字， <code>/^([1-9]?\d|100)$/</code></li><li>匹配0和非0开头数字， <code>/^(0|[1-9][0-9]*)$/</code></li></ul><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><ul><li>[MDN - Regular_Expressions]（<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></li><li><a href="https://github.com/aykutkardas/regexlearn.com">github - regexlearn</a></li><li><a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html">表达式全集</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 创建请求</title>
      <link href="/blog/2022/07/20/JS-%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82/"/>
      <url>/blog/2022/07/20/JS-%E5%88%9B%E5%BB%BA%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><p>XMLHttpRequest 是用来与服务器进行交换的对象，可以使网页局部更新而不用中断用户当前行为。</p><p>使用方法：</p><ul><li>初始化一个 XMLHttpRequest 对象实例</li><li>在实例上添加事件，监听请求状态变化</li><li>设置请求头，响应类型</li><li>调用 open() 方法初始化请求</li><li>调用 send() 方法发送请求</li></ul><p><strong>创建 get 请求</strong></p><p><button type="button" class="btn btn-primary" onclick="handleClick()">send request</button></p><script>function handleClick() {  let req = new XMLHttpRequest()  req.onreadystatechange = e => {    let { readyState, status, response } = req    // readyState 4 表示请求完成，status 表示请求成功    if (readyState == 4 && status == 200) {        console.log('response: ', typeof response, response)    }  }  req.responseType = 'json' // 服务端返回数据格式为 json  req.open('get', 'https://jsonplaceholder.typicode.com/users')  req.send()}</script><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick()&quot;</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> req = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span></span><br><span class="line"><span class="language-javascript">    req.<span class="property">onreadystatechange</span> = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> &#123; readyState, status, response &#125; = req</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// readyState 4 表示请求完成，status 表示请求成功</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (readyState == <span class="number">4</span> &amp;&amp; status == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;response: &#x27;</span>, <span class="keyword">typeof</span> response, response)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    req.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span> <span class="comment">// 服务端返回数据格式为 json</span></span></span><br><span class="line"><span class="language-javascript">    req.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    req.<span class="title function_">send</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- ### 属性- readyState### 事件 --><h2 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick2()&quot;</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick2</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fetch</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!response.<span class="property">ok</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`HTTP error! Status: <span class="subst">$&#123;response.status&#125;</span>`</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> response.<span class="title function_">json</span>();</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, response)</span></span><br><span class="line"><span class="language-javascript">      &#125;);</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h2><p>axios 是一个基于 promise 的 HTTP 客户端，可用于浏览器和 Node.js</p><p><strong>特性</strong></p><ul><li>在浏览器中使用 XMLHttpRequest</li><li>在 node.js 中使用 http requests</li><li>支持 promise api</li><li>可以拦截请求和响应</li><li>可以转换请求和响应数据</li><li>可以取消请求</li><li>自动转换为 json 数据</li><li>存在 multipart/form-data 和 x-www-form-urlencoded时，自动将数据对象序列化</li><li>客户端支持防止XSRF</li></ul><div>  <button type="button" class="btn btn-primary" onclick="handleClick3()">send request</button>  <button type="button" class="btn btn-primary" onclick="handleClick4()">query city list</button></div><script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script><script>  function handleClick3() {    axios.get('https://jsonplaceholder.typicode.com/users').then(res => {      if (res.status == 200) {        console.log('res', res.data)      }    }).catch(err => {      console.err(err)    })  }  function handleClick4() {    axios      .get('/extra/area.json', {        responseType: 'json',      })      .then((res) => console.log(res.data?.data))      .catch((err) => console.error(err));  }</script></br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick3()&quot;</span>&gt;</span>send request<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">class</span>=<span class="string">&quot;btn btn-primary&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;handleClick4()&quot;</span>&gt;</span>query city list<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick3</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    axios.<span class="title function_">get</span>(<span class="string">&#x27;https://jsonplaceholder.typicode.com/users&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (res.<span class="property">status</span> == <span class="number">200</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;res&#x27;</span>, res.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">err</span>(err)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">handleClick4</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    axios</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">get</span>(<span class="string">&#x27;/extra/area.json&#x27;</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">responseType</span>: <span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>?.<span class="property">data</span>))</span></span><br><span class="line"><span class="language-javascript">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(err));</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h2><ul><li><a href="">JSONPlaceholder - Free Fake REST API</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest">MDN - XMLHttpRequest</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">MDN - Fetch API</a></li><li><a href="https://github.com/axios/axios">github - Axios</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 获取图片、视频尺寸大小</title>
      <link href="/blog/2022/07/19/JS-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E5%B0%BA%E5%AF%B8%E5%A4%A7%E5%B0%8F/"/>
      <url>/blog/2022/07/19/JS-%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E3%80%81%E8%A7%86%E9%A2%91%E5%B0%BA%E5%AF%B8%E5%A4%A7%E5%B0%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="获取图片原始尺寸大小"><a href="#获取图片原始尺寸大小" class="headerlink" title="获取图片原始尺寸大小"></a>获取图片原始尺寸大小</h2><img src="/blog/resources/img/cat/0.jpeg" width="200"/><h3 id="使用-img-标签获取"><a href="#使用-img-标签获取" class="headerlink" title="使用 img 标签获取"></a>使用 img 标签获取</h3><p>使用 <code>img</code> 标签加载图片后，通过获取该元素的 <code>naturalWidth</code>、<code>naturalHeight</code> 属性可以得到原始图片尺寸，width 和 height 属性是图片渲染尺寸。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> img = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> &#123; width, height, naturalWidth, naturalHeight &#125; = img;</span><br><span class="line">  <span class="comment">// 图片原始尺寸</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(naturalWidth, naturalHeight); <span class="comment">// 640 427</span></span><br><span class="line">  <span class="comment">// 图片渲染尺寸</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(width, height); <span class="comment">// 300 200</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="使用-Image-构造函数获取"><a href="#使用-Image-构造函数获取" class="headerlink" title="使用 Image 构造函数获取"></a>使用 Image 构造函数获取</h3><p><code>Image()</code> 构造函数可以创建一个 img 元素实例，在功能上它等同于 <code>document.createElement(&#39;img&#39;)</code>.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">img.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">&#123; target &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">width</span>, target.<span class="property">height</span>); <span class="comment">// 640 427</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(target.<span class="property">naturalWidth</span>, target.<span class="property">naturalHeight</span>); <span class="comment">// 640 427</span></span><br><span class="line">&#125;</span><br><span class="line">img.<span class="property">src</span> = <span class="string">&#x27;../source/blog/resources/img/cat/0.jpeg&#x27;</span></span><br></pre></td></tr></table></figure><p>因为元素实例尚未添加到文档中，所有 width，height 属性值为原始值。</p><h2 id="获取视频原始尺寸大小"><a href="#获取视频原始尺寸大小" class="headerlink" title="获取视频原始尺寸大小"></a>获取视频原始尺寸大小</h2><p>使用 video 标签来加载视频文件，通过设置数据加载事件监听来获取数据。</p><ul><li><code>loadedmetadata</code> 事件，视频元数据被加载后触发，此时可以从 <code>videoWidth</code>，<code>videoHeight</code> 属性中可以获取视频原始尺寸。</li><li><code>loadeddata</code> 事件，视频首帧加载完成后触发。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/video/flower.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadedmetadata&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// The metadata has been loaded.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;meta data loaded&#x27;</span>, e);</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">target</span>.<span class="property">videoWidth</span>, e.<span class="property">target</span>.<span class="property">videoHeight</span>); <span class="comment">// 960 540</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadeddata&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// The first frame of the media has finished loading.</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;first frame loaded&#x27;</span>, e);</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="获取视频首帧画面"><a href="#获取视频首帧画面" class="headerlink" title="获取视频首帧画面"></a>获取视频首帧画面</h2><ul><li>添加并获取 video 元素，添加 loadeddata 事件监听</li><li>添加并获取 canvas 元素，loadeddata 事件触发后获取 video 尺寸用来设置 canvas 画布大小</li><li>使用 <code>drawImage</code> 方法绘制首帧画面内容</li><li>使用 <code>toDataURL</code> 方法将canvas画布内容转换成 base64 字符串</li></ul><p><video preload controls width="300" src="/blog/resources/video/flower.mp4"></video><br><canvas></canvas></p><script>  window.addEventListener('DOMContentLoaded', function() {    let video = document.querySelector('video')    video.addEventListener('loadeddata', function(e) {      const { videoWidth, videoHeight } = e.target            let canvas = document.querySelector('canvas')      let ctx = canvas.getContext('2d')       // 设置画布大小      canvas.width = videoWidth      canvas.height = videoHeight      // 设置渲染宽度      canvas.style.width = '200px'      ctx.drawImage(video, 0, 0, videoWidth, videoHeight)      // img to base64      let url = canvas.toDataURL('image/png')    })  })</script><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">preload</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;300&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/blog/resources/video/flower.mp4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    video.<span class="title function_">addEventListener</span>(<span class="string">&#x27;loadeddata&#x27;</span>, <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> &#123; videoWidth, videoHeight &#125; = e.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;canvas&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&#x27;2d&#x27;</span>) </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置画布大小</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">width</span> = videoWidth</span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">height</span> = videoHeight</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 设置渲染宽度</span></span></span><br><span class="line"><span class="language-javascript">      canvas.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&#x27;200px&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      ctx.<span class="title function_">drawImage</span>(video, <span class="number">0</span>, <span class="number">0</span>, videoWidth, videoHeight)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// img to base64</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> url = canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLImageElement/Image">MDN - Image</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API">MDN - Canvas API</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/CanvasRenderingContext2D">MDN - CanvasRenderingContext2D</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement/toDataURL">MDN - toDataURL</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Position</title>
      <link href="/blog/2022/07/18/CSS-Position/"/>
      <url>/blog/2022/07/18/CSS-Position/</url>
      
        <content type="html"><![CDATA[<h2 id="默认文档流"><a href="#默认文档流" class="headerlink" title="默认文档流"></a>默认文档流</h2><p>默认文档流 或者 正常文档流，normal flow， 是指在不改变元素的情况下，元素在文档中默认的布局方式（元素的框高、位置）。</p><p>网页文档中的元素是从上到下排列的，根据默认排列方式可以分为<code>块级元素</code>和<code>内联元素</code>。</p><p><strong>块级元素</strong></p><ul><li>默认情况下，块级元素宽度占父元素宽度100%，块级元素高度由其内容填充。</li><li>可以通过设置width、height熟悉来设置内容区域展示大小， 即使设置了内容宽度，块级元素始终占据父元素一行位置。</li><li>可以有效设置margin、padding属性值。</li></ul><p>常用的块级元素有：<code>div</code>，<code>p</code>，<code>ul</code>，<code>ol</code>，<code>li</code>，<code>section</code></p><p><strong>内联元素</strong></p><ul><li>默认情况下，内联元素的宽高和其内容占据的宽高一致，不占据一行，多个元素可以同时排列在同一行。</li><li>设置width、height属性值无效。</li><li>margin属性值水平方向设置有效，垂直方向设置无效。</li><li>可以有效设置padding属性值，设置垂直方式padding，会出现和其他元素重叠。</li></ul><p>常用的块级元素有：<code>span</code>，<code>a</code>，<code>i</code></p><p><strong>块级元素和内联元素转换</strong></p><p>可以通过设置display属性值为：<code>inline</code>、<code>inline-block</code>、<code>block</code>来切换元素展示方式。</br><br>设置为 <code>inline-block</code> 时，元素同时兼具块级元素和内联元素特性：多个元素可以同时排列在同一行，且可以有效设置 width、height、margin、padding属性值。</p><h2 id="position-属性"><a href="#position-属性" class="headerlink" title="position 属性"></a>position 属性</h2><p>css 中的 position 属性用来指定元素在文档中的定位方式。在设置定位方式后，通过设置<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>属性值来设置偏移量，最终决定元素位置。</p><p>语法：</p><blockquote><p>position: static | fixed | sticky | relative | absolute</p></blockquote><h3 id="static（默认定位）"><a href="#static（默认定位）" class="headerlink" title="static（默认定位）"></a>static（默认定位）</h3><p>元素使用正常（默认）的布局行为，此时 top、right、bottom、left 和 z-index 属性无效。</p><h3 id="relative（相对自身定位）"><a href="#relative（相对自身定位）" class="headerlink" title="relative（相对自身定位）"></a>relative（相对自身定位）</h3><p>元素会先使用正常文档流进行定位。在设置元素偏移量后会相对自身位置进行偏移。</p><h3 id="absolute（相对祖先定位）"><a href="#absolute（相对祖先定位）" class="headerlink" title="absolute（相对祖先定位）"></a>absolute（相对祖先定位）</h3><p>元素会被移出正常文档流，在设置元素偏移量后，元素会相对最近的非 <code>static</code> 祖先元素进行偏移，默认相对 html 元素定位。</p><h3 id="fixed（相对视窗定位）"><a href="#fixed（相对视窗定位）" class="headerlink" title="fixed（相对视窗定位）"></a>fixed（相对视窗定位）</h3><p>元素会被移出正常文档流，在设置元素偏移量后，元素会相对于屏幕视口（viewport）的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。</p><p><strong>当元素祖先的 <code>transform</code>, <code>perspective</code> 或 <code>filter</code> 属性非 none 时，容器由视口改为该祖先。</strong></p><h3 id="sticky"><a href="#sticky" class="headerlink" title="sticky"></a>sticky</h3><p>该值总是创建一个新的层叠上下文（stacking context）。</p><p>元素使用正常文档流进行定位，会保留在正常文档流中占据的空间。在设置元素偏移量后，会相对它的<strong>最近滚动祖先元素</strong>或<strong>最近块级元素</strong>进行偏移。偏移值不会影响任何其他元素的位置。该元素会固定在祖先元素上。</p><p>当祖先元素的 overflow 为 hidden，scroll，auto 或 overlay 时，可以抑制 sticky 行为。</p><h2 id="定位类型"><a href="#定位类型" class="headerlink" title="定位类型"></a>定位类型</h2><ul><li>相对定位：position 属性值为 relative 的元素。</li><li>绝对定位：position 属性值为 absolute 和 fixed 的元素。</li><li>粘性定位：position 属性值为 sticky 的元素。</li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position">MDN - CSS Position</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 形状绘制</title>
      <link href="/blog/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/"/>
      <url>/blog/2022/05/24/CSS-%E5%BD%A2%E7%8A%B6%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="三角形绘制原理"><a href="#三角形绘制原理" class="headerlink" title="三角形绘制原理"></a>三角形绘制原理</h2><p>绘制原理：设置元素宽高均为 0，通过设置边框 border 来绘制三角形。</p><p><strong>step1: css border 绘制宽为 100px 的正方形，每个边框设置不同颜色</strong></p><style>.triangle1 {  margin-bottom: 16px;  width: 0;  height: 0;  /* 设置单个边框大小为50px */  border: 50px solid;  /* 按照 上右下左 顺序设置边框颜色 */  border-color: red orange yellow green;}</style><div class="triangle1"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="comment">/* 设置单个边框大小为50px */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="comment">/* 按照 上右下左 顺序设置边框颜色 */</span></span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step2: 保留一个边框颜色，其他三个边框设置透明</strong></p><p>这样可以绘制一个箭头向下的三角形，但是元素实际占用尺寸比显示的要多。</p><style>.triangle2 {  margin-bottom: 16px;  width: 0;  height: 0;  border: 50px solid;  border-color: red transparent transparent transparent;  background-color: #f5f5f5;}</style><div class="triangle2"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle2</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">50px</span> solid;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>step3: 分别设置边框大小，使绘制的图形占用尺寸最小</strong></p><p>分别设置左、上、右边框大小为 50px, 再设置左右边框颜色透明。</p><style>.triangle3-1 {  display: inline-block;  margin-bottom: 16px;  margin-right: 16px;  background-color: #f5f5f5;  width: 0;  height: 0;  border-style: solid;  border-top-width: 50px;   border-right-width: 50px;  border-left-width: 50px;  border-color: red orange yellow green;}.triangle3-2 {  border-color: red transparent transparent transparent;}.triangle3-3 {  border-left-width: 30px;  border-right-width: 30px;  border-color: red transparent transparent transparent;}</style><div class="triangle3-1"></div><div class="triangle3-1 triangle3-2"></div><div class="triangle3-1 triangle3-3"></div><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.triangle3-1</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border-style</span>: solid;</span><br><span class="line">  <span class="attribute">border-top-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red orange yellow green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3-2</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.triangle3-3</span> &#123;</span><br><span class="line">  <span class="attribute">border-left-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-right-width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">border-color</span>: red transparent transparent transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS 操作符和表达式</title>
      <link href="/blog/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/blog/2022/03/08/JS-%E6%93%8D%E4%BD%9C%E7%AC%A6%E5%92%8C%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="数值分割符-1-0000-0000"><a href="#数值分割符-1-0000-0000" class="headerlink" title="数值分割符 (1_0000_0000)"></a>数值分割符 (1_0000_0000)</h2><p>ES2021 引入数值分隔符<code>_</code>, 在数值之间提供分隔，使一个长数值读起来更容易。十进制，十进制小数部分，二进制，十六进制都可以使用分隔符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 十进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000</span>) <span class="comment">// 1万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0_0000</span>) <span class="comment">// 10万</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_0000_0000</span>) <span class="comment">// 1亿</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1_1_1</span>) <span class="comment">// 111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11_1</span>) <span class="comment">// 111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 小数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_1_1</span>) <span class="comment">// 0.111</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1_11</span>) <span class="comment">// 0.111</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0x1_1</span>) <span class="comment">// 0x11</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 二进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0b1_1</span>) <span class="comment">// 0b11</span></span><br></pre></td></tr></table></figure><h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Comma_Operator">逗号操作符</a> 对它的每个操作数求值（从左到右），并返回最后一个操作数的值。</p><p>example1:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = (a, b)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">c = (c++, c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h2 id="可选链接操作符"><a href="#可选链接操作符" class="headerlink" title="可选链接操作符 (?.)"></a>可选链接操作符 (?.)</h2><p>可选链操作符 <code>?.</code> 允许读取位于连接对象链深处的属性的值，而不必验证链中的每个引用是否有效。<code>?.</code> 操作符的功能类似于 <code>.</code> 链式操作符，不同之处在于，在引用为 <code>null</code> 或者 <code>undefined</code> 的情况下不会引起错误，该表达式短路返回值是 <code>undefined。</code></p><h2 id="逻辑无效赋值"><a href="#逻辑无效赋值" class="headerlink" title="逻辑无效赋值 (??=)"></a>逻辑无效赋值 (??=)</h2><pre><code>expr1 ?? expr2</code></pre><p>当 expr1 值为 null 或 undefined 时，返回 expr2 的值，否则返回 expr1 的值。</p><p>  <code>x ??= y</code> 等价于 <code>x ?? (x=y)</code></p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line">obj.<span class="property">a</span> ??= <span class="number">2</span></span><br><span class="line">obj.<span class="property">b</span> ??= <span class="number">6</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">a</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">b</span>) <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><h2 id="静态和私有方法-属性"><a href="#静态和私有方法-属性" class="headerlink" title="静态和私有方法/属性"></a>静态和私有方法/属性</h2><p>在一个类里面可以给属性前面添加 <code>#</code> 符号来标记为私有，<code>getter/setter</code> 也可以标记为私有，私有的方法和属性只有在类的内部可以访问。</p><p>添加前缀 <code>static</code> 可以设置静态的方法和属性，它们只能通过类本身来访问。</p><p>example:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Man</span> &#123;</span><br><span class="line">  #age = <span class="number">18</span> <span class="comment">// 私有属性，只能在类的内部访问，不能通过类的实例访问</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> sex = <span class="string">&#x27;male&#x27;</span> <span class="comment">// 静态属性，只能通过类本身访问，不能通过类的实例访问</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, sex, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">    <span class="variable language_">this</span>.#age = age</span><br><span class="line">    <span class="title class_">Man</span>.<span class="property">sex</span> = sex</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Man</span>(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>) <span class="comment">// [class Man] &#123; age: 25 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Man</span>.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance) <span class="comment">// Man &#123; name: &#x27;Lily&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">age</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance.<span class="property">sex</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="链式赋值"><a href="#链式赋值" class="headerlink" title="链式赋值"></a>链式赋值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = b = c = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>执行过程：</p><ul><li>表达式从左向右执行，先给 <code>a</code> 赋值 <code>b</code></li><li>JS 引擎会在作用于链寻找 <code>b</code>，<code>b = c</code> 是一个赋值表达式</li><li>继续在作用域链里寻找 <code>c</code>，<code>c = 1</code>即 <code>c</code> 被赋值为1</li><li>最后 <code>b</code> 和 <code>a</code> 依次被赋值为 1</li></ul><h2 id="连续箭头函数"><a href="#连续箭头函数" class="headerlink" title="连续箭头函数"></a>连续箭头函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b + c</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将函数 <code>add</code> 柯里化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add_curry</span>(<span class="params">a</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">c</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> a + b + c</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>add_curry</code> 函数返回值为函数，所以它是一个高阶函数。</p><p>ES6 写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add_curry_es6</span> = a =&gt; <span class="function"><span class="params">b</span> =&gt;</span> <span class="function"><span class="params">c</span> =&gt;</span> (a + b + c)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add_curry_es6</span>(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>)) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>在数学和计算机科学中，高阶函数指的是一个函数至少满足下列一个条件：</p><ul><li>接收一个或多个函数作为参数</li><li>返回一个函数作为它的结果</li></ul><h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>柯里化是一种函数的转换，是把接受多个参数的函数转换成接收一个单一参数的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p><p>柯里化又称部分求值。一个currying函数首先会接收一些参数，接受了这些参数之后，该函数并不会立即求值，而是继续返回另一个函数，刚才传入的参数在函数形式的闭包中被保存起来。待到函数真正需要求值的时候，之前传入的所以参数都会被一次性用于求值。</p><p>柯里化要求函数具有固定数量的参数。<br>根据定义，柯里化应该将 sum(a, b, c) 转换为 sum(a)(b)(c)。</p><h3 id="柯里化函数的用途"><a href="#柯里化函数的用途" class="headerlink" title="柯里化函数的用途"></a>柯里化函数的用途</h3><ul><li>可以惰性求值</li><li>可以提取传递部分参数</li></ul><p>n 个连续箭头组成的函数实际上就是柯里化了 n - 1次。</p><p>具体调用过程如下：</p><p>前 n - 1 次调用，其实是提前将参数传递进去，并没有调用最内层函数体，最后一次调用才会调用最内层函数体，并返回最内层函数体的返回值。所以连续箭头函数就是多次柯里化函数的 es6 写法。</p><p>参考：</p><ul><li><a href="https://juejin.cn/post/6844903857777016845">https://juejin.cn/post/6844903857777016845</a></li><li><a href="https://zh.javascript.info/currying-partials">https://zh.javascript.info/currying-partials</a></li><li><a href="https://juejin.cn/post/6969016993215152136">https://juejin.cn/post/6969016993215152136</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 常用命令和操作</title>
      <link href="/blog/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/"/>
      <url>/blog/2022/03/08/Git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="Config-Account"><a href="#Config-Account" class="headerlink" title="Config Account"></a>Config Account</h2><h3 id="查询账号、邮箱"><a href="#查询账号、邮箱" class="headerlink" title="查询账号、邮箱"></a>查询账号、邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line"></span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><h3 id="设置账号、邮箱"><a href="#设置账号、邮箱" class="headerlink" title="设置账号、邮箱"></a>设置账号、邮箱</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;name&quot;</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">&quot;email address&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Generate-SSH-key"><a href="#Generate-SSH-key" class="headerlink" title="Generate SSH key"></a>Generate SSH key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ED25519</span></span><br><span class="line">ssh-keygen -t ed25519 -C <span class="string">&quot;email address&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2048-bit RSA</span></span><br><span class="line">ssh-keygen -t rsa -b 2048 -C <span class="string">&quot;email address&quot;</span></span><br></pre></td></tr></table></figure><h2 id="Git-branch"><a href="#Git-branch" class="headerlink" title="Git branch"></a>Git branch</h2><h3 id="查询分支"><a href="#查询分支" class="headerlink" title="查询分支"></a>查询分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询本地所有分支</span></span><br><span class="line">git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询所有分支（本地+remote）</span></span><br><span class="line">git branch -a</span><br></pre></td></tr></table></figure><h3 id="创建分支、切换分支"><a href="#创建分支、切换分支" class="headerlink" title="创建分支、切换分支"></a>创建分支、切换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置新建分支代码源为远程分支 branchName</span></span><br><span class="line">git checkout -b branchName  origin/branchName</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换本地已有分支</span></span><br><span class="line">git checkout branchName</span><br></pre></td></tr></table></figure><h3 id="push-本地分支到-remote"><a href="#push-本地分支到-remote" class="headerlink" title="push 本地分支到 remote"></a>push 本地分支到 remote</h3><p>远程服务器不存在该分支时，可通过下列操作 push 本地分支到远程服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b localBranchName</span><br><span class="line">git push origin localBranchName:remoteBranchName</span><br><span class="line">git push --set-upstream origin remoteBranchName</span><br></pre></td></tr></table></figure><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将其他分支代码合并到当前分支</span></span><br><span class="line">git merge otherBranchName</span><br></pre></td></tr></table></figure><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除本地某个分支</span></span><br><span class="line">git branch -d branchName</span><br></pre></td></tr></table></figure><h2 id="Git-Remote"><a href="#Git-Remote" class="headerlink" title="Git Remote"></a>Git Remote</h2><h3 id="查询远程仓库地址"><a href="#查询远程仓库地址" class="headerlink" title="查询远程仓库地址"></a>查询远程仓库地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><h3 id="仓库迁移"><a href="#仓库迁移" class="headerlink" title="仓库迁移"></a>仓库迁移</h3><p>可以保存之前的提交记录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 移除当前仓库关联的远程地址</span></span><br><span class="line">git remote remove origin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关联新的 git 地址到本地仓库</span></span><br><span class="line">git remote add origin newAddress</span><br></pre></td></tr></table></figure><h2 id="撤销提交操作"><a href="#撤销提交操作" class="headerlink" title="撤销提交操作"></a>撤销提交操作</h2><h3 id="撤销-git-add-操作"><a href="#撤销-git-add-操作" class="headerlink" title="撤销 git add 操作"></a>撤销 git add 操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 撤销指定文件</span></span><br><span class="line">git reset HEAD xxx/xxx.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># 撤销所有文件</span></span><br><span class="line">git reset HEAD</span><br></pre></td></tr></table></figure><h3 id="撤销-git-commit-操作"><a href="#撤销-git-commit-操作" class="headerlink" title="撤销 git commit 操作"></a>撤销 git commit 操作</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改当前 commit 注释</span></span><br><span class="line">git commit --amend <span class="comment"># 进入vim编辑器，可以修改注释</span></span><br></pre></td></tr></table></figure><h2 id="代码回退"><a href="#代码回退" class="headerlink" title="代码回退"></a>代码回退</h2><p>回退到之前的某个 commit 代码状态。</p><blockquote><p>主分支的代码是受保护的，在本地代码回退后，再推送到主分支时会失败。开发时最好使用其他分支。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交历史，确认回退版本，拿到 commit_id</span></span><br><span class="line">git <span class="built_in">log</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行版本回退</span></span><br><span class="line">git reset --hard commit_id</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送到远程分支</span></span><br><span class="line">git push --force</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
